/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComponentsSchemasRecordCreateRequestItem from '../model/ComponentsSchemasRecordCreateRequestItem';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';
import InlineObject4 from '../model/InlineObject4';
import InlineObject5 from '../model/InlineObject5';
import RecordJobStatus from '../model/RecordJobStatus';
import RecordList from '../model/RecordList';

/**
* Records service.
* @module api/RecordsApi
* @version 1.0.15
*/
export default class RecordsApi {

    /**
    * Constructs a new RecordsApi. 
    * @alias module:api/RecordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRecords operation.
     * @callback module:api/RecordsApi~createRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordJobStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new record or update subject/record data
     * @param {String} studyKey Study key identifying the study context for the request
     * @param {Array.<module:model/ComponentsSchemasRecordCreateRequestItem>} componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
     * @param {module:api/RecordsApi~createRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordJobStatus}
     */
    createRecords(studyKey, componentsSchemasRecordCreateRequestItem, callback) {
      let postBody = componentsSchemasRecordCreateRequestItem;
      // verify the required parameter 'studyKey' is set
      if (studyKey === undefined || studyKey === null) {
        throw new Error("Missing the required parameter 'studyKey' when calling createRecords");
      }
      // verify the required parameter 'componentsSchemasRecordCreateRequestItem' is set
      if (componentsSchemasRecordCreateRequestItem === undefined || componentsSchemasRecordCreateRequestItem === null) {
        throw new Error("Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords");
      }

      let pathParams = {
        'studyKey': studyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'securityKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordJobStatus;
      return this.apiClient.callApi(
        '/studies/{studyKey}/records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecords operation.
     * @callback module:api/RecordsApi~listRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List records (eCRF instances) in a study
     * @param {String} studyKey Study key identifying the study context for the request
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] Page index to retrieve (0-based)
     * @param {Number} [size = 25)] Number of items to return per page (max 500)
     * @param {String} [sort] Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
     * @param {String} [filter] Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
     * @param {String} [recordDataFilter] Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR).
     * @param {module:api/RecordsApi~listRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordList}
     */
    listRecords(studyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studyKey' is set
      if (studyKey === undefined || studyKey === null) {
        throw new Error("Missing the required parameter 'studyKey' when calling listRecords");
      }

      let pathParams = {
        'studyKey': studyKey
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'filter': opts['filter'],
        'recordDataFilter': opts['recordDataFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'securityKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordList;
      return this.apiClient.callApi(
        '/studies/{studyKey}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
