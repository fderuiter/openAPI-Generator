/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordRevision
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class RecordRevision {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_RECORD_REVISION_ID = "recordRevisionId";
  @SerializedName(SERIALIZED_NAME_RECORD_REVISION_ID)
  @javax.annotation.Nullable
  private Integer recordRevisionId;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  @javax.annotation.Nullable
  private Integer recordId;

  public static final String SERIALIZED_NAME_RECORD_OID = "recordOid";
  @SerializedName(SERIALIZED_NAME_RECORD_OID)
  @javax.annotation.Nullable
  private String recordOid;

  public static final String SERIALIZED_NAME_RECORD_REVISION = "recordRevision";
  @SerializedName(SERIALIZED_NAME_RECORD_REVISION)
  @javax.annotation.Nullable
  private Integer recordRevision;

  public static final String SERIALIZED_NAME_DATA_REVISION = "dataRevision";
  @SerializedName(SERIALIZED_NAME_DATA_REVISION)
  @javax.annotation.Nullable
  private Integer dataRevision;

  public static final String SERIALIZED_NAME_RECORD_STATUS = "recordStatus";
  @SerializedName(SERIALIZED_NAME_RECORD_STATUS)
  @javax.annotation.Nullable
  private String recordStatus;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_OID = "subjectOid";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OID)
  @javax.annotation.Nullable
  private String subjectOid;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private Integer siteId;

  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nullable
  private String formKey;

  public static final String SERIALIZED_NAME_INTERVAL_ID = "intervalId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ID)
  @javax.annotation.Nullable
  private Integer intervalId;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private String role;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public static final String SERIALIZED_NAME_REASON_FOR_CHANGE = "reasonForChange";
  @SerializedName(SERIALIZED_NAME_REASON_FOR_CHANGE)
  @javax.annotation.Nullable
  private String reasonForChange;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public RecordRevision() {
  }

  public RecordRevision studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public RecordRevision recordRevisionId(@javax.annotation.Nullable Integer recordRevisionId) {
    this.recordRevisionId = recordRevisionId;
    return this;
  }

  /**
   * Unique system identifier for the record revision
   * @return recordRevisionId
   */
  @javax.annotation.Nullable
  public Integer getRecordRevisionId() {
    return recordRevisionId;
  }

  public void setRecordRevisionId(@javax.annotation.Nullable Integer recordRevisionId) {
    this.recordRevisionId = recordRevisionId;
  }


  public RecordRevision recordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
    return this;
  }

  /**
   * Unique system identifier of the related record
   * @return recordId
   */
  @javax.annotation.Nullable
  public Integer getRecordId() {
    return recordId;
  }

  public void setRecordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
  }


  public RecordRevision recordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
    return this;
  }

  /**
   * Client-assigned record OID (if any)
   * @return recordOid
   */
  @javax.annotation.Nullable
  public String getRecordOid() {
    return recordOid;
  }

  public void setRecordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
  }


  public RecordRevision recordRevision(@javax.annotation.Nullable Integer recordRevision) {
    this.recordRevision = recordRevision;
    return this;
  }

  /**
   * Revision number of the record (version of the record status)
   * @return recordRevision
   */
  @javax.annotation.Nullable
  public Integer getRecordRevision() {
    return recordRevision;
  }

  public void setRecordRevision(@javax.annotation.Nullable Integer recordRevision) {
    this.recordRevision = recordRevision;
  }


  public RecordRevision dataRevision(@javax.annotation.Nullable Integer dataRevision) {
    this.dataRevision = dataRevision;
    return this;
  }

  /**
   * Revision number of the data within the record
   * @return dataRevision
   */
  @javax.annotation.Nullable
  public Integer getDataRevision() {
    return dataRevision;
  }

  public void setDataRevision(@javax.annotation.Nullable Integer dataRevision) {
    this.dataRevision = dataRevision;
  }


  public RecordRevision recordStatus(@javax.annotation.Nullable String recordStatus) {
    this.recordStatus = recordStatus;
    return this;
  }

  /**
   * Status of the record at this revision (user-defined status label)
   * @return recordStatus
   */
  @javax.annotation.Nullable
  public String getRecordStatus() {
    return recordStatus;
  }

  public void setRecordStatus(@javax.annotation.Nullable String recordStatus) {
    this.recordStatus = recordStatus;
  }


  public RecordRevision subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Mednet subject ID related to the record
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public RecordRevision subjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

  /**
   * Client-assigned subject OID related to the record
   * @return subjectOid
   */
  @javax.annotation.Nullable
  public String getSubjectOid() {
    return subjectOid;
  }

  public void setSubjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
  }


  public RecordRevision subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Subject display ID related to the record
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public RecordRevision siteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID related to the record
   * @return siteId
   */
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
  }


  public RecordRevision formKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * Form key of the form that the record belongs to
   * @return formKey
   */
  @javax.annotation.Nullable
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }


  public RecordRevision intervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

  /**
   * Interval ID (visit definition) related to the record
   * @return intervalId
   */
  @javax.annotation.Nullable
  public Integer getIntervalId() {
    return intervalId;
  }

  public void setIntervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
  }


  public RecordRevision role(@javax.annotation.Nullable String role) {
    this.role = role;
    return this;
  }

  /**
   * Role name of the user who saved the record revision
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = role;
  }


  public RecordRevision user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * Username of the user who saved the record revision
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }


  public RecordRevision reasonForChange(@javax.annotation.Nullable String reasonForChange) {
    this.reasonForChange = reasonForChange;
    return this;
  }

  /**
   * Reason for change, if provided (for audit trail)
   * @return reasonForChange
   */
  @javax.annotation.Nullable
  public String getReasonForChange() {
    return reasonForChange;
  }

  public void setReasonForChange(@javax.annotation.Nullable String reasonForChange) {
    this.reasonForChange = reasonForChange;
  }


  public RecordRevision deleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the record was deleted in this revision
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
  }


  public RecordRevision dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this record revision was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordRevision recordRevision = (RecordRevision) o;
    return Objects.equals(this.studyKey, recordRevision.studyKey) &&
        Objects.equals(this.recordRevisionId, recordRevision.recordRevisionId) &&
        Objects.equals(this.recordId, recordRevision.recordId) &&
        Objects.equals(this.recordOid, recordRevision.recordOid) &&
        Objects.equals(this.recordRevision, recordRevision.recordRevision) &&
        Objects.equals(this.dataRevision, recordRevision.dataRevision) &&
        Objects.equals(this.recordStatus, recordRevision.recordStatus) &&
        Objects.equals(this.subjectId, recordRevision.subjectId) &&
        Objects.equals(this.subjectOid, recordRevision.subjectOid) &&
        Objects.equals(this.subjectKey, recordRevision.subjectKey) &&
        Objects.equals(this.siteId, recordRevision.siteId) &&
        Objects.equals(this.formKey, recordRevision.formKey) &&
        Objects.equals(this.intervalId, recordRevision.intervalId) &&
        Objects.equals(this.role, recordRevision.role) &&
        Objects.equals(this.user, recordRevision.user) &&
        Objects.equals(this.reasonForChange, recordRevision.reasonForChange) &&
        Objects.equals(this.deleted, recordRevision.deleted) &&
        Objects.equals(this.dateCreated, recordRevision.dateCreated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, recordRevisionId, recordId, recordOid, recordRevision, dataRevision, recordStatus, subjectId, subjectOid, subjectKey, siteId, formKey, intervalId, role, user, reasonForChange, deleted, dateCreated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordRevision {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    recordRevisionId: ").append(toIndentedString(recordRevisionId)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    recordOid: ").append(toIndentedString(recordOid)).append("\n");
    sb.append("    recordRevision: ").append(toIndentedString(recordRevision)).append("\n");
    sb.append("    dataRevision: ").append(toIndentedString(dataRevision)).append("\n");
    sb.append("    recordStatus: ").append(toIndentedString(recordStatus)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    reasonForChange: ").append(toIndentedString(reasonForChange)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "recordRevisionId", "recordId", "recordOid", "recordRevision", "dataRevision", "recordStatus", "subjectId", "subjectOid", "subjectKey", "siteId", "formKey", "intervalId", "role", "user", "reasonForChange", "deleted", "dateCreated"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordRevision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordRevision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordRevision is not found in the empty JSON string", RecordRevision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordRevision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordRevision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("recordOid") != null && !jsonObj.get("recordOid").isJsonNull()) && !jsonObj.get("recordOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordOid").toString()));
      }
      if ((jsonObj.get("recordStatus") != null && !jsonObj.get("recordStatus").isJsonNull()) && !jsonObj.get("recordStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordStatus").toString()));
      }
      if ((jsonObj.get("subjectOid") != null && !jsonObj.get("subjectOid").isJsonNull()) && !jsonObj.get("subjectOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOid").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("formKey") != null && !jsonObj.get("formKey").isJsonNull()) && !jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("reasonForChange") != null && !jsonObj.get("reasonForChange").isJsonNull()) && !jsonObj.get("reasonForChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonForChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonForChange").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordRevision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordRevision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordRevision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordRevision.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordRevision>() {
           @Override
           public void write(JsonWriter out, RecordRevision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordRevision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordRevision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordRevision
   * @throws IOException if the JSON string is invalid with respect to RecordRevision
   */
  public static RecordRevision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordRevision.class);
  }

  /**
   * Convert an instance of RecordRevision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

