/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Keyword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Record
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Record {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_INTERVAL_ID = "intervalId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ID)
  @javax.annotation.Nullable
  private Integer intervalId;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  @javax.annotation.Nullable
  private Integer formId;

  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nullable
  private String formKey;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private Integer siteId;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  @javax.annotation.Nullable
  private Integer recordId;

  public static final String SERIALIZED_NAME_RECORD_OID = "recordOid";
  @SerializedName(SERIALIZED_NAME_RECORD_OID)
  @javax.annotation.Nullable
  private String recordOid;

  public static final String SERIALIZED_NAME_RECORD_TYPE = "recordType";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  @javax.annotation.Nullable
  private String recordType;

  public static final String SERIALIZED_NAME_RECORD_STATUS = "recordStatus";
  @SerializedName(SERIALIZED_NAME_RECORD_STATUS)
  @javax.annotation.Nullable
  private String recordStatus;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_OID = "subjectOid";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OID)
  @javax.annotation.Nullable
  private String subjectOid;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  @javax.annotation.Nullable
  private Integer visitId;

  public static final String SERIALIZED_NAME_PARENT_RECORD_ID = "parentRecordId";
  @SerializedName(SERIALIZED_NAME_PARENT_RECORD_ID)
  @javax.annotation.Nullable
  private Integer parentRecordId;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  @javax.annotation.Nullable
  private List<Keyword> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORD_DATA = "recordData";
  @SerializedName(SERIALIZED_NAME_RECORD_DATA)
  @javax.annotation.Nullable
  private Map<String, Object> recordData = new HashMap<>();

  public Record() {
  }

  public Record studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Record intervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

  /**
   * Interval ID (visit definition) that this record is associated with
   * @return intervalId
   */
  @javax.annotation.Nullable
  public Integer getIntervalId() {
    return intervalId;
  }

  public void setIntervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
  }


  public Record formId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * Form ID of the form this record instance belongs to
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
  }


  public Record formKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * Form key of the form for this record instance
   * @return formKey
   */
  @javax.annotation.Nullable
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }


  public Record siteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID associated with the record
   * @return siteId
   */
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
  }


  public Record recordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
    return this;
  }

  /**
   * Unique record ID
   * @return recordId
   */
  @javax.annotation.Nullable
  public Integer getRecordId() {
    return recordId;
  }

  public void setRecordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
  }


  public Record recordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
    return this;
  }

  /**
   * Client-assigned record OID
   * @return recordOid
   */
  @javax.annotation.Nullable
  public String getRecordOid() {
    return recordOid;
  }

  public void setRecordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
  }


  public Record recordType(@javax.annotation.Nullable String recordType) {
    this.recordType = recordType;
    return this;
  }

  /**
   * Type of record (e.g., SUBJECT for subject-related forms)
   * @return recordType
   */
  @javax.annotation.Nullable
  public String getRecordType() {
    return recordType;
  }

  public void setRecordType(@javax.annotation.Nullable String recordType) {
    this.recordType = recordType;
  }


  public Record recordStatus(@javax.annotation.Nullable String recordStatus) {
    this.recordStatus = recordStatus;
    return this;
  }

  /**
   * Current status of the record (e.g., Record Incomplete, Record Complete)
   * @return recordStatus
   */
  @javax.annotation.Nullable
  public String getRecordStatus() {
    return recordStatus;
  }

  public void setRecordStatus(@javax.annotation.Nullable String recordStatus) {
    this.recordStatus = recordStatus;
  }


  public Record deleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the record is marked as deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
  }


  public Record dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this record was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Record dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this record was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }


  public Record subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Mednet subject ID that this record is associated with
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public Record subjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

  /**
   * Client-assigned subject OID for the subject this record is associated with
   * @return subjectOid
   */
  @javax.annotation.Nullable
  public String getSubjectOid() {
    return subjectOid;
  }

  public void setSubjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
  }


  public Record subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Subject display ID that this record is associated with
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public Record visitId(@javax.annotation.Nullable Integer visitId) {
    this.visitId = visitId;
    return this;
  }

  /**
   * Visit instance ID that this record is associated with (if applicable)
   * @return visitId
   */
  @javax.annotation.Nullable
  public Integer getVisitId() {
    return visitId;
  }

  public void setVisitId(@javax.annotation.Nullable Integer visitId) {
    this.visitId = visitId;
  }


  public Record parentRecordId(@javax.annotation.Nullable Integer parentRecordId) {
    this.parentRecordId = parentRecordId;
    return this;
  }

  /**
   * Record ID of the parent record if this record is a subrecord (if applicable)
   * @return parentRecordId
   */
  @javax.annotation.Nullable
  public Integer getParentRecordId() {
    return parentRecordId;
  }

  public void setParentRecordId(@javax.annotation.Nullable Integer parentRecordId) {
    this.parentRecordId = parentRecordId;
  }


  public Record keywords(@javax.annotation.Nullable List<Keyword> keywords) {
    this.keywords = keywords;
    return this;
  }

  public Record addKeywordsItem(Keyword keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * List of keywords associated with the record
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<Keyword> getKeywords() {
    return keywords;
  }

  public void setKeywords(@javax.annotation.Nullable List<Keyword> keywords) {
    this.keywords = keywords;
  }


  public Record recordData(@javax.annotation.Nullable Map<String, Object> recordData) {
    this.recordData = recordData;
    return this;
  }

  public Record putRecordDataItem(String key, Object recordDataItem) {
    if (this.recordData == null) {
      this.recordData = new HashMap<>();
    }
    this.recordData.put(key, recordDataItem);
    return this;
  }

  /**
   * Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
   * @return recordData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRecordData() {
    return recordData;
  }

  public void setRecordData(@javax.annotation.Nullable Map<String, Object> recordData) {
    this.recordData = recordData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Record record = (Record) o;
    return Objects.equals(this.studyKey, record.studyKey) &&
        Objects.equals(this.intervalId, record.intervalId) &&
        Objects.equals(this.formId, record.formId) &&
        Objects.equals(this.formKey, record.formKey) &&
        Objects.equals(this.siteId, record.siteId) &&
        Objects.equals(this.recordId, record.recordId) &&
        Objects.equals(this.recordOid, record.recordOid) &&
        Objects.equals(this.recordType, record.recordType) &&
        Objects.equals(this.recordStatus, record.recordStatus) &&
        Objects.equals(this.deleted, record.deleted) &&
        Objects.equals(this.dateCreated, record.dateCreated) &&
        Objects.equals(this.dateModified, record.dateModified) &&
        Objects.equals(this.subjectId, record.subjectId) &&
        Objects.equals(this.subjectOid, record.subjectOid) &&
        Objects.equals(this.subjectKey, record.subjectKey) &&
        Objects.equals(this.visitId, record.visitId) &&
        Objects.equals(this.parentRecordId, record.parentRecordId) &&
        Objects.equals(this.keywords, record.keywords) &&
        Objects.equals(this.recordData, record.recordData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, intervalId, formId, formKey, siteId, recordId, recordOid, recordType, recordStatus, deleted, dateCreated, dateModified, subjectId, subjectOid, subjectKey, visitId, parentRecordId, keywords, recordData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Record {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    recordOid: ").append(toIndentedString(recordOid)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    recordStatus: ").append(toIndentedString(recordStatus)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    parentRecordId: ").append(toIndentedString(parentRecordId)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    recordData: ").append(toIndentedString(recordData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "intervalId", "formId", "formKey", "siteId", "recordId", "recordOid", "recordType", "recordStatus", "deleted", "dateCreated", "dateModified", "subjectId", "subjectOid", "subjectKey", "visitId", "parentRecordId", "keywords", "recordData"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Record
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Record.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Record is not found in the empty JSON string", Record.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Record.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Record` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("formKey") != null && !jsonObj.get("formKey").isJsonNull()) && !jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("recordOid") != null && !jsonObj.get("recordOid").isJsonNull()) && !jsonObj.get("recordOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordOid").toString()));
      }
      if ((jsonObj.get("recordType") != null && !jsonObj.get("recordType").isJsonNull()) && !jsonObj.get("recordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordType").toString()));
      }
      if ((jsonObj.get("recordStatus") != null && !jsonObj.get("recordStatus").isJsonNull()) && !jsonObj.get("recordStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordStatus").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
      if ((jsonObj.get("subjectOid") != null && !jsonObj.get("subjectOid").isJsonNull()) && !jsonObj.get("subjectOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOid").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
          }

          // validate the optional field `keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            Keyword.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Record.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Record' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Record> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Record.class));

       return (TypeAdapter<T>) new TypeAdapter<Record>() {
           @Override
           public void write(JsonWriter out, Record value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Record read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Record given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Record
   * @throws IOException if the JSON string is invalid with respect to Record
   */
  public static Record fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Record.class);
  }

  /**
   * Convert an instance of Record to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

