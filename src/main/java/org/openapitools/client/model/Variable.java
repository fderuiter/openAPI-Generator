/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Variable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Variable {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_VARIABLE_ID = "variableId";
  @SerializedName(SERIALIZED_NAME_VARIABLE_ID)
  @javax.annotation.Nullable
  private Integer variableId;

  /**
   * Type of the variable (field type), e.g., RADIO, TEXT, etc.
   */
  @JsonAdapter(VariableTypeEnum.Adapter.class)
  public enum VariableTypeEnum {
    TEXT("TEXT"),
    
    TEXTAREA("TEXTAREA"),
    
    RADIO("RADIO"),
    
    CHECKBOX("CHECKBOX"),
    
    DROPDOWN("DROPDOWN"),
    
    DATE("DATE"),
    
    NUMBER("NUMBER");

    private String value;

    VariableTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariableTypeEnum fromValue(String value) {
      for (VariableTypeEnum b : VariableTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariableTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariableTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariableTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariableTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VariableTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIABLE_TYPE = "variableType";
  @SerializedName(SERIALIZED_NAME_VARIABLE_TYPE)
  @javax.annotation.Nullable
  private VariableTypeEnum variableType;

  public static final String SERIALIZED_NAME_VARIABLE_NAME = "variableName";
  @SerializedName(SERIALIZED_NAME_VARIABLE_NAME)
  @javax.annotation.Nullable
  private String variableName;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  @javax.annotation.Nullable
  private Integer sequence;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  @javax.annotation.Nullable
  private Integer revision;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  @javax.annotation.Nullable
  private Integer formId;

  public static final String SERIALIZED_NAME_VARIABLE_OID = "variableOid";
  @SerializedName(SERIALIZED_NAME_VARIABLE_OID)
  @javax.annotation.Nullable
  private String variableOid;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private Boolean deleted;

  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nullable
  private String formKey;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_BLINDED = "blinded";
  @SerializedName(SERIALIZED_NAME_BLINDED)
  @javax.annotation.Nullable
  private Boolean blinded;

  public Variable() {
  }

  public Variable studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Variable variableId(@javax.annotation.Nullable Integer variableId) {
    this.variableId = variableId;
    return this;
  }

  /**
   * Mednet variable ID
   * @return variableId
   */
  @javax.annotation.Nullable
  public Integer getVariableId() {
    return variableId;
  }

  public void setVariableId(@javax.annotation.Nullable Integer variableId) {
    this.variableId = variableId;
  }


  public Variable variableType(@javax.annotation.Nullable VariableTypeEnum variableType) {
    this.variableType = variableType;
    return this;
  }

  /**
   * Type of the variable (field type), e.g., RADIO, TEXT, etc.
   * @return variableType
   */
  @javax.annotation.Nullable
  public VariableTypeEnum getVariableType() {
    return variableType;
  }

  public void setVariableType(@javax.annotation.Nullable VariableTypeEnum variableType) {
    this.variableType = variableType;
  }


  public Variable variableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
    return this;
  }

  /**
   * Name of the variable (question text or label)
   * @return variableName
   */
  @javax.annotation.Nullable
  public String getVariableName() {
    return variableName;
  }

  public void setVariableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
  }


  public Variable sequence(@javax.annotation.Nullable Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Sequence of the variable on the form
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(@javax.annotation.Nullable Integer sequence) {
    this.sequence = sequence;
  }


  public Variable revision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Number of modifications of the variable (via form metadata revisions)
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
  }


  public Variable disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the variable is marked as disabled (deleted)
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public Variable dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this variable was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Variable dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this variable was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }


  public Variable formId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * ID of the form that this variable belongs to
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
  }


  public Variable variableOid(@javax.annotation.Nullable String variableOid) {
    this.variableOid = variableOid;
    return this;
  }

  /**
   * Client-assigned variable OID
   * @return variableOid
   */
  @javax.annotation.Nullable
  public String getVariableOid() {
    return variableOid;
  }

  public void setVariableOid(@javax.annotation.Nullable String variableOid) {
    this.variableOid = variableOid;
  }


  public Variable deleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the variable is marked as deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
  }


  public Variable formKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * Form key of the form that this variable belongs to
   * @return formKey
   */
  @javax.annotation.Nullable
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }


  public Variable formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Name of the form that this variable belongs to
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public Variable label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * User-defined identifier (field name) for the variable
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public Variable blinded(@javax.annotation.Nullable Boolean blinded) {
    this.blinded = blinded;
    return this;
  }

  /**
   * Whether the variable is flagged as blinded (hidden in certain contexts)
   * @return blinded
   */
  @javax.annotation.Nullable
  public Boolean getBlinded() {
    return blinded;
  }

  public void setBlinded(@javax.annotation.Nullable Boolean blinded) {
    this.blinded = blinded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Variable variable = (Variable) o;
    return Objects.equals(this.studyKey, variable.studyKey) &&
        Objects.equals(this.variableId, variable.variableId) &&
        Objects.equals(this.variableType, variable.variableType) &&
        Objects.equals(this.variableName, variable.variableName) &&
        Objects.equals(this.sequence, variable.sequence) &&
        Objects.equals(this.revision, variable.revision) &&
        Objects.equals(this.disabled, variable.disabled) &&
        Objects.equals(this.dateCreated, variable.dateCreated) &&
        Objects.equals(this.dateModified, variable.dateModified) &&
        Objects.equals(this.formId, variable.formId) &&
        Objects.equals(this.variableOid, variable.variableOid) &&
        Objects.equals(this.deleted, variable.deleted) &&
        Objects.equals(this.formKey, variable.formKey) &&
        Objects.equals(this.formName, variable.formName) &&
        Objects.equals(this.label, variable.label) &&
        Objects.equals(this.blinded, variable.blinded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, variableId, variableType, variableName, sequence, revision, disabled, dateCreated, dateModified, formId, variableOid, deleted, formKey, formName, label, blinded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Variable {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    variableId: ").append(toIndentedString(variableId)).append("\n");
    sb.append("    variableType: ").append(toIndentedString(variableType)).append("\n");
    sb.append("    variableName: ").append(toIndentedString(variableName)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    variableOid: ").append(toIndentedString(variableOid)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    blinded: ").append(toIndentedString(blinded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "variableId", "variableType", "variableName", "sequence", "revision", "disabled", "dateCreated", "dateModified", "formId", "variableOid", "deleted", "formKey", "formName", "label", "blinded"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Variable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Variable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Variable is not found in the empty JSON string", Variable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Variable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Variable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("variableType") != null && !jsonObj.get("variableType").isJsonNull()) && !jsonObj.get("variableType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableType").toString()));
      }
      // validate the optional field `variableType`
      if (jsonObj.get("variableType") != null && !jsonObj.get("variableType").isJsonNull()) {
        VariableTypeEnum.validateJsonElement(jsonObj.get("variableType"));
      }
      if ((jsonObj.get("variableName") != null && !jsonObj.get("variableName").isJsonNull()) && !jsonObj.get("variableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableName").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
      if ((jsonObj.get("variableOid") != null && !jsonObj.get("variableOid").isJsonNull()) && !jsonObj.get("variableOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableOid").toString()));
      }
      if ((jsonObj.get("formKey") != null && !jsonObj.get("formKey").isJsonNull()) && !jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Variable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Variable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Variable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Variable.class));

       return (TypeAdapter<T>) new TypeAdapter<Variable>() {
           @Override
           public void write(JsonWriter out, Variable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Variable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Variable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Variable
   * @throws IOException if the JSON string is invalid with respect to Variable
   */
  public static Variable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Variable.class);
  }

  /**
   * Convert an instance of Variable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

