/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Form
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Form {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  @javax.annotation.Nullable
  private Integer formId;

  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nullable
  private String formKey;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_FORM_TYPE = "formType";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  @javax.annotation.Nullable
  private String formType;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  @javax.annotation.Nullable
  private Integer revision;

  public static final String SERIALIZED_NAME_EMBEDDED_LOG = "embeddedLog";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_LOG)
  @javax.annotation.Nullable
  private Boolean embeddedLog;

  public static final String SERIALIZED_NAME_ENFORCE_OWNERSHIP = "enforceOwnership";
  @SerializedName(SERIALIZED_NAME_ENFORCE_OWNERSHIP)
  @javax.annotation.Nullable
  private Boolean enforceOwnership;

  public static final String SERIALIZED_NAME_USER_AGREEMENT = "userAgreement";
  @SerializedName(SERIALIZED_NAME_USER_AGREEMENT)
  @javax.annotation.Nullable
  private Boolean userAgreement;

  public static final String SERIALIZED_NAME_SUBJECT_RECORD_REPORT = "subjectRecordReport";
  @SerializedName(SERIALIZED_NAME_SUBJECT_RECORD_REPORT)
  @javax.annotation.Nullable
  private Boolean subjectRecordReport;

  public static final String SERIALIZED_NAME_UNSCHEDULED_VISIT = "unscheduledVisit";
  @SerializedName(SERIALIZED_NAME_UNSCHEDULED_VISIT)
  @javax.annotation.Nullable
  private Boolean unscheduledVisit;

  public static final String SERIALIZED_NAME_OTHER_FORMS = "otherForms";
  @SerializedName(SERIALIZED_NAME_OTHER_FORMS)
  @javax.annotation.Nullable
  private Boolean otherForms;

  public static final String SERIALIZED_NAME_EPRO_FORM = "eproForm";
  @SerializedName(SERIALIZED_NAME_EPRO_FORM)
  @javax.annotation.Nullable
  private Boolean eproForm;

  public static final String SERIALIZED_NAME_ALLOW_COPY = "allowCopy";
  @SerializedName(SERIALIZED_NAME_ALLOW_COPY)
  @javax.annotation.Nullable
  private Boolean allowCopy;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public Form() {
  }

  public Form studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Form formId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * Mednet Form ID
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
  }


  public Form formKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * User-defined form key
   * @return formKey
   */
  @javax.annotation.Nullable
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }


  public Form formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Name of the form (eCRF)
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public Form formType(@javax.annotation.Nullable String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * Type of the form (e.g., Subject or Site)
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(@javax.annotation.Nullable String formType) {
    this.formType = formType;
  }


  public Form revision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Number of modifications (revisions) of the form metadata
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
  }


  public Form embeddedLog(@javax.annotation.Nullable Boolean embeddedLog) {
    this.embeddedLog = embeddedLog;
    return this;
  }

  /**
   * Whether the form has an embedded log
   * @return embeddedLog
   */
  @javax.annotation.Nullable
  public Boolean getEmbeddedLog() {
    return embeddedLog;
  }

  public void setEmbeddedLog(@javax.annotation.Nullable Boolean embeddedLog) {
    this.embeddedLog = embeddedLog;
  }


  public Form enforceOwnership(@javax.annotation.Nullable Boolean enforceOwnership) {
    this.enforceOwnership = enforceOwnership;
    return this;
  }

  /**
   * Whether the form enforces record ownership
   * @return enforceOwnership
   */
  @javax.annotation.Nullable
  public Boolean getEnforceOwnership() {
    return enforceOwnership;
  }

  public void setEnforceOwnership(@javax.annotation.Nullable Boolean enforceOwnership) {
    this.enforceOwnership = enforceOwnership;
  }


  public Form userAgreement(@javax.annotation.Nullable Boolean userAgreement) {
    this.userAgreement = userAgreement;
    return this;
  }

  /**
   * Whether the form requires a user agreement
   * @return userAgreement
   */
  @javax.annotation.Nullable
  public Boolean getUserAgreement() {
    return userAgreement;
  }

  public void setUserAgreement(@javax.annotation.Nullable Boolean userAgreement) {
    this.userAgreement = userAgreement;
  }


  public Form subjectRecordReport(@javax.annotation.Nullable Boolean subjectRecordReport) {
    this.subjectRecordReport = subjectRecordReport;
    return this;
  }

  /**
   * Whether the form is marked as a subject record report
   * @return subjectRecordReport
   */
  @javax.annotation.Nullable
  public Boolean getSubjectRecordReport() {
    return subjectRecordReport;
  }

  public void setSubjectRecordReport(@javax.annotation.Nullable Boolean subjectRecordReport) {
    this.subjectRecordReport = subjectRecordReport;
  }


  public Form unscheduledVisit(@javax.annotation.Nullable Boolean unscheduledVisit) {
    this.unscheduledVisit = unscheduledVisit;
    return this;
  }

  /**
   * Whether the form is included in unscheduled visits
   * @return unscheduledVisit
   */
  @javax.annotation.Nullable
  public Boolean getUnscheduledVisit() {
    return unscheduledVisit;
  }

  public void setUnscheduledVisit(@javax.annotation.Nullable Boolean unscheduledVisit) {
    this.unscheduledVisit = unscheduledVisit;
  }


  public Form otherForms(@javax.annotation.Nullable Boolean otherForms) {
    this.otherForms = otherForms;
    return this;
  }

  /**
   * Whether the form is included in Other Forms category
   * @return otherForms
   */
  @javax.annotation.Nullable
  public Boolean getOtherForms() {
    return otherForms;
  }

  public void setOtherForms(@javax.annotation.Nullable Boolean otherForms) {
    this.otherForms = otherForms;
  }


  public Form eproForm(@javax.annotation.Nullable Boolean eproForm) {
    this.eproForm = eproForm;
    return this;
  }

  /**
   * Whether the form is an ePRO (electronic patient reported outcome) form
   * @return eproForm
   */
  @javax.annotation.Nullable
  public Boolean getEproForm() {
    return eproForm;
  }

  public void setEproForm(@javax.annotation.Nullable Boolean eproForm) {
    this.eproForm = eproForm;
  }


  public Form allowCopy(@javax.annotation.Nullable Boolean allowCopy) {
    this.allowCopy = allowCopy;
    return this;
  }

  /**
   * Whether the form allows copying of data
   * @return allowCopy
   */
  @javax.annotation.Nullable
  public Boolean getAllowCopy() {
    return allowCopy;
  }

  public void setAllowCopy(@javax.annotation.Nullable Boolean allowCopy) {
    this.allowCopy = allowCopy;
  }


  public Form disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the form is soft-deleted (disabled)
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public Form dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this form was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Form dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this form was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Form form = (Form) o;
    return Objects.equals(this.studyKey, form.studyKey) &&
        Objects.equals(this.formId, form.formId) &&
        Objects.equals(this.formKey, form.formKey) &&
        Objects.equals(this.formName, form.formName) &&
        Objects.equals(this.formType, form.formType) &&
        Objects.equals(this.revision, form.revision) &&
        Objects.equals(this.embeddedLog, form.embeddedLog) &&
        Objects.equals(this.enforceOwnership, form.enforceOwnership) &&
        Objects.equals(this.userAgreement, form.userAgreement) &&
        Objects.equals(this.subjectRecordReport, form.subjectRecordReport) &&
        Objects.equals(this.unscheduledVisit, form.unscheduledVisit) &&
        Objects.equals(this.otherForms, form.otherForms) &&
        Objects.equals(this.eproForm, form.eproForm) &&
        Objects.equals(this.allowCopy, form.allowCopy) &&
        Objects.equals(this.disabled, form.disabled) &&
        Objects.equals(this.dateCreated, form.dateCreated) &&
        Objects.equals(this.dateModified, form.dateModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, formId, formKey, formName, formType, revision, embeddedLog, enforceOwnership, userAgreement, subjectRecordReport, unscheduledVisit, otherForms, eproForm, allowCopy, disabled, dateCreated, dateModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Form {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    embeddedLog: ").append(toIndentedString(embeddedLog)).append("\n");
    sb.append("    enforceOwnership: ").append(toIndentedString(enforceOwnership)).append("\n");
    sb.append("    userAgreement: ").append(toIndentedString(userAgreement)).append("\n");
    sb.append("    subjectRecordReport: ").append(toIndentedString(subjectRecordReport)).append("\n");
    sb.append("    unscheduledVisit: ").append(toIndentedString(unscheduledVisit)).append("\n");
    sb.append("    otherForms: ").append(toIndentedString(otherForms)).append("\n");
    sb.append("    eproForm: ").append(toIndentedString(eproForm)).append("\n");
    sb.append("    allowCopy: ").append(toIndentedString(allowCopy)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "formId", "formKey", "formName", "formType", "revision", "embeddedLog", "enforceOwnership", "userAgreement", "subjectRecordReport", "unscheduledVisit", "otherForms", "eproForm", "allowCopy", "disabled", "dateCreated", "dateModified"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Form
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Form.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Form is not found in the empty JSON string", Form.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Form.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Form` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("formKey") != null && !jsonObj.get("formKey").isJsonNull()) && !jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      if ((jsonObj.get("formType") != null && !jsonObj.get("formType").isJsonNull()) && !jsonObj.get("formType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formType").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Form.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Form' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Form> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Form.class));

       return (TypeAdapter<T>) new TypeAdapter<Form>() {
           @Override
           public void write(JsonWriter out, Form value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Form read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Form given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Form
   * @throws IOException if the JSON string is invalid with respect to Form
   */
  public static Form fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Form.class);
  }

  /**
   * Convert an instance of Form to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

