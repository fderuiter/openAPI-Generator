/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Coding
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Coding {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  @javax.annotation.Nullable
  private String siteName;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private Integer siteId;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  @javax.annotation.Nullable
  private Integer formId;

  public static final String SERIALIZED_NAME_FORM_NAME = "formName";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  @javax.annotation.Nullable
  private String formName;

  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nullable
  private String formKey;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  @javax.annotation.Nullable
  private Integer revision;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  @javax.annotation.Nullable
  private Integer recordId;

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  @javax.annotation.Nullable
  private String variable;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nullable
  private String value;

  public static final String SERIALIZED_NAME_CODING_ID = "codingId";
  @SerializedName(SERIALIZED_NAME_CODING_ID)
  @javax.annotation.Nullable
  private Integer codingId;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_CODED_BY = "codedBy";
  @SerializedName(SERIALIZED_NAME_CODED_BY)
  @javax.annotation.Nullable
  private String codedBy;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_DICTIONARY_NAME = "dictionaryName";
  @SerializedName(SERIALIZED_NAME_DICTIONARY_NAME)
  @javax.annotation.Nullable
  private String dictionaryName;

  public static final String SERIALIZED_NAME_DICTIONARY_VERSION = "dictionaryVersion";
  @SerializedName(SERIALIZED_NAME_DICTIONARY_VERSION)
  @javax.annotation.Nullable
  private String dictionaryVersion;

  public static final String SERIALIZED_NAME_DATE_CODED = "dateCoded";
  @SerializedName(SERIALIZED_NAME_DATE_CODED)
  @javax.annotation.Nullable
  private String dateCoded;

  public Coding() {
  }

  public Coding studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Coding siteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Name of the site associated with the coded data
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
  }


  public Coding siteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID associated with the coded data
   * @return siteId
   */
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
  }


  public Coding subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Subject ID associated with the coded data
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public Coding subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Subject key (display ID) associated with the coded data
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public Coding formId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * Form ID where the coded data originates
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
  }


  public Coding formName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Name of the form where the coded data originates
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(@javax.annotation.Nullable String formName) {
    this.formName = formName;
  }


  public Coding formKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * Form key where the coded data originates
   * @return formKey
   */
  @javax.annotation.Nullable
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nullable String formKey) {
    this.formKey = formKey;
  }


  public Coding revision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Revision number of the coding entry
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(@javax.annotation.Nullable Integer revision) {
    this.revision = revision;
  }


  public Coding recordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
    return this;
  }

  /**
   * Record ID associated with the coded data
   * @return recordId
   */
  @javax.annotation.Nullable
  public Integer getRecordId() {
    return recordId;
  }

  public void setRecordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
  }


  public Coding variable(@javax.annotation.Nullable String variable) {
    this.variable = variable;
    return this;
  }

  /**
   * Variable name (field) that was coded
   * @return variable
   */
  @javax.annotation.Nullable
  public String getVariable() {
    return variable;
  }

  public void setVariable(@javax.annotation.Nullable String variable) {
    this.variable = variable;
  }


  public Coding value(@javax.annotation.Nullable String value) {
    this.value = value;
    return this;
  }

  /**
   * Original value entered that required coding
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nullable String value) {
    this.value = value;
  }


  public Coding codingId(@javax.annotation.Nullable Integer codingId) {
    this.codingId = codingId;
    return this;
  }

  /**
   * Mednet coding ID
   * @return codingId
   */
  @javax.annotation.Nullable
  public Integer getCodingId() {
    return codingId;
  }

  public void setCodingId(@javax.annotation.Nullable Integer codingId) {
    this.codingId = codingId;
  }


  public Coding code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Standardized code assigned (e.g., dictionary term)
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public Coding codedBy(@javax.annotation.Nullable String codedBy) {
    this.codedBy = codedBy;
    return this;
  }

  /**
   * Name of the user who performed the coding
   * @return codedBy
   */
  @javax.annotation.Nullable
  public String getCodedBy() {
    return codedBy;
  }

  public void setCodedBy(@javax.annotation.Nullable String codedBy) {
    this.codedBy = codedBy;
  }


  public Coding reason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason for coding or any notes on changes
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
  }


  public Coding dictionaryName(@javax.annotation.Nullable String dictionaryName) {
    this.dictionaryName = dictionaryName;
    return this;
  }

  /**
   * Name of the dictionary used (e.g., MedDRA)
   * @return dictionaryName
   */
  @javax.annotation.Nullable
  public String getDictionaryName() {
    return dictionaryName;
  }

  public void setDictionaryName(@javax.annotation.Nullable String dictionaryName) {
    this.dictionaryName = dictionaryName;
  }


  public Coding dictionaryVersion(@javax.annotation.Nullable String dictionaryVersion) {
    this.dictionaryVersion = dictionaryVersion;
    return this;
  }

  /**
   * Version of the dictionary used
   * @return dictionaryVersion
   */
  @javax.annotation.Nullable
  public String getDictionaryVersion() {
    return dictionaryVersion;
  }

  public void setDictionaryVersion(@javax.annotation.Nullable String dictionaryVersion) {
    this.dictionaryVersion = dictionaryVersion;
  }


  public Coding dateCoded(@javax.annotation.Nullable String dateCoded) {
    this.dateCoded = dateCoded;
    return this;
  }

  /**
   * Date when the coding was performed
   * @return dateCoded
   */
  @javax.annotation.Nullable
  public String getDateCoded() {
    return dateCoded;
  }

  public void setDateCoded(@javax.annotation.Nullable String dateCoded) {
    this.dateCoded = dateCoded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coding coding = (Coding) o;
    return Objects.equals(this.studyKey, coding.studyKey) &&
        Objects.equals(this.siteName, coding.siteName) &&
        Objects.equals(this.siteId, coding.siteId) &&
        Objects.equals(this.subjectId, coding.subjectId) &&
        Objects.equals(this.subjectKey, coding.subjectKey) &&
        Objects.equals(this.formId, coding.formId) &&
        Objects.equals(this.formName, coding.formName) &&
        Objects.equals(this.formKey, coding.formKey) &&
        Objects.equals(this.revision, coding.revision) &&
        Objects.equals(this.recordId, coding.recordId) &&
        Objects.equals(this.variable, coding.variable) &&
        Objects.equals(this.value, coding.value) &&
        Objects.equals(this.codingId, coding.codingId) &&
        Objects.equals(this.code, coding.code) &&
        Objects.equals(this.codedBy, coding.codedBy) &&
        Objects.equals(this.reason, coding.reason) &&
        Objects.equals(this.dictionaryName, coding.dictionaryName) &&
        Objects.equals(this.dictionaryVersion, coding.dictionaryVersion) &&
        Objects.equals(this.dateCoded, coding.dateCoded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, siteName, siteId, subjectId, subjectKey, formId, formName, formKey, revision, recordId, variable, value, codingId, code, codedBy, reason, dictionaryName, dictionaryVersion, dateCoded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coding {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    codingId: ").append(toIndentedString(codingId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codedBy: ").append(toIndentedString(codedBy)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    dictionaryName: ").append(toIndentedString(dictionaryName)).append("\n");
    sb.append("    dictionaryVersion: ").append(toIndentedString(dictionaryVersion)).append("\n");
    sb.append("    dateCoded: ").append(toIndentedString(dateCoded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "siteName", "siteId", "subjectId", "subjectKey", "formId", "formName", "formKey", "revision", "recordId", "variable", "value", "codingId", "code", "codedBy", "reason", "dictionaryName", "dictionaryVersion", "dateCoded"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Coding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Coding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Coding is not found in the empty JSON string", Coding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Coding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Coding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("siteName") != null && !jsonObj.get("siteName").isJsonNull()) && !jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("formName") != null && !jsonObj.get("formName").isJsonNull()) && !jsonObj.get("formName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formName").toString()));
      }
      if ((jsonObj.get("formKey") != null && !jsonObj.get("formKey").isJsonNull()) && !jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) && !jsonObj.get("variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variable").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("codedBy") != null && !jsonObj.get("codedBy").isJsonNull()) && !jsonObj.get("codedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codedBy").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("dictionaryName") != null && !jsonObj.get("dictionaryName").isJsonNull()) && !jsonObj.get("dictionaryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dictionaryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dictionaryName").toString()));
      }
      if ((jsonObj.get("dictionaryVersion") != null && !jsonObj.get("dictionaryVersion").isJsonNull()) && !jsonObj.get("dictionaryVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dictionaryVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dictionaryVersion").toString()));
      }
      if ((jsonObj.get("dateCoded") != null && !jsonObj.get("dateCoded").isJsonNull()) && !jsonObj.get("dateCoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCoded").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Coding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Coding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Coding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Coding.class));

       return (TypeAdapter<T>) new TypeAdapter<Coding>() {
           @Override
           public void write(JsonWriter out, Coding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Coding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Coding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Coding
   * @throws IOException if the JSON string is invalid with respect to Coding
   */
  public static Coding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Coding.class);
  }

  /**
   * Convert an instance of Coding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

