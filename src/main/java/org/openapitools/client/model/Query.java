/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryComment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Query {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_OID = "subjectOid";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OID)
  @javax.annotation.Nullable
  private String subjectOid;

  public static final String SERIALIZED_NAME_ANNOTATION_TYPE = "annotationType";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_TYPE)
  @javax.annotation.Nullable
  private String annotationType;

  public static final String SERIALIZED_NAME_ANNOTATION_ID = "annotationId";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_ID)
  @javax.annotation.Nullable
  private Integer annotationId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  @javax.annotation.Nullable
  private Integer recordId;

  public static final String SERIALIZED_NAME_VARIABLE = "variable";
  @SerializedName(SERIALIZED_NAME_VARIABLE)
  @javax.annotation.Nullable
  private String variable;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public static final String SERIALIZED_NAME_QUERY_COMMENTS = "queryComments";
  @SerializedName(SERIALIZED_NAME_QUERY_COMMENTS)
  @javax.annotation.Nullable
  private List<QueryComment> queryComments = new ArrayList<>();

  public Query() {
  }

  public Query studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Query subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Mednet subject ID associated with the query (if applicable)
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public Query subjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

  /**
   * Client-assigned subject OID (if applicable)
   * @return subjectOid
   */
  @javax.annotation.Nullable
  public String getSubjectOid() {
    return subjectOid;
  }

  public void setSubjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
  }


  public Query annotationType(@javax.annotation.Nullable String annotationType) {
    this.annotationType = annotationType;
    return this;
  }

  /**
   * Category/type of the query (e.g., subject, record, question)
   * @return annotationType
   */
  @javax.annotation.Nullable
  public String getAnnotationType() {
    return annotationType;
  }

  public void setAnnotationType(@javax.annotation.Nullable String annotationType) {
    this.annotationType = annotationType;
  }


  public Query annotationId(@javax.annotation.Nullable Integer annotationId) {
    this.annotationId = annotationId;
    return this;
  }

  /**
   * Unique system identifier for the query
   * @return annotationId
   */
  @javax.annotation.Nullable
  public Integer getAnnotationId() {
    return annotationId;
  }

  public void setAnnotationId(@javax.annotation.Nullable Integer annotationId) {
    this.annotationId = annotationId;
  }


  public Query type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * System text identifier for the query type/location (subject, record, question)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public Query description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the query (e.g., reason or context)
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public Query recordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
    return this;
  }

  /**
   * Record ID associated with the query (if applicable)
   * @return recordId
   */
  @javax.annotation.Nullable
  public Integer getRecordId() {
    return recordId;
  }

  public void setRecordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
  }


  public Query variable(@javax.annotation.Nullable String variable) {
    this.variable = variable;
    return this;
  }

  /**
   * Variable name (field) associated with the query (if applicable)
   * @return variable
   */
  @javax.annotation.Nullable
  public String getVariable() {
    return variable;
  }

  public void setVariable(@javax.annotation.Nullable String variable) {
    this.variable = variable;
  }


  public Query subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Subject display ID associated with the query (if applicable)
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public Query dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when the query was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Query dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when the query was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }


  public Query queryComments(@javax.annotation.Nullable List<QueryComment> queryComments) {
    this.queryComments = queryComments;
    return this;
  }

  public Query addQueryCommentsItem(QueryComment queryCommentsItem) {
    if (this.queryComments == null) {
      this.queryComments = new ArrayList<>();
    }
    this.queryComments.add(queryCommentsItem);
    return this;
  }

  /**
   * History of comments/actions on the query
   * @return queryComments
   */
  @javax.annotation.Nullable
  public List<QueryComment> getQueryComments() {
    return queryComments;
  }

  public void setQueryComments(@javax.annotation.Nullable List<QueryComment> queryComments) {
    this.queryComments = queryComments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.studyKey, query.studyKey) &&
        Objects.equals(this.subjectId, query.subjectId) &&
        Objects.equals(this.subjectOid, query.subjectOid) &&
        Objects.equals(this.annotationType, query.annotationType) &&
        Objects.equals(this.annotationId, query.annotationId) &&
        Objects.equals(this.type, query.type) &&
        Objects.equals(this.description, query.description) &&
        Objects.equals(this.recordId, query.recordId) &&
        Objects.equals(this.variable, query.variable) &&
        Objects.equals(this.subjectKey, query.subjectKey) &&
        Objects.equals(this.dateCreated, query.dateCreated) &&
        Objects.equals(this.dateModified, query.dateModified) &&
        Objects.equals(this.queryComments, query.queryComments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, subjectId, subjectOid, annotationType, annotationId, type, description, recordId, variable, subjectKey, dateCreated, dateModified, queryComments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    annotationId: ").append(toIndentedString(annotationId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    queryComments: ").append(toIndentedString(queryComments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "subjectId", "subjectOid", "annotationType", "annotationId", "type", "description", "recordId", "variable", "subjectKey", "dateCreated", "dateModified", "queryComments"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("subjectOid") != null && !jsonObj.get("subjectOid").isJsonNull()) && !jsonObj.get("subjectOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOid").toString()));
      }
      if ((jsonObj.get("annotationType") != null && !jsonObj.get("annotationType").isJsonNull()) && !jsonObj.get("annotationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("variable") != null && !jsonObj.get("variable").isJsonNull()) && !jsonObj.get("variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variable").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
      if (jsonObj.get("queryComments") != null && !jsonObj.get("queryComments").isJsonNull()) {
        JsonArray jsonArrayqueryComments = jsonObj.getAsJsonArray("queryComments");
        if (jsonArrayqueryComments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queryComments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queryComments` to be an array in the JSON string but got `%s`", jsonObj.get("queryComments").toString()));
          }

          // validate the optional field `queryComments` (array)
          for (int i = 0; i < jsonArrayqueryComments.size(); i++) {
            QueryComment.validateJsonElement(jsonArrayqueryComments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

