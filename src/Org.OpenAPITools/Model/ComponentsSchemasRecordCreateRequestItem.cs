// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComponentsSchemasRecordCreateRequestItem
    /// </summary>
    public partial class ComponentsSchemasRecordCreateRequestItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsSchemasRecordCreateRequestItem" /> class.
        /// </summary>
        /// <param name="formKey">Form key identifying the eCRF to create or update</param>
        /// <param name="data">Key-value pairs of field names and values for the record data</param>
        /// <param name="formId">Form ID identifying the eCRF to create or update (alternative to formKey)</param>
        /// <param name="siteName">Name of the site where the record should be created (for new subject registration)</param>
        /// <param name="siteId">Site ID for the record (alternative to siteName)</param>
        /// <param name="subjectKey">Subject identifier (display ID) for which to create or update the record</param>
        /// <param name="subjectId">Subject ID for which to create or update the record (alternative to subjectKey)</param>
        /// <param name="subjectOid">Subject OID for which to create or update the record (alternative to subjectKey)</param>
        /// <param name="intervalName">Name of the interval (visit) for a scheduled record update</param>
        /// <param name="intervalId">Interval ID for a scheduled record update (alternative to intervalName)</param>
        /// <param name="recordId">Record ID for updating an existing unscheduled record (if applicable)</param>
        /// <param name="recordOid">Record OID for updating an existing unscheduled record (if applicable)</param>
        [JsonConstructor]
        public ComponentsSchemasRecordCreateRequestItem(string formKey, Dictionary<string, Object> data, Option<int?> formId = default, Option<string?> siteName = default, Option<int?> siteId = default, Option<string?> subjectKey = default, Option<int?> subjectId = default, Option<string?> subjectOid = default, Option<string?> intervalName = default, Option<int?> intervalId = default, Option<int?> recordId = default, Option<string?> recordOid = default)
        {
            FormKey = formKey;
            Data = data;
            FormIdOption = formId;
            SiteNameOption = siteName;
            SiteIdOption = siteId;
            SubjectKeyOption = subjectKey;
            SubjectIdOption = subjectId;
            SubjectOidOption = subjectOid;
            IntervalNameOption = intervalName;
            IntervalIdOption = intervalId;
            RecordIdOption = recordId;
            RecordOidOption = recordOid;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Form key identifying the eCRF to create or update
        /// </summary>
        /// <value>Form key identifying the eCRF to create or update</value>
        [JsonPropertyName("formKey")]
        public string FormKey { get; set; }

        /// <summary>
        /// Key-value pairs of field names and values for the record data
        /// </summary>
        /// <value>Key-value pairs of field names and values for the record data</value>
        [JsonPropertyName("data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Form ID identifying the eCRF to create or update (alternative to formKey)
        /// </summary>
        /// <value>Form ID identifying the eCRF to create or update (alternative to formKey)</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteNameOption { get; private set; }

        /// <summary>
        /// Name of the site where the record should be created (for new subject registration)
        /// </summary>
        /// <value>Name of the site where the record should be created (for new subject registration)</value>
        [JsonPropertyName("siteName")]
        public string? SiteName { get { return this.SiteNameOption; } set { this.SiteNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Site ID for the record (alternative to siteName)
        /// </summary>
        /// <value>Site ID for the record (alternative to siteName)</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Subject identifier (display ID) for which to create or update the record
        /// </summary>
        /// <value>Subject identifier (display ID) for which to create or update the record</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Subject ID for which to create or update the record (alternative to subjectKey)
        /// </summary>
        /// <value>Subject ID for which to create or update the record (alternative to subjectKey)</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOidOption { get; private set; }

        /// <summary>
        /// Subject OID for which to create or update the record (alternative to subjectKey)
        /// </summary>
        /// <value>Subject OID for which to create or update the record (alternative to subjectKey)</value>
        [JsonPropertyName("subjectOid")]
        public string? SubjectOid { get { return this.SubjectOidOption; } set { this.SubjectOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IntervalNameOption { get; private set; }

        /// <summary>
        /// Name of the interval (visit) for a scheduled record update
        /// </summary>
        /// <value>Name of the interval (visit) for a scheduled record update</value>
        [JsonPropertyName("intervalName")]
        public string? IntervalName { get { return this.IntervalNameOption; } set { this.IntervalNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IntervalIdOption { get; private set; }

        /// <summary>
        /// Interval ID for a scheduled record update (alternative to intervalName)
        /// </summary>
        /// <value>Interval ID for a scheduled record update (alternative to intervalName)</value>
        [JsonPropertyName("intervalId")]
        public int? IntervalId { get { return this.IntervalIdOption; } set { this.IntervalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordIdOption { get; private set; }

        /// <summary>
        /// Record ID for updating an existing unscheduled record (if applicable)
        /// </summary>
        /// <value>Record ID for updating an existing unscheduled record (if applicable)</value>
        [JsonPropertyName("recordId")]
        public int? RecordId { get { return this.RecordIdOption; } set { this.RecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordOidOption { get; private set; }

        /// <summary>
        /// Record OID for updating an existing unscheduled record (if applicable)
        /// </summary>
        /// <value>Record OID for updating an existing unscheduled record (if applicable)</value>
        [JsonPropertyName("recordOid")]
        public string? RecordOid { get { return this.RecordOidOption; } set { this.RecordOidOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComponentsSchemasRecordCreateRequestItem {\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectOid: ").Append(SubjectOid).Append("\n");
            sb.Append("  IntervalName: ").Append(IntervalName).Append("\n");
            sb.Append("  IntervalId: ").Append(IntervalId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RecordOid: ").Append(RecordOid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComponentsSchemasRecordCreateRequestItem" />
    /// </summary>
    public class ComponentsSchemasRecordCreateRequestItemJsonConverter : JsonConverter<ComponentsSchemasRecordCreateRequestItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ComponentsSchemasRecordCreateRequestItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ComponentsSchemasRecordCreateRequestItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> formKey = default;
            Option<Dictionary<string, Object>?> data = default;
            Option<int?> formId = default;
            Option<string?> siteName = default;
            Option<int?> siteId = default;
            Option<string?> subjectKey = default;
            Option<int?> subjectId = default;
            Option<string?> subjectOid = default;
            Option<string?> intervalName = default;
            Option<int?> intervalId = default;
            Option<int?> recordId = default;
            Option<string?> recordOid = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "data":
                            data = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "siteName":
                            siteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectOid":
                            subjectOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "intervalName":
                            intervalName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "intervalId":
                            intervalId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordId":
                            recordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordOid":
                            recordOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!formKey.IsSet)
                throw new ArgumentException("Property is required for class ComponentsSchemasRecordCreateRequestItem.", nameof(formKey));

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class ComponentsSchemasRecordCreateRequestItem.", nameof(data));

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (siteName.IsSet && siteName.Value == null)
                throw new ArgumentNullException(nameof(siteName), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (subjectOid.IsSet && subjectOid.Value == null)
                throw new ArgumentNullException(nameof(subjectOid), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (intervalName.IsSet && intervalName.Value == null)
                throw new ArgumentNullException(nameof(intervalName), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (intervalId.IsSet && intervalId.Value == null)
                throw new ArgumentNullException(nameof(intervalId), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (recordId.IsSet && recordId.Value == null)
                throw new ArgumentNullException(nameof(recordId), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            if (recordOid.IsSet && recordOid.Value == null)
                throw new ArgumentNullException(nameof(recordOid), "Property is not nullable for class ComponentsSchemasRecordCreateRequestItem.");

            return new ComponentsSchemasRecordCreateRequestItem(formKey.Value!, data.Value!, formId, siteName, siteId, subjectKey, subjectId, subjectOid, intervalName, intervalId, recordId, recordOid);
        }

        /// <summary>
        /// Serializes a <see cref="ComponentsSchemasRecordCreateRequestItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="componentsSchemasRecordCreateRequestItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ComponentsSchemasRecordCreateRequestItem componentsSchemasRecordCreateRequestItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, componentsSchemasRecordCreateRequestItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ComponentsSchemasRecordCreateRequestItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="componentsSchemasRecordCreateRequestItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ComponentsSchemasRecordCreateRequestItem componentsSchemasRecordCreateRequestItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (componentsSchemasRecordCreateRequestItem.FormKey == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.FormKey), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.Data == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.Data), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.SiteNameOption.IsSet && componentsSchemasRecordCreateRequestItem.SiteName == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.SiteName), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.SubjectKeyOption.IsSet && componentsSchemasRecordCreateRequestItem.SubjectKey == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.SubjectKey), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.SubjectOidOption.IsSet && componentsSchemasRecordCreateRequestItem.SubjectOid == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.SubjectOid), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.IntervalNameOption.IsSet && componentsSchemasRecordCreateRequestItem.IntervalName == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.IntervalName), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            if (componentsSchemasRecordCreateRequestItem.RecordOidOption.IsSet && componentsSchemasRecordCreateRequestItem.RecordOid == null)
                throw new ArgumentNullException(nameof(componentsSchemasRecordCreateRequestItem.RecordOid), "Property is required for class ComponentsSchemasRecordCreateRequestItem.");

            writer.WriteString("formKey", componentsSchemasRecordCreateRequestItem.FormKey);

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, componentsSchemasRecordCreateRequestItem.Data, jsonSerializerOptions);
            if (componentsSchemasRecordCreateRequestItem.FormIdOption.IsSet)
                writer.WriteNumber("formId", componentsSchemasRecordCreateRequestItem.FormIdOption.Value!.Value);

            if (componentsSchemasRecordCreateRequestItem.SiteNameOption.IsSet)
                writer.WriteString("siteName", componentsSchemasRecordCreateRequestItem.SiteName);

            if (componentsSchemasRecordCreateRequestItem.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", componentsSchemasRecordCreateRequestItem.SiteIdOption.Value!.Value);

            if (componentsSchemasRecordCreateRequestItem.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", componentsSchemasRecordCreateRequestItem.SubjectKey);

            if (componentsSchemasRecordCreateRequestItem.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", componentsSchemasRecordCreateRequestItem.SubjectIdOption.Value!.Value);

            if (componentsSchemasRecordCreateRequestItem.SubjectOidOption.IsSet)
                writer.WriteString("subjectOid", componentsSchemasRecordCreateRequestItem.SubjectOid);

            if (componentsSchemasRecordCreateRequestItem.IntervalNameOption.IsSet)
                writer.WriteString("intervalName", componentsSchemasRecordCreateRequestItem.IntervalName);

            if (componentsSchemasRecordCreateRequestItem.IntervalIdOption.IsSet)
                writer.WriteNumber("intervalId", componentsSchemasRecordCreateRequestItem.IntervalIdOption.Value!.Value);

            if (componentsSchemasRecordCreateRequestItem.RecordIdOption.IsSet)
                writer.WriteNumber("recordId", componentsSchemasRecordCreateRequestItem.RecordIdOption.Value!.Value);

            if (componentsSchemasRecordCreateRequestItem.RecordOidOption.IsSet)
                writer.WriteString("recordOid", componentsSchemasRecordCreateRequestItem.RecordOid);
        }
    }
}
