// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pagination
    /// </summary>
    public partial class Pagination : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pagination" /> class.
        /// </summary>
        /// <param name="currentPage">Current index page returned</param>
        /// <param name="size">Number of items per page returned</param>
        /// <param name="totalPages">Total number of pages available</param>
        /// <param name="totalElements">Total number of elements (items) available</param>
        /// <param name="sort">sort</param>
        [JsonConstructor]
        public Pagination(Option<int?> currentPage = default, Option<int?> size = default, Option<int?> totalPages = default, Option<int?> totalElements = default, Option<List<Sort>?> sort = default)
        {
            CurrentPageOption = currentPage;
            SizeOption = size;
            TotalPagesOption = totalPages;
            TotalElementsOption = totalElements;
            SortOption = sort;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CurrentPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CurrentPageOption { get; private set; }

        /// <summary>
        /// Current index page returned
        /// </summary>
        /// <value>Current index page returned</value>
        [JsonPropertyName("currentPage")]
        public int? CurrentPage { get { return this.CurrentPageOption; } set { this.CurrentPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Number of items per page returned
        /// </summary>
        /// <value>Number of items per page returned</value>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalPages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalPagesOption { get; private set; }

        /// <summary>
        /// Total number of pages available
        /// </summary>
        /// <value>Total number of pages available</value>
        [JsonPropertyName("totalPages")]
        public int? TotalPages { get { return this.TotalPagesOption; } set { this.TotalPagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalElements
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalElementsOption { get; private set; }

        /// <summary>
        /// Total number of elements (items) available
        /// </summary>
        /// <value>Total number of elements (items) available</value>
        [JsonPropertyName("totalElements")]
        public int? TotalElements { get { return this.TotalElementsOption; } set { this.TotalElementsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Sort>?> SortOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [JsonPropertyName("sort")]
        public List<Sort>? Sort { get { return this.SortOption; } set { this.SortOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pagination {\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  TotalElements: ").Append(TotalElements).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Pagination" />
    /// </summary>
    public class PaginationJsonConverter : JsonConverter<Pagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="Pagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Pagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> currentPage = default;
            Option<int?> size = default;
            Option<int?> totalPages = default;
            Option<int?> totalElements = default;
            Option<List<Sort>?> sort = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currentPage":
                            currentPage = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "totalPages":
                            totalPages = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "totalElements":
                            totalElements = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sort":
                            sort = new Option<List<Sort>?>(JsonSerializer.Deserialize<List<Sort>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (currentPage.IsSet && currentPage.Value == null)
                throw new ArgumentNullException(nameof(currentPage), "Property is not nullable for class Pagination.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class Pagination.");

            if (totalPages.IsSet && totalPages.Value == null)
                throw new ArgumentNullException(nameof(totalPages), "Property is not nullable for class Pagination.");

            if (totalElements.IsSet && totalElements.Value == null)
                throw new ArgumentNullException(nameof(totalElements), "Property is not nullable for class Pagination.");

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort), "Property is not nullable for class Pagination.");

            return new Pagination(currentPage, size, totalPages, totalElements, sort);
        }

        /// <summary>
        /// Serializes a <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Pagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Pagination pagination, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pagination.SortOption.IsSet && pagination.Sort == null)
                throw new ArgumentNullException(nameof(pagination.Sort), "Property is required for class Pagination.");

            if (pagination.CurrentPageOption.IsSet)
                writer.WriteNumber("currentPage", pagination.CurrentPageOption.Value!.Value);

            if (pagination.SizeOption.IsSet)
                writer.WriteNumber("size", pagination.SizeOption.Value!.Value);

            if (pagination.TotalPagesOption.IsSet)
                writer.WriteNumber("totalPages", pagination.TotalPagesOption.Value!.Value);

            if (pagination.TotalElementsOption.IsSet)
                writer.WriteNumber("totalElements", pagination.TotalElementsOption.Value!.Value);

            if (pagination.SortOption.IsSet)
            {
                writer.WritePropertyName("sort");
                JsonSerializer.Serialize(writer, pagination.Sort, jsonSerializerOptions);
            }
        }
    }
}
