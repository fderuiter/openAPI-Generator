// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueryComment
    /// </summary>
    public partial class QueryComment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryComment" /> class.
        /// </summary>
        /// <param name="sequence">Sequence number of the comment/action in the query history</param>
        /// <param name="annotationStatus">Status of the query after this comment (e.g., Open, Closed)</param>
        /// <param name="user">Username of the user who made the comment or action</param>
        /// <param name="comment">Text of the comment</param>
        /// <param name="closed">Whether the query was marked closed at this step</param>
        /// <param name="date">Date of the comment or action</param>
        [JsonConstructor]
        public QueryComment(Option<int?> sequence = default, Option<string?> annotationStatus = default, Option<string?> user = default, Option<string?> comment = default, Option<bool?> closed = default, Option<string?> date = default)
        {
            SequenceOption = sequence;
            AnnotationStatusOption = annotationStatus;
            UserOption = user;
            CommentOption = comment;
            ClosedOption = closed;
            DateOption = date;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Sequence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SequenceOption { get; private set; }

        /// <summary>
        /// Sequence number of the comment/action in the query history
        /// </summary>
        /// <value>Sequence number of the comment/action in the query history</value>
        [JsonPropertyName("sequence")]
        public int? Sequence { get { return this.SequenceOption; } set { this.SequenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of AnnotationStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AnnotationStatusOption { get; private set; }

        /// <summary>
        /// Status of the query after this comment (e.g., Open, Closed)
        /// </summary>
        /// <value>Status of the query after this comment (e.g., Open, Closed)</value>
        [JsonPropertyName("annotationStatus")]
        public string? AnnotationStatus { get { return this.AnnotationStatusOption; } set { this.AnnotationStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserOption { get; private set; }

        /// <summary>
        /// Username of the user who made the comment or action
        /// </summary>
        /// <value>Username of the user who made the comment or action</value>
        [JsonPropertyName("user")]
        public string? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Text of the comment
        /// </summary>
        /// <value>Text of the comment</value>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Closed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ClosedOption { get; private set; }

        /// <summary>
        /// Whether the query was marked closed at this step
        /// </summary>
        /// <value>Whether the query was marked closed at this step</value>
        [JsonPropertyName("closed")]
        public bool? Closed { get { return this.ClosedOption; } set { this.ClosedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Date
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateOption { get; private set; }

        /// <summary>
        /// Date of the comment or action
        /// </summary>
        /// <value>Date of the comment or action</value>
        [JsonPropertyName("date")]
        public string? Date { get { return this.DateOption; } set { this.DateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryComment {\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  AnnotationStatus: ").Append(AnnotationStatus).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Closed: ").Append(Closed).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QueryComment" />
    /// </summary>
    public class QueryCommentJsonConverter : JsonConverter<QueryComment>
    {
        /// <summary>
        /// Deserializes json to <see cref="QueryComment" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QueryComment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> sequence = default;
            Option<string?> annotationStatus = default;
            Option<string?> user = default;
            Option<string?> comment = default;
            Option<bool?> closed = default;
            Option<string?> date = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sequence":
                            sequence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "annotationStatus":
                            annotationStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user":
                            user = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "closed":
                            closed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "date":
                            date = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sequence.IsSet && sequence.Value == null)
                throw new ArgumentNullException(nameof(sequence), "Property is not nullable for class QueryComment.");

            if (annotationStatus.IsSet && annotationStatus.Value == null)
                throw new ArgumentNullException(nameof(annotationStatus), "Property is not nullable for class QueryComment.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class QueryComment.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class QueryComment.");

            if (closed.IsSet && closed.Value == null)
                throw new ArgumentNullException(nameof(closed), "Property is not nullable for class QueryComment.");

            if (date.IsSet && date.Value == null)
                throw new ArgumentNullException(nameof(date), "Property is not nullable for class QueryComment.");

            return new QueryComment(sequence, annotationStatus, user, comment, closed, date);
        }

        /// <summary>
        /// Serializes a <see cref="QueryComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QueryComment queryComment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, queryComment, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QueryComment" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryComment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QueryComment queryComment, JsonSerializerOptions jsonSerializerOptions)
        {
            if (queryComment.AnnotationStatusOption.IsSet && queryComment.AnnotationStatus == null)
                throw new ArgumentNullException(nameof(queryComment.AnnotationStatus), "Property is required for class QueryComment.");

            if (queryComment.UserOption.IsSet && queryComment.User == null)
                throw new ArgumentNullException(nameof(queryComment.User), "Property is required for class QueryComment.");

            if (queryComment.CommentOption.IsSet && queryComment.Comment == null)
                throw new ArgumentNullException(nameof(queryComment.Comment), "Property is required for class QueryComment.");

            if (queryComment.DateOption.IsSet && queryComment.Date == null)
                throw new ArgumentNullException(nameof(queryComment.Date), "Property is required for class QueryComment.");

            if (queryComment.SequenceOption.IsSet)
                writer.WriteNumber("sequence", queryComment.SequenceOption.Value!.Value);

            if (queryComment.AnnotationStatusOption.IsSet)
                writer.WriteString("annotationStatus", queryComment.AnnotationStatus);

            if (queryComment.UserOption.IsSet)
                writer.WriteString("user", queryComment.User);

            if (queryComment.CommentOption.IsSet)
                writer.WriteString("comment", queryComment.Comment);

            if (queryComment.ClosedOption.IsSet)
                writer.WriteBoolean("closed", queryComment.ClosedOption.Value!.Value);

            if (queryComment.DateOption.IsSet)
                writer.WriteString("date", queryComment.Date);
        }
    }
}
