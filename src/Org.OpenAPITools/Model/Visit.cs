// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Visit
    /// </summary>
    public partial class Visit : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Visit" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="visitId">Unique system identifier for the subject visit instance</param>
        /// <param name="intervalId">Unique system identifier of the interval definition for this visit</param>
        /// <param name="intervalName">Name of the interval (visit) for this visit instance</param>
        /// <param name="subjectId">Mednet subject ID of the subject</param>
        /// <param name="subjectKey">Protocol-assigned subject identifier</param>
        /// <param name="startDate">Start date of the visit window (in YYYY-MM-DD format)</param>
        /// <param name="endDate">End date of the visit window (in YYYY-MM-DD format)</param>
        /// <param name="dueDate">Due date of the visit (in YYYY-MM-DD format), if applicable</param>
        /// <param name="visitDate">Actual date the visit took place (in YYYY-MM-DD format)</param>
        /// <param name="visitDateForm">Name of the form used to capture the actual visit date</param>
        /// <param name="visitDateQuestion">Variable name of the field capturing the actual visit date</param>
        /// <param name="deleted">Whether the visit instance is marked as deleted</param>
        /// <param name="dateCreated">Date when this visit record was created</param>
        /// <param name="dateModified">Date when this visit record was last modified</param>
        [JsonConstructor]
        public Visit(Option<string?> studyKey = default, Option<int?> visitId = default, Option<int?> intervalId = default, Option<string?> intervalName = default, Option<int?> subjectId = default, Option<string?> subjectKey = default, Option<string?> startDate = default, Option<string?> endDate = default, Option<string?> dueDate = default, Option<string?> visitDate = default, Option<string?> visitDateForm = default, Option<string?> visitDateQuestion = default, Option<bool?> deleted = default, Option<string?> dateCreated = default, Option<string?> dateModified = default)
        {
            StudyKeyOption = studyKey;
            VisitIdOption = visitId;
            IntervalIdOption = intervalId;
            IntervalNameOption = intervalName;
            SubjectIdOption = subjectId;
            SubjectKeyOption = subjectKey;
            StartDateOption = startDate;
            EndDateOption = endDate;
            DueDateOption = dueDate;
            VisitDateOption = visitDate;
            VisitDateFormOption = visitDateForm;
            VisitDateQuestionOption = visitDateQuestion;
            DeletedOption = deleted;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisitId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VisitIdOption { get; private set; }

        /// <summary>
        /// Unique system identifier for the subject visit instance
        /// </summary>
        /// <value>Unique system identifier for the subject visit instance</value>
        [JsonPropertyName("visitId")]
        public int? VisitId { get { return this.VisitIdOption; } set { this.VisitIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IntervalIdOption { get; private set; }

        /// <summary>
        /// Unique system identifier of the interval definition for this visit
        /// </summary>
        /// <value>Unique system identifier of the interval definition for this visit</value>
        [JsonPropertyName("intervalId")]
        public int? IntervalId { get { return this.IntervalIdOption; } set { this.IntervalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IntervalNameOption { get; private set; }

        /// <summary>
        /// Name of the interval (visit) for this visit instance
        /// </summary>
        /// <value>Name of the interval (visit) for this visit instance</value>
        [JsonPropertyName("intervalName")]
        public string? IntervalName { get { return this.IntervalNameOption; } set { this.IntervalNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Mednet subject ID of the subject
        /// </summary>
        /// <value>Mednet subject ID of the subject</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Protocol-assigned subject identifier
        /// </summary>
        /// <value>Protocol-assigned subject identifier</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartDateOption { get; private set; }

        /// <summary>
        /// Start date of the visit window (in YYYY-MM-DD format)
        /// </summary>
        /// <value>Start date of the visit window (in YYYY-MM-DD format)</value>
        [JsonPropertyName("startDate")]
        public string? StartDate { get { return this.StartDateOption; } set { this.StartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndDateOption { get; private set; }

        /// <summary>
        /// End date of the visit window (in YYYY-MM-DD format)
        /// </summary>
        /// <value>End date of the visit window (in YYYY-MM-DD format)</value>
        [JsonPropertyName("endDate")]
        public string? EndDate { get { return this.EndDateOption; } set { this.EndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DueDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DueDateOption { get; private set; }

        /// <summary>
        /// Due date of the visit (in YYYY-MM-DD format), if applicable
        /// </summary>
        /// <value>Due date of the visit (in YYYY-MM-DD format), if applicable</value>
        [JsonPropertyName("dueDate")]
        public string? DueDate { get { return this.DueDateOption; } set { this.DueDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisitDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VisitDateOption { get; private set; }

        /// <summary>
        /// Actual date the visit took place (in YYYY-MM-DD format)
        /// </summary>
        /// <value>Actual date the visit took place (in YYYY-MM-DD format)</value>
        [JsonPropertyName("visitDate")]
        public string? VisitDate { get { return this.VisitDateOption; } set { this.VisitDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisitDateForm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VisitDateFormOption { get; private set; }

        /// <summary>
        /// Name of the form used to capture the actual visit date
        /// </summary>
        /// <value>Name of the form used to capture the actual visit date</value>
        [JsonPropertyName("visitDateForm")]
        public string? VisitDateForm { get { return this.VisitDateFormOption; } set { this.VisitDateFormOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisitDateQuestion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VisitDateQuestionOption { get; private set; }

        /// <summary>
        /// Variable name of the field capturing the actual visit date
        /// </summary>
        /// <value>Variable name of the field capturing the actual visit date</value>
        [JsonPropertyName("visitDateQuestion")]
        public string? VisitDateQuestion { get { return this.VisitDateQuestionOption; } set { this.VisitDateQuestionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the visit instance is marked as deleted
        /// </summary>
        /// <value>Whether the visit instance is marked as deleted</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this visit record was created
        /// </summary>
        /// <value>Date when this visit record was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this visit record was last modified
        /// </summary>
        /// <value>Date when this visit record was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Visit {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  VisitId: ").Append(VisitId).Append("\n");
            sb.Append("  IntervalId: ").Append(IntervalId).Append("\n");
            sb.Append("  IntervalName: ").Append(IntervalName).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  VisitDate: ").Append(VisitDate).Append("\n");
            sb.Append("  VisitDateForm: ").Append(VisitDateForm).Append("\n");
            sb.Append("  VisitDateQuestion: ").Append(VisitDateQuestion).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Visit" />
    /// </summary>
    public class VisitJsonConverter : JsonConverter<Visit>
    {
        /// <summary>
        /// Deserializes json to <see cref="Visit" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Visit Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> visitId = default;
            Option<int?> intervalId = default;
            Option<string?> intervalName = default;
            Option<int?> subjectId = default;
            Option<string?> subjectKey = default;
            Option<string?> startDate = default;
            Option<string?> endDate = default;
            Option<string?> dueDate = default;
            Option<string?> visitDate = default;
            Option<string?> visitDateForm = default;
            Option<string?> visitDateQuestion = default;
            Option<bool?> deleted = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visitId":
                            visitId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "intervalId":
                            intervalId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "intervalName":
                            intervalName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "startDate":
                            startDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "endDate":
                            endDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dueDate":
                            dueDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visitDate":
                            visitDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visitDateForm":
                            visitDateForm = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visitDateQuestion":
                            visitDateQuestion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted":
                            deleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Visit.");

            if (visitId.IsSet && visitId.Value == null)
                throw new ArgumentNullException(nameof(visitId), "Property is not nullable for class Visit.");

            if (intervalId.IsSet && intervalId.Value == null)
                throw new ArgumentNullException(nameof(intervalId), "Property is not nullable for class Visit.");

            if (intervalName.IsSet && intervalName.Value == null)
                throw new ArgumentNullException(nameof(intervalName), "Property is not nullable for class Visit.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class Visit.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class Visit.");

            if (startDate.IsSet && startDate.Value == null)
                throw new ArgumentNullException(nameof(startDate), "Property is not nullable for class Visit.");

            if (endDate.IsSet && endDate.Value == null)
                throw new ArgumentNullException(nameof(endDate), "Property is not nullable for class Visit.");

            if (dueDate.IsSet && dueDate.Value == null)
                throw new ArgumentNullException(nameof(dueDate), "Property is not nullable for class Visit.");

            if (visitDate.IsSet && visitDate.Value == null)
                throw new ArgumentNullException(nameof(visitDate), "Property is not nullable for class Visit.");

            if (visitDateForm.IsSet && visitDateForm.Value == null)
                throw new ArgumentNullException(nameof(visitDateForm), "Property is not nullable for class Visit.");

            if (visitDateQuestion.IsSet && visitDateQuestion.Value == null)
                throw new ArgumentNullException(nameof(visitDateQuestion), "Property is not nullable for class Visit.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class Visit.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Visit.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Visit.");

            return new Visit(studyKey, visitId, intervalId, intervalName, subjectId, subjectKey, startDate, endDate, dueDate, visitDate, visitDateForm, visitDateQuestion, deleted, dateCreated, dateModified);
        }

        /// <summary>
        /// Serializes a <see cref="Visit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="visit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Visit visit, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, visit, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Visit" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="visit"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Visit visit, JsonSerializerOptions jsonSerializerOptions)
        {
            if (visit.StudyKeyOption.IsSet && visit.StudyKey == null)
                throw new ArgumentNullException(nameof(visit.StudyKey), "Property is required for class Visit.");

            if (visit.IntervalNameOption.IsSet && visit.IntervalName == null)
                throw new ArgumentNullException(nameof(visit.IntervalName), "Property is required for class Visit.");

            if (visit.SubjectKeyOption.IsSet && visit.SubjectKey == null)
                throw new ArgumentNullException(nameof(visit.SubjectKey), "Property is required for class Visit.");

            if (visit.StartDateOption.IsSet && visit.StartDate == null)
                throw new ArgumentNullException(nameof(visit.StartDate), "Property is required for class Visit.");

            if (visit.EndDateOption.IsSet && visit.EndDate == null)
                throw new ArgumentNullException(nameof(visit.EndDate), "Property is required for class Visit.");

            if (visit.DueDateOption.IsSet && visit.DueDate == null)
                throw new ArgumentNullException(nameof(visit.DueDate), "Property is required for class Visit.");

            if (visit.VisitDateOption.IsSet && visit.VisitDate == null)
                throw new ArgumentNullException(nameof(visit.VisitDate), "Property is required for class Visit.");

            if (visit.VisitDateFormOption.IsSet && visit.VisitDateForm == null)
                throw new ArgumentNullException(nameof(visit.VisitDateForm), "Property is required for class Visit.");

            if (visit.VisitDateQuestionOption.IsSet && visit.VisitDateQuestion == null)
                throw new ArgumentNullException(nameof(visit.VisitDateQuestion), "Property is required for class Visit.");

            if (visit.DateCreatedOption.IsSet && visit.DateCreated == null)
                throw new ArgumentNullException(nameof(visit.DateCreated), "Property is required for class Visit.");

            if (visit.DateModifiedOption.IsSet && visit.DateModified == null)
                throw new ArgumentNullException(nameof(visit.DateModified), "Property is required for class Visit.");

            if (visit.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", visit.StudyKey);

            if (visit.VisitIdOption.IsSet)
                writer.WriteNumber("visitId", visit.VisitIdOption.Value!.Value);

            if (visit.IntervalIdOption.IsSet)
                writer.WriteNumber("intervalId", visit.IntervalIdOption.Value!.Value);

            if (visit.IntervalNameOption.IsSet)
                writer.WriteString("intervalName", visit.IntervalName);

            if (visit.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", visit.SubjectIdOption.Value!.Value);

            if (visit.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", visit.SubjectKey);

            if (visit.StartDateOption.IsSet)
                writer.WriteString("startDate", visit.StartDate);

            if (visit.EndDateOption.IsSet)
                writer.WriteString("endDate", visit.EndDate);

            if (visit.DueDateOption.IsSet)
                writer.WriteString("dueDate", visit.DueDate);

            if (visit.VisitDateOption.IsSet)
                writer.WriteString("visitDate", visit.VisitDate);

            if (visit.VisitDateFormOption.IsSet)
                writer.WriteString("visitDateForm", visit.VisitDateForm);

            if (visit.VisitDateQuestionOption.IsSet)
                writer.WriteString("visitDateQuestion", visit.VisitDateQuestion);

            if (visit.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", visit.DeletedOption.Value!.Value);

            if (visit.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", visit.DateCreated);

            if (visit.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", visit.DateModified);
        }
    }
}
