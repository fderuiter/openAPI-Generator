// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Coding
    /// </summary>
    public partial class Coding : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Coding" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="siteName">Name of the site associated with the coded data</param>
        /// <param name="siteId">Site ID associated with the coded data</param>
        /// <param name="subjectId">Subject ID associated with the coded data</param>
        /// <param name="subjectKey">Subject key (display ID) associated with the coded data</param>
        /// <param name="formId">Form ID where the coded data originates</param>
        /// <param name="formName">Name of the form where the coded data originates</param>
        /// <param name="formKey">Form key where the coded data originates</param>
        /// <param name="revision">Revision number of the coding entry</param>
        /// <param name="recordId">Record ID associated with the coded data</param>
        /// <param name="variable">Variable name (field) that was coded</param>
        /// <param name="value">Original value entered that required coding</param>
        /// <param name="codingId">Mednet coding ID</param>
        /// <param name="code">Standardized code assigned (e.g., dictionary term)</param>
        /// <param name="codedBy">Name of the user who performed the coding</param>
        /// <param name="reason">Reason for coding or any notes on changes</param>
        /// <param name="dictionaryName">Name of the dictionary used (e.g., MedDRA)</param>
        /// <param name="dictionaryVersion">Version of the dictionary used</param>
        /// <param name="dateCoded">Date when the coding was performed</param>
        [JsonConstructor]
        public Coding(Option<string?> studyKey = default, Option<string?> siteName = default, Option<int?> siteId = default, Option<int?> subjectId = default, Option<string?> subjectKey = default, Option<int?> formId = default, Option<string?> formName = default, Option<string?> formKey = default, Option<int?> revision = default, Option<int?> recordId = default, Option<string?> variable = default, Option<string?> value = default, Option<int?> codingId = default, Option<string?> code = default, Option<string?> codedBy = default, Option<string?> reason = default, Option<string?> dictionaryName = default, Option<string?> dictionaryVersion = default, Option<string?> dateCoded = default)
        {
            StudyKeyOption = studyKey;
            SiteNameOption = siteName;
            SiteIdOption = siteId;
            SubjectIdOption = subjectId;
            SubjectKeyOption = subjectKey;
            FormIdOption = formId;
            FormNameOption = formName;
            FormKeyOption = formKey;
            RevisionOption = revision;
            RecordIdOption = recordId;
            VariableOption = variable;
            ValueOption = value;
            CodingIdOption = codingId;
            CodeOption = code;
            CodedByOption = codedBy;
            ReasonOption = reason;
            DictionaryNameOption = dictionaryName;
            DictionaryVersionOption = dictionaryVersion;
            DateCodedOption = dateCoded;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteNameOption { get; private set; }

        /// <summary>
        /// Name of the site associated with the coded data
        /// </summary>
        /// <value>Name of the site associated with the coded data</value>
        [JsonPropertyName("siteName")]
        public string? SiteName { get { return this.SiteNameOption; } set { this.SiteNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Site ID associated with the coded data
        /// </summary>
        /// <value>Site ID associated with the coded data</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Subject ID associated with the coded data
        /// </summary>
        /// <value>Subject ID associated with the coded data</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Subject key (display ID) associated with the coded data
        /// </summary>
        /// <value>Subject key (display ID) associated with the coded data</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Form ID where the coded data originates
        /// </summary>
        /// <value>Form ID where the coded data originates</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormNameOption { get; private set; }

        /// <summary>
        /// Name of the form where the coded data originates
        /// </summary>
        /// <value>Name of the form where the coded data originates</value>
        [JsonPropertyName("formName")]
        public string? FormName { get { return this.FormNameOption; } set { this.FormNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// Form key where the coded data originates
        /// </summary>
        /// <value>Form key where the coded data originates</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Revision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RevisionOption { get; private set; }

        /// <summary>
        /// Revision number of the coding entry
        /// </summary>
        /// <value>Revision number of the coding entry</value>
        [JsonPropertyName("revision")]
        public int? Revision { get { return this.RevisionOption; } set { this.RevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordIdOption { get; private set; }

        /// <summary>
        /// Record ID associated with the coded data
        /// </summary>
        /// <value>Record ID associated with the coded data</value>
        [JsonPropertyName("recordId")]
        public int? RecordId { get { return this.RecordIdOption; } set { this.RecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Variable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VariableOption { get; private set; }

        /// <summary>
        /// Variable name (field) that was coded
        /// </summary>
        /// <value>Variable name (field) that was coded</value>
        [JsonPropertyName("variable")]
        public string? Variable { get { return this.VariableOption; } set { this.VariableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Original value entered that required coding
        /// </summary>
        /// <value>Original value entered that required coding</value>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodingId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CodingIdOption { get; private set; }

        /// <summary>
        /// Mednet coding ID
        /// </summary>
        /// <value>Mednet coding ID</value>
        [JsonPropertyName("codingId")]
        public int? CodingId { get { return this.CodingIdOption; } set { this.CodingIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Standardized code assigned (e.g., dictionary term)
        /// </summary>
        /// <value>Standardized code assigned (e.g., dictionary term)</value>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodedBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodedByOption { get; private set; }

        /// <summary>
        /// Name of the user who performed the coding
        /// </summary>
        /// <value>Name of the user who performed the coding</value>
        [JsonPropertyName("codedBy")]
        public string? CodedBy { get { return this.CodedByOption; } set { this.CodedByOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// Reason for coding or any notes on changes
        /// </summary>
        /// <value>Reason for coding or any notes on changes</value>
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of DictionaryName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DictionaryNameOption { get; private set; }

        /// <summary>
        /// Name of the dictionary used (e.g., MedDRA)
        /// </summary>
        /// <value>Name of the dictionary used (e.g., MedDRA)</value>
        [JsonPropertyName("dictionaryName")]
        public string? DictionaryName { get { return this.DictionaryNameOption; } set { this.DictionaryNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DictionaryVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DictionaryVersionOption { get; private set; }

        /// <summary>
        /// Version of the dictionary used
        /// </summary>
        /// <value>Version of the dictionary used</value>
        [JsonPropertyName("dictionaryVersion")]
        public string? DictionaryVersion { get { return this.DictionaryVersionOption; } set { this.DictionaryVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCoded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCodedOption { get; private set; }

        /// <summary>
        /// Date when the coding was performed
        /// </summary>
        /// <value>Date when the coding was performed</value>
        [JsonPropertyName("dateCoded")]
        public string? DateCoded { get { return this.DateCodedOption; } set { this.DateCodedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Coding {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CodingId: ").Append(CodingId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodedBy: ").Append(CodedBy).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  DictionaryName: ").Append(DictionaryName).Append("\n");
            sb.Append("  DictionaryVersion: ").Append(DictionaryVersion).Append("\n");
            sb.Append("  DateCoded: ").Append(DateCoded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Coding" />
    /// </summary>
    public class CodingJsonConverter : JsonConverter<Coding>
    {
        /// <summary>
        /// Deserializes json to <see cref="Coding" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Coding Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<string?> siteName = default;
            Option<int?> siteId = default;
            Option<int?> subjectId = default;
            Option<string?> subjectKey = default;
            Option<int?> formId = default;
            Option<string?> formName = default;
            Option<string?> formKey = default;
            Option<int?> revision = default;
            Option<int?> recordId = default;
            Option<string?> variable = default;
            Option<string?> value = default;
            Option<int?> codingId = default;
            Option<string?> code = default;
            Option<string?> codedBy = default;
            Option<string?> reason = default;
            Option<string?> dictionaryName = default;
            Option<string?> dictionaryVersion = default;
            Option<string?> dateCoded = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteName":
                            siteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formName":
                            formName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "revision":
                            revision = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordId":
                            recordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "variable":
                            variable = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codingId":
                            codingId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "codedBy":
                            codedBy = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dictionaryName":
                            dictionaryName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dictionaryVersion":
                            dictionaryVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCoded":
                            dateCoded = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Coding.");

            if (siteName.IsSet && siteName.Value == null)
                throw new ArgumentNullException(nameof(siteName), "Property is not nullable for class Coding.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class Coding.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class Coding.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class Coding.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class Coding.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class Coding.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class Coding.");

            if (revision.IsSet && revision.Value == null)
                throw new ArgumentNullException(nameof(revision), "Property is not nullable for class Coding.");

            if (recordId.IsSet && recordId.Value == null)
                throw new ArgumentNullException(nameof(recordId), "Property is not nullable for class Coding.");

            if (variable.IsSet && variable.Value == null)
                throw new ArgumentNullException(nameof(variable), "Property is not nullable for class Coding.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class Coding.");

            if (codingId.IsSet && codingId.Value == null)
                throw new ArgumentNullException(nameof(codingId), "Property is not nullable for class Coding.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class Coding.");

            if (codedBy.IsSet && codedBy.Value == null)
                throw new ArgumentNullException(nameof(codedBy), "Property is not nullable for class Coding.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class Coding.");

            if (dictionaryName.IsSet && dictionaryName.Value == null)
                throw new ArgumentNullException(nameof(dictionaryName), "Property is not nullable for class Coding.");

            if (dictionaryVersion.IsSet && dictionaryVersion.Value == null)
                throw new ArgumentNullException(nameof(dictionaryVersion), "Property is not nullable for class Coding.");

            if (dateCoded.IsSet && dateCoded.Value == null)
                throw new ArgumentNullException(nameof(dateCoded), "Property is not nullable for class Coding.");

            return new Coding(studyKey, siteName, siteId, subjectId, subjectKey, formId, formName, formKey, revision, recordId, variable, value, codingId, code, codedBy, reason, dictionaryName, dictionaryVersion, dateCoded);
        }

        /// <summary>
        /// Serializes a <see cref="Coding" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="coding"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Coding coding, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, coding, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Coding" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="coding"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Coding coding, JsonSerializerOptions jsonSerializerOptions)
        {
            if (coding.StudyKeyOption.IsSet && coding.StudyKey == null)
                throw new ArgumentNullException(nameof(coding.StudyKey), "Property is required for class Coding.");

            if (coding.SiteNameOption.IsSet && coding.SiteName == null)
                throw new ArgumentNullException(nameof(coding.SiteName), "Property is required for class Coding.");

            if (coding.SubjectKeyOption.IsSet && coding.SubjectKey == null)
                throw new ArgumentNullException(nameof(coding.SubjectKey), "Property is required for class Coding.");

            if (coding.FormNameOption.IsSet && coding.FormName == null)
                throw new ArgumentNullException(nameof(coding.FormName), "Property is required for class Coding.");

            if (coding.FormKeyOption.IsSet && coding.FormKey == null)
                throw new ArgumentNullException(nameof(coding.FormKey), "Property is required for class Coding.");

            if (coding.VariableOption.IsSet && coding.Variable == null)
                throw new ArgumentNullException(nameof(coding.Variable), "Property is required for class Coding.");

            if (coding.ValueOption.IsSet && coding.Value == null)
                throw new ArgumentNullException(nameof(coding.Value), "Property is required for class Coding.");

            if (coding.CodeOption.IsSet && coding.Code == null)
                throw new ArgumentNullException(nameof(coding.Code), "Property is required for class Coding.");

            if (coding.CodedByOption.IsSet && coding.CodedBy == null)
                throw new ArgumentNullException(nameof(coding.CodedBy), "Property is required for class Coding.");

            if (coding.ReasonOption.IsSet && coding.Reason == null)
                throw new ArgumentNullException(nameof(coding.Reason), "Property is required for class Coding.");

            if (coding.DictionaryNameOption.IsSet && coding.DictionaryName == null)
                throw new ArgumentNullException(nameof(coding.DictionaryName), "Property is required for class Coding.");

            if (coding.DictionaryVersionOption.IsSet && coding.DictionaryVersion == null)
                throw new ArgumentNullException(nameof(coding.DictionaryVersion), "Property is required for class Coding.");

            if (coding.DateCodedOption.IsSet && coding.DateCoded == null)
                throw new ArgumentNullException(nameof(coding.DateCoded), "Property is required for class Coding.");

            if (coding.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", coding.StudyKey);

            if (coding.SiteNameOption.IsSet)
                writer.WriteString("siteName", coding.SiteName);

            if (coding.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", coding.SiteIdOption.Value!.Value);

            if (coding.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", coding.SubjectIdOption.Value!.Value);

            if (coding.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", coding.SubjectKey);

            if (coding.FormIdOption.IsSet)
                writer.WriteNumber("formId", coding.FormIdOption.Value!.Value);

            if (coding.FormNameOption.IsSet)
                writer.WriteString("formName", coding.FormName);

            if (coding.FormKeyOption.IsSet)
                writer.WriteString("formKey", coding.FormKey);

            if (coding.RevisionOption.IsSet)
                writer.WriteNumber("revision", coding.RevisionOption.Value!.Value);

            if (coding.RecordIdOption.IsSet)
                writer.WriteNumber("recordId", coding.RecordIdOption.Value!.Value);

            if (coding.VariableOption.IsSet)
                writer.WriteString("variable", coding.Variable);

            if (coding.ValueOption.IsSet)
                writer.WriteString("value", coding.Value);

            if (coding.CodingIdOption.IsSet)
                writer.WriteNumber("codingId", coding.CodingIdOption.Value!.Value);

            if (coding.CodeOption.IsSet)
                writer.WriteString("code", coding.Code);

            if (coding.CodedByOption.IsSet)
                writer.WriteString("codedBy", coding.CodedBy);

            if (coding.ReasonOption.IsSet)
                writer.WriteString("reason", coding.Reason);

            if (coding.DictionaryNameOption.IsSet)
                writer.WriteString("dictionaryName", coding.DictionaryName);

            if (coding.DictionaryVersionOption.IsSet)
                writer.WriteString("dictionaryVersion", coding.DictionaryVersion);

            if (coding.DateCodedOption.IsSet)
                writer.WriteString("dateCoded", coding.DateCoded);
        }
    }
}
