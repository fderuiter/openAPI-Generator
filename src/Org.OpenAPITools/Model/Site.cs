// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Site
    /// </summary>
    public partial class Site : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Site" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="siteId">Unique site ID</param>
        /// <param name="siteName">Name of the site</param>
        /// <param name="siteEnrollmentStatus">Enrollment status of the site</param>
        /// <param name="dateCreated">Date when this site was created</param>
        /// <param name="dateModified">Date when this site was last modified</param>
        [JsonConstructor]
        public Site(Option<string?> studyKey = default, Option<int?> siteId = default, Option<string?> siteName = default, Option<string?> siteEnrollmentStatus = default, Option<string?> dateCreated = default, Option<string?> dateModified = default)
        {
            StudyKeyOption = studyKey;
            SiteIdOption = siteId;
            SiteNameOption = siteName;
            SiteEnrollmentStatusOption = siteEnrollmentStatus;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Unique site ID
        /// </summary>
        /// <value>Unique site ID</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteNameOption { get; private set; }

        /// <summary>
        /// Name of the site
        /// </summary>
        /// <value>Name of the site</value>
        [JsonPropertyName("siteName")]
        public string? SiteName { get { return this.SiteNameOption; } set { this.SiteNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteEnrollmentStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteEnrollmentStatusOption { get; private set; }

        /// <summary>
        /// Enrollment status of the site
        /// </summary>
        /// <value>Enrollment status of the site</value>
        [JsonPropertyName("siteEnrollmentStatus")]
        public string? SiteEnrollmentStatus { get { return this.SiteEnrollmentStatusOption; } set { this.SiteEnrollmentStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this site was created
        /// </summary>
        /// <value>Date when this site was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this site was last modified
        /// </summary>
        /// <value>Date when this site was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Site {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  SiteEnrollmentStatus: ").Append(SiteEnrollmentStatus).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Site" />
    /// </summary>
    public class SiteJsonConverter : JsonConverter<Site>
    {
        /// <summary>
        /// Deserializes json to <see cref="Site" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Site Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> siteId = default;
            Option<string?> siteName = default;
            Option<string?> siteEnrollmentStatus = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "siteName":
                            siteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteEnrollmentStatus":
                            siteEnrollmentStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Site.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class Site.");

            if (siteName.IsSet && siteName.Value == null)
                throw new ArgumentNullException(nameof(siteName), "Property is not nullable for class Site.");

            if (siteEnrollmentStatus.IsSet && siteEnrollmentStatus.Value == null)
                throw new ArgumentNullException(nameof(siteEnrollmentStatus), "Property is not nullable for class Site.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Site.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Site.");

            return new Site(studyKey, siteId, siteName, siteEnrollmentStatus, dateCreated, dateModified);
        }

        /// <summary>
        /// Serializes a <see cref="Site" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="site"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Site site, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, site, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Site" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="site"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Site site, JsonSerializerOptions jsonSerializerOptions)
        {
            if (site.StudyKeyOption.IsSet && site.StudyKey == null)
                throw new ArgumentNullException(nameof(site.StudyKey), "Property is required for class Site.");

            if (site.SiteNameOption.IsSet && site.SiteName == null)
                throw new ArgumentNullException(nameof(site.SiteName), "Property is required for class Site.");

            if (site.SiteEnrollmentStatusOption.IsSet && site.SiteEnrollmentStatus == null)
                throw new ArgumentNullException(nameof(site.SiteEnrollmentStatus), "Property is required for class Site.");

            if (site.DateCreatedOption.IsSet && site.DateCreated == null)
                throw new ArgumentNullException(nameof(site.DateCreated), "Property is required for class Site.");

            if (site.DateModifiedOption.IsSet && site.DateModified == null)
                throw new ArgumentNullException(nameof(site.DateModified), "Property is required for class Site.");

            if (site.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", site.StudyKey);

            if (site.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", site.SiteIdOption.Value!.Value);

            if (site.SiteNameOption.IsSet)
                writer.WriteString("siteName", site.SiteName);

            if (site.SiteEnrollmentStatusOption.IsSet)
                writer.WriteString("siteEnrollmentStatus", site.SiteEnrollmentStatus);

            if (site.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", site.DateCreated);

            if (site.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", site.DateModified);
        }
    }
}
