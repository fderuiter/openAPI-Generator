// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RecordJobStatus
    /// </summary>
    public partial class RecordJobStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordJobStatus" /> class.
        /// </summary>
        /// <param name="jobId">Unique job identifier</param>
        /// <param name="batchId">Batch ID used to track the job (identical to jobId in most cases)</param>
        /// <param name="state">Current state of the job (e.g., created, completed)</param>
        [JsonConstructor]
        public RecordJobStatus(Option<string?> jobId = default, Option<string?> batchId = default, Option<string?> state = default)
        {
            JobIdOption = jobId;
            BatchIdOption = batchId;
            StateOption = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of JobId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobIdOption { get; private set; }

        /// <summary>
        /// Unique job identifier
        /// </summary>
        /// <value>Unique job identifier</value>
        [JsonPropertyName("jobId")]
        public string? JobId { get { return this.JobIdOption; } set { this.JobIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BatchIdOption { get; private set; }

        /// <summary>
        /// Batch ID used to track the job (identical to jobId in most cases)
        /// </summary>
        /// <value>Batch ID used to track the job (identical to jobId in most cases)</value>
        [JsonPropertyName("batchId")]
        public string? BatchId { get { return this.BatchIdOption; } set { this.BatchIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Current state of the job (e.g., created, completed)
        /// </summary>
        /// <value>Current state of the job (e.g., created, completed)</value>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordJobStatus {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecordJobStatus" />
    /// </summary>
    public class RecordJobStatusJsonConverter : JsonConverter<RecordJobStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecordJobStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecordJobStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobId = default;
            Option<string?> batchId = default;
            Option<string?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "jobId":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "batchId":
                            batchId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class RecordJobStatus.");

            if (batchId.IsSet && batchId.Value == null)
                throw new ArgumentNullException(nameof(batchId), "Property is not nullable for class RecordJobStatus.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class RecordJobStatus.");

            return new RecordJobStatus(jobId, batchId, state);
        }

        /// <summary>
        /// Serializes a <see cref="RecordJobStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recordJobStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecordJobStatus recordJobStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recordJobStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecordJobStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recordJobStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecordJobStatus recordJobStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recordJobStatus.JobIdOption.IsSet && recordJobStatus.JobId == null)
                throw new ArgumentNullException(nameof(recordJobStatus.JobId), "Property is required for class RecordJobStatus.");

            if (recordJobStatus.BatchIdOption.IsSet && recordJobStatus.BatchId == null)
                throw new ArgumentNullException(nameof(recordJobStatus.BatchId), "Property is required for class RecordJobStatus.");

            if (recordJobStatus.StateOption.IsSet && recordJobStatus.State == null)
                throw new ArgumentNullException(nameof(recordJobStatus.State), "Property is required for class RecordJobStatus.");

            if (recordJobStatus.JobIdOption.IsSet)
                writer.WriteString("jobId", recordJobStatus.JobId);

            if (recordJobStatus.BatchIdOption.IsSet)
                writer.WriteString("batchId", recordJobStatus.BatchId);

            if (recordJobStatus.StateOption.IsSet)
                writer.WriteString("state", recordJobStatus.State);
        }
    }
}
