// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Job
    /// </summary>
    public partial class Job : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="jobId">Unique job identifier</param>
        /// <param name="batchId">Batch ID associated with the job (useful for linking with record creation requests)</param>
        /// <param name="state">State of the job (e.g., completed, pending)</param>
        /// <param name="dateCreated">Timestamp when the job was created</param>
        /// <param name="dateStarted">Timestamp when the job started processing</param>
        /// <param name="dateFinished">Timestamp when the job finished processing</param>
        [JsonConstructor]
        public Job(Option<string?> jobId = default, Option<string?> batchId = default, Option<string?> state = default, Option<string?> dateCreated = default, Option<string?> dateStarted = default, Option<string?> dateFinished = default)
        {
            JobIdOption = jobId;
            BatchIdOption = batchId;
            StateOption = state;
            DateCreatedOption = dateCreated;
            DateStartedOption = dateStarted;
            DateFinishedOption = dateFinished;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of JobId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobIdOption { get; private set; }

        /// <summary>
        /// Unique job identifier
        /// </summary>
        /// <value>Unique job identifier</value>
        [JsonPropertyName("jobId")]
        public string? JobId { get { return this.JobIdOption; } set { this.JobIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of BatchId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BatchIdOption { get; private set; }

        /// <summary>
        /// Batch ID associated with the job (useful for linking with record creation requests)
        /// </summary>
        /// <value>Batch ID associated with the job (useful for linking with record creation requests)</value>
        [JsonPropertyName("batchId")]
        public string? BatchId { get { return this.BatchIdOption; } set { this.BatchIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// State of the job (e.g., completed, pending)
        /// </summary>
        /// <value>State of the job (e.g., completed, pending)</value>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Timestamp when the job was created
        /// </summary>
        /// <value>Timestamp when the job was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateStarted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateStartedOption { get; private set; }

        /// <summary>
        /// Timestamp when the job started processing
        /// </summary>
        /// <value>Timestamp when the job started processing</value>
        [JsonPropertyName("dateStarted")]
        public string? DateStarted { get { return this.DateStartedOption; } set { this.DateStartedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateFinished
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateFinishedOption { get; private set; }

        /// <summary>
        /// Timestamp when the job finished processing
        /// </summary>
        /// <value>Timestamp when the job finished processing</value>
        [JsonPropertyName("dateFinished")]
        public string? DateFinished { get { return this.DateFinishedOption; } set { this.DateFinishedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateStarted: ").Append(DateStarted).Append("\n");
            sb.Append("  DateFinished: ").Append(DateFinished).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Job" />
    /// </summary>
    public class JobJsonConverter : JsonConverter<Job>
    {
        /// <summary>
        /// Deserializes json to <see cref="Job" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Job Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> jobId = default;
            Option<string?> batchId = default;
            Option<string?> state = default;
            Option<string?> dateCreated = default;
            Option<string?> dateStarted = default;
            Option<string?> dateFinished = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "jobId":
                            jobId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "batchId":
                            batchId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateStarted":
                            dateStarted = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateFinished":
                            dateFinished = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (jobId.IsSet && jobId.Value == null)
                throw new ArgumentNullException(nameof(jobId), "Property is not nullable for class Job.");

            if (batchId.IsSet && batchId.Value == null)
                throw new ArgumentNullException(nameof(batchId), "Property is not nullable for class Job.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class Job.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Job.");

            if (dateStarted.IsSet && dateStarted.Value == null)
                throw new ArgumentNullException(nameof(dateStarted), "Property is not nullable for class Job.");

            if (dateFinished.IsSet && dateFinished.Value == null)
                throw new ArgumentNullException(nameof(dateFinished), "Property is not nullable for class Job.");

            return new Job(jobId, batchId, state, dateCreated, dateStarted, dateFinished);
        }

        /// <summary>
        /// Serializes a <see cref="Job" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="job"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Job job, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, job, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Job" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="job"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Job job, JsonSerializerOptions jsonSerializerOptions)
        {
            if (job.JobIdOption.IsSet && job.JobId == null)
                throw new ArgumentNullException(nameof(job.JobId), "Property is required for class Job.");

            if (job.BatchIdOption.IsSet && job.BatchId == null)
                throw new ArgumentNullException(nameof(job.BatchId), "Property is required for class Job.");

            if (job.StateOption.IsSet && job.State == null)
                throw new ArgumentNullException(nameof(job.State), "Property is required for class Job.");

            if (job.DateCreatedOption.IsSet && job.DateCreated == null)
                throw new ArgumentNullException(nameof(job.DateCreated), "Property is required for class Job.");

            if (job.DateStartedOption.IsSet && job.DateStarted == null)
                throw new ArgumentNullException(nameof(job.DateStarted), "Property is required for class Job.");

            if (job.DateFinishedOption.IsSet && job.DateFinished == null)
                throw new ArgumentNullException(nameof(job.DateFinished), "Property is required for class Job.");

            if (job.JobIdOption.IsSet)
                writer.WriteString("jobId", job.JobId);

            if (job.BatchIdOption.IsSet)
                writer.WriteString("batchId", job.BatchId);

            if (job.StateOption.IsSet)
                writer.WriteString("state", job.State);

            if (job.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", job.DateCreated);

            if (job.DateStartedOption.IsSet)
                writer.WriteString("dateStarted", job.DateStarted);

            if (job.DateFinishedOption.IsSet)
                writer.WriteString("dateFinished", job.DateFinished);
        }
    }
}
