// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Record
    /// </summary>
    public partial class Record : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Record" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="intervalId">Interval ID (visit definition) that this record is associated with</param>
        /// <param name="formId">Form ID of the form this record instance belongs to</param>
        /// <param name="formKey">Form key of the form for this record instance</param>
        /// <param name="siteId">Site ID associated with the record</param>
        /// <param name="recordId">Unique record ID</param>
        /// <param name="recordOid">Client-assigned record OID</param>
        /// <param name="recordType">Type of record (e.g., SUBJECT for subject-related forms)</param>
        /// <param name="recordStatus">Current status of the record (e.g., Record Incomplete, Record Complete)</param>
        /// <param name="deleted">Whether the record is marked as deleted</param>
        /// <param name="dateCreated">Date when this record was created</param>
        /// <param name="dateModified">Date when this record was last modified</param>
        /// <param name="subjectId">Mednet subject ID that this record is associated with</param>
        /// <param name="subjectOid">Client-assigned subject OID for the subject this record is associated with</param>
        /// <param name="subjectKey">Subject display ID that this record is associated with</param>
        /// <param name="visitId">Visit instance ID that this record is associated with (if applicable)</param>
        /// <param name="parentRecordId">Record ID of the parent record if this record is a subrecord (if applicable)</param>
        /// <param name="keywords">List of keywords associated with the record</param>
        /// <param name="recordData">Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.</param>
        [JsonConstructor]
        public Record(Option<string?> studyKey = default, Option<int?> intervalId = default, Option<int?> formId = default, Option<string?> formKey = default, Option<int?> siteId = default, Option<int?> recordId = default, Option<string?> recordOid = default, Option<string?> recordType = default, Option<string?> recordStatus = default, Option<bool?> deleted = default, Option<string?> dateCreated = default, Option<string?> dateModified = default, Option<int?> subjectId = default, Option<string?> subjectOid = default, Option<string?> subjectKey = default, Option<int?> visitId = default, Option<int?> parentRecordId = default, Option<List<Keyword>?> keywords = default, Option<Dictionary<string, Object>?> recordData = default)
        {
            StudyKeyOption = studyKey;
            IntervalIdOption = intervalId;
            FormIdOption = formId;
            FormKeyOption = formKey;
            SiteIdOption = siteId;
            RecordIdOption = recordId;
            RecordOidOption = recordOid;
            RecordTypeOption = recordType;
            RecordStatusOption = recordStatus;
            DeletedOption = deleted;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            SubjectIdOption = subjectId;
            SubjectOidOption = subjectOid;
            SubjectKeyOption = subjectKey;
            VisitIdOption = visitId;
            ParentRecordIdOption = parentRecordId;
            KeywordsOption = keywords;
            RecordDataOption = recordData;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IntervalIdOption { get; private set; }

        /// <summary>
        /// Interval ID (visit definition) that this record is associated with
        /// </summary>
        /// <value>Interval ID (visit definition) that this record is associated with</value>
        [JsonPropertyName("intervalId")]
        public int? IntervalId { get { return this.IntervalIdOption; } set { this.IntervalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Form ID of the form this record instance belongs to
        /// </summary>
        /// <value>Form ID of the form this record instance belongs to</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// Form key of the form for this record instance
        /// </summary>
        /// <value>Form key of the form for this record instance</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Site ID associated with the record
        /// </summary>
        /// <value>Site ID associated with the record</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordIdOption { get; private set; }

        /// <summary>
        /// Unique record ID
        /// </summary>
        /// <value>Unique record ID</value>
        [JsonPropertyName("recordId")]
        public int? RecordId { get { return this.RecordIdOption; } set { this.RecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordOidOption { get; private set; }

        /// <summary>
        /// Client-assigned record OID
        /// </summary>
        /// <value>Client-assigned record OID</value>
        [JsonPropertyName("recordOid")]
        public string? RecordOid { get { return this.RecordOidOption; } set { this.RecordOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordTypeOption { get; private set; }

        /// <summary>
        /// Type of record (e.g., SUBJECT for subject-related forms)
        /// </summary>
        /// <value>Type of record (e.g., SUBJECT for subject-related forms)</value>
        [JsonPropertyName("recordType")]
        public string? RecordType { get { return this.RecordTypeOption; } set { this.RecordTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordStatusOption { get; private set; }

        /// <summary>
        /// Current status of the record (e.g., Record Incomplete, Record Complete)
        /// </summary>
        /// <value>Current status of the record (e.g., Record Incomplete, Record Complete)</value>
        [JsonPropertyName("recordStatus")]
        public string? RecordStatus { get { return this.RecordStatusOption; } set { this.RecordStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the record is marked as deleted
        /// </summary>
        /// <value>Whether the record is marked as deleted</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this record was created
        /// </summary>
        /// <value>Date when this record was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this record was last modified
        /// </summary>
        /// <value>Date when this record was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Mednet subject ID that this record is associated with
        /// </summary>
        /// <value>Mednet subject ID that this record is associated with</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOidOption { get; private set; }

        /// <summary>
        /// Client-assigned subject OID for the subject this record is associated with
        /// </summary>
        /// <value>Client-assigned subject OID for the subject this record is associated with</value>
        [JsonPropertyName("subjectOid")]
        public string? SubjectOid { get { return this.SubjectOidOption; } set { this.SubjectOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Subject display ID that this record is associated with
        /// </summary>
        /// <value>Subject display ID that this record is associated with</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of VisitId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VisitIdOption { get; private set; }

        /// <summary>
        /// Visit instance ID that this record is associated with (if applicable)
        /// </summary>
        /// <value>Visit instance ID that this record is associated with (if applicable)</value>
        [JsonPropertyName("visitId")]
        public int? VisitId { get { return this.VisitIdOption; } set { this.VisitIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentRecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ParentRecordIdOption { get; private set; }

        /// <summary>
        /// Record ID of the parent record if this record is a subrecord (if applicable)
        /// </summary>
        /// <value>Record ID of the parent record if this record is a subrecord (if applicable)</value>
        [JsonPropertyName("parentRecordId")]
        public int? ParentRecordId { get { return this.ParentRecordIdOption; } set { this.ParentRecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Keywords
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Keyword>?> KeywordsOption { get; private set; }

        /// <summary>
        /// List of keywords associated with the record
        /// </summary>
        /// <value>List of keywords associated with the record</value>
        [JsonPropertyName("keywords")]
        public List<Keyword>? Keywords { get { return this.KeywordsOption; } set { this.KeywordsOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> RecordDataOption { get; private set; }

        /// <summary>
        /// Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
        /// </summary>
        /// <value>Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.</value>
        [JsonPropertyName("recordData")]
        public Dictionary<string, Object>? RecordData { get { return this.RecordDataOption; } set { this.RecordDataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Record {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  IntervalId: ").Append(IntervalId).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RecordOid: ").Append(RecordOid).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  RecordStatus: ").Append(RecordStatus).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectOid: ").Append(SubjectOid).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  VisitId: ").Append(VisitId).Append("\n");
            sb.Append("  ParentRecordId: ").Append(ParentRecordId).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  RecordData: ").Append(RecordData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Record" />
    /// </summary>
    public class RecordJsonConverter : JsonConverter<Record>
    {
        /// <summary>
        /// Deserializes json to <see cref="Record" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Record Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> intervalId = default;
            Option<int?> formId = default;
            Option<string?> formKey = default;
            Option<int?> siteId = default;
            Option<int?> recordId = default;
            Option<string?> recordOid = default;
            Option<string?> recordType = default;
            Option<string?> recordStatus = default;
            Option<bool?> deleted = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;
            Option<int?> subjectId = default;
            Option<string?> subjectOid = default;
            Option<string?> subjectKey = default;
            Option<int?> visitId = default;
            Option<int?> parentRecordId = default;
            Option<List<Keyword>?> keywords = default;
            Option<Dictionary<string, Object>?> recordData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "intervalId":
                            intervalId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordId":
                            recordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordOid":
                            recordOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recordType":
                            recordType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recordStatus":
                            recordStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted":
                            deleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectOid":
                            subjectOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "visitId":
                            visitId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "parentRecordId":
                            parentRecordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "keywords":
                            keywords = new Option<List<Keyword>?>(JsonSerializer.Deserialize<List<Keyword>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "recordData":
                            recordData = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Record.");

            if (intervalId.IsSet && intervalId.Value == null)
                throw new ArgumentNullException(nameof(intervalId), "Property is not nullable for class Record.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class Record.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class Record.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class Record.");

            if (recordId.IsSet && recordId.Value == null)
                throw new ArgumentNullException(nameof(recordId), "Property is not nullable for class Record.");

            if (recordOid.IsSet && recordOid.Value == null)
                throw new ArgumentNullException(nameof(recordOid), "Property is not nullable for class Record.");

            if (recordType.IsSet && recordType.Value == null)
                throw new ArgumentNullException(nameof(recordType), "Property is not nullable for class Record.");

            if (recordStatus.IsSet && recordStatus.Value == null)
                throw new ArgumentNullException(nameof(recordStatus), "Property is not nullable for class Record.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class Record.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Record.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Record.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class Record.");

            if (subjectOid.IsSet && subjectOid.Value == null)
                throw new ArgumentNullException(nameof(subjectOid), "Property is not nullable for class Record.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class Record.");

            if (visitId.IsSet && visitId.Value == null)
                throw new ArgumentNullException(nameof(visitId), "Property is not nullable for class Record.");

            if (parentRecordId.IsSet && parentRecordId.Value == null)
                throw new ArgumentNullException(nameof(parentRecordId), "Property is not nullable for class Record.");

            if (keywords.IsSet && keywords.Value == null)
                throw new ArgumentNullException(nameof(keywords), "Property is not nullable for class Record.");

            if (recordData.IsSet && recordData.Value == null)
                throw new ArgumentNullException(nameof(recordData), "Property is not nullable for class Record.");

            return new Record(studyKey, intervalId, formId, formKey, siteId, recordId, recordOid, recordType, recordStatus, deleted, dateCreated, dateModified, subjectId, subjectOid, subjectKey, visitId, parentRecordId, keywords, recordData);
        }

        /// <summary>
        /// Serializes a <see cref="Record" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="record"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Record record, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, record, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Record" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="record"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Record record, JsonSerializerOptions jsonSerializerOptions)
        {
            if (record.StudyKeyOption.IsSet && record.StudyKey == null)
                throw new ArgumentNullException(nameof(record.StudyKey), "Property is required for class Record.");

            if (record.FormKeyOption.IsSet && record.FormKey == null)
                throw new ArgumentNullException(nameof(record.FormKey), "Property is required for class Record.");

            if (record.RecordOidOption.IsSet && record.RecordOid == null)
                throw new ArgumentNullException(nameof(record.RecordOid), "Property is required for class Record.");

            if (record.RecordTypeOption.IsSet && record.RecordType == null)
                throw new ArgumentNullException(nameof(record.RecordType), "Property is required for class Record.");

            if (record.RecordStatusOption.IsSet && record.RecordStatus == null)
                throw new ArgumentNullException(nameof(record.RecordStatus), "Property is required for class Record.");

            if (record.DateCreatedOption.IsSet && record.DateCreated == null)
                throw new ArgumentNullException(nameof(record.DateCreated), "Property is required for class Record.");

            if (record.DateModifiedOption.IsSet && record.DateModified == null)
                throw new ArgumentNullException(nameof(record.DateModified), "Property is required for class Record.");

            if (record.SubjectOidOption.IsSet && record.SubjectOid == null)
                throw new ArgumentNullException(nameof(record.SubjectOid), "Property is required for class Record.");

            if (record.SubjectKeyOption.IsSet && record.SubjectKey == null)
                throw new ArgumentNullException(nameof(record.SubjectKey), "Property is required for class Record.");

            if (record.KeywordsOption.IsSet && record.Keywords == null)
                throw new ArgumentNullException(nameof(record.Keywords), "Property is required for class Record.");

            if (record.RecordDataOption.IsSet && record.RecordData == null)
                throw new ArgumentNullException(nameof(record.RecordData), "Property is required for class Record.");

            if (record.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", record.StudyKey);

            if (record.IntervalIdOption.IsSet)
                writer.WriteNumber("intervalId", record.IntervalIdOption.Value!.Value);

            if (record.FormIdOption.IsSet)
                writer.WriteNumber("formId", record.FormIdOption.Value!.Value);

            if (record.FormKeyOption.IsSet)
                writer.WriteString("formKey", record.FormKey);

            if (record.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", record.SiteIdOption.Value!.Value);

            if (record.RecordIdOption.IsSet)
                writer.WriteNumber("recordId", record.RecordIdOption.Value!.Value);

            if (record.RecordOidOption.IsSet)
                writer.WriteString("recordOid", record.RecordOid);

            if (record.RecordTypeOption.IsSet)
                writer.WriteString("recordType", record.RecordType);

            if (record.RecordStatusOption.IsSet)
                writer.WriteString("recordStatus", record.RecordStatus);

            if (record.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", record.DeletedOption.Value!.Value);

            if (record.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", record.DateCreated);

            if (record.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", record.DateModified);

            if (record.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", record.SubjectIdOption.Value!.Value);

            if (record.SubjectOidOption.IsSet)
                writer.WriteString("subjectOid", record.SubjectOid);

            if (record.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", record.SubjectKey);

            if (record.VisitIdOption.IsSet)
                writer.WriteNumber("visitId", record.VisitIdOption.Value!.Value);

            if (record.ParentRecordIdOption.IsSet)
                writer.WriteNumber("parentRecordId", record.ParentRecordIdOption.Value!.Value);

            if (record.KeywordsOption.IsSet)
            {
                writer.WritePropertyName("keywords");
                JsonSerializer.Serialize(writer, record.Keywords, jsonSerializerOptions);
            }
            if (record.RecordDataOption.IsSet)
            {
                writer.WritePropertyName("recordData");
                JsonSerializer.Serialize(writer, record.RecordData, jsonSerializerOptions);
            }
        }
    }
}
