// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Keyword
    /// </summary>
    public partial class Keyword : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Keyword" /> class.
        /// </summary>
        /// <param name="keywordName">Name of the keyword</param>
        /// <param name="keywordKey">Key of the keyword (short code)</param>
        /// <param name="keywordId">Internal keyword ID</param>
        /// <param name="dateAdded">Date when this keyword was added</param>
        [JsonConstructor]
        public Keyword(Option<string?> keywordName = default, Option<string?> keywordKey = default, Option<int?> keywordId = default, Option<string?> dateAdded = default)
        {
            KeywordNameOption = keywordName;
            KeywordKeyOption = keywordKey;
            KeywordIdOption = keywordId;
            DateAddedOption = dateAdded;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of KeywordName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeywordNameOption { get; private set; }

        /// <summary>
        /// Name of the keyword
        /// </summary>
        /// <value>Name of the keyword</value>
        [JsonPropertyName("keywordName")]
        public string? KeywordName { get { return this.KeywordNameOption; } set { this.KeywordNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeywordKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> KeywordKeyOption { get; private set; }

        /// <summary>
        /// Key of the keyword (short code)
        /// </summary>
        /// <value>Key of the keyword (short code)</value>
        [JsonPropertyName("keywordKey")]
        public string? KeywordKey { get { return this.KeywordKeyOption; } set { this.KeywordKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeywordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> KeywordIdOption { get; private set; }

        /// <summary>
        /// Internal keyword ID
        /// </summary>
        /// <value>Internal keyword ID</value>
        [JsonPropertyName("keywordId")]
        public int? KeywordId { get { return this.KeywordIdOption; } set { this.KeywordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateAdded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateAddedOption { get; private set; }

        /// <summary>
        /// Date when this keyword was added
        /// </summary>
        /// <value>Date when this keyword was added</value>
        [JsonPropertyName("dateAdded")]
        public string? DateAdded { get { return this.DateAddedOption; } set { this.DateAddedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Keyword {\n");
            sb.Append("  KeywordName: ").Append(KeywordName).Append("\n");
            sb.Append("  KeywordKey: ").Append(KeywordKey).Append("\n");
            sb.Append("  KeywordId: ").Append(KeywordId).Append("\n");
            sb.Append("  DateAdded: ").Append(DateAdded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Keyword" />
    /// </summary>
    public class KeywordJsonConverter : JsonConverter<Keyword>
    {
        /// <summary>
        /// Deserializes json to <see cref="Keyword" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Keyword Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> keywordName = default;
            Option<string?> keywordKey = default;
            Option<int?> keywordId = default;
            Option<string?> dateAdded = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "keywordName":
                            keywordName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "keywordKey":
                            keywordKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "keywordId":
                            keywordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "dateAdded":
                            dateAdded = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (keywordName.IsSet && keywordName.Value == null)
                throw new ArgumentNullException(nameof(keywordName), "Property is not nullable for class Keyword.");

            if (keywordKey.IsSet && keywordKey.Value == null)
                throw new ArgumentNullException(nameof(keywordKey), "Property is not nullable for class Keyword.");

            if (keywordId.IsSet && keywordId.Value == null)
                throw new ArgumentNullException(nameof(keywordId), "Property is not nullable for class Keyword.");

            if (dateAdded.IsSet && dateAdded.Value == null)
                throw new ArgumentNullException(nameof(dateAdded), "Property is not nullable for class Keyword.");

            return new Keyword(keywordName, keywordKey, keywordId, dateAdded);
        }

        /// <summary>
        /// Serializes a <see cref="Keyword" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="keyword"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Keyword keyword, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, keyword, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Keyword" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="keyword"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Keyword keyword, JsonSerializerOptions jsonSerializerOptions)
        {
            if (keyword.KeywordNameOption.IsSet && keyword.KeywordName == null)
                throw new ArgumentNullException(nameof(keyword.KeywordName), "Property is required for class Keyword.");

            if (keyword.KeywordKeyOption.IsSet && keyword.KeywordKey == null)
                throw new ArgumentNullException(nameof(keyword.KeywordKey), "Property is required for class Keyword.");

            if (keyword.DateAddedOption.IsSet && keyword.DateAdded == null)
                throw new ArgumentNullException(nameof(keyword.DateAdded), "Property is required for class Keyword.");

            if (keyword.KeywordNameOption.IsSet)
                writer.WriteString("keywordName", keyword.KeywordName);

            if (keyword.KeywordKeyOption.IsSet)
                writer.WriteString("keywordKey", keyword.KeywordKey);

            if (keyword.KeywordIdOption.IsSet)
                writer.WriteNumber("keywordId", keyword.KeywordIdOption.Value!.Value);

            if (keyword.DateAddedOption.IsSet)
                writer.WriteString("dateAdded", keyword.DateAdded);
        }
    }
}
