// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RecordRevision
    /// </summary>
    public partial class RecordRevision : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordRevision" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="recordRevisionId">Unique system identifier for the record revision</param>
        /// <param name="recordId">Unique system identifier of the related record</param>
        /// <param name="recordOid">Client-assigned record OID (if any)</param>
        /// <param name="varRecordRevision">Revision number of the record (version of the record status)</param>
        /// <param name="dataRevision">Revision number of the data within the record</param>
        /// <param name="recordStatus">Status of the record at this revision (user-defined status label)</param>
        /// <param name="subjectId">Mednet subject ID related to the record</param>
        /// <param name="subjectOid">Client-assigned subject OID related to the record</param>
        /// <param name="subjectKey">Subject display ID related to the record</param>
        /// <param name="siteId">Site ID related to the record</param>
        /// <param name="formKey">Form key of the form that the record belongs to</param>
        /// <param name="intervalId">Interval ID (visit definition) related to the record</param>
        /// <param name="role">Role name of the user who saved the record revision</param>
        /// <param name="user">Username of the user who saved the record revision</param>
        /// <param name="reasonForChange">Reason for change, if provided (for audit trail)</param>
        /// <param name="deleted">Whether the record was deleted in this revision</param>
        /// <param name="dateCreated">Date when this record revision was created</param>
        [JsonConstructor]
        public RecordRevision(Option<string?> studyKey = default, Option<int?> recordRevisionId = default, Option<int?> recordId = default, Option<string?> recordOid = default, Option<int?> varRecordRevision = default, Option<int?> dataRevision = default, Option<string?> recordStatus = default, Option<int?> subjectId = default, Option<string?> subjectOid = default, Option<string?> subjectKey = default, Option<int?> siteId = default, Option<string?> formKey = default, Option<int?> intervalId = default, Option<string?> role = default, Option<string?> user = default, Option<string?> reasonForChange = default, Option<bool?> deleted = default, Option<string?> dateCreated = default)
        {
            StudyKeyOption = studyKey;
            RecordRevisionIdOption = recordRevisionId;
            RecordIdOption = recordId;
            RecordOidOption = recordOid;
            VarRecordRevisionOption = varRecordRevision;
            DataRevisionOption = dataRevision;
            RecordStatusOption = recordStatus;
            SubjectIdOption = subjectId;
            SubjectOidOption = subjectOid;
            SubjectKeyOption = subjectKey;
            SiteIdOption = siteId;
            FormKeyOption = formKey;
            IntervalIdOption = intervalId;
            RoleOption = role;
            UserOption = user;
            ReasonForChangeOption = reasonForChange;
            DeletedOption = deleted;
            DateCreatedOption = dateCreated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordRevisionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordRevisionIdOption { get; private set; }

        /// <summary>
        /// Unique system identifier for the record revision
        /// </summary>
        /// <value>Unique system identifier for the record revision</value>
        [JsonPropertyName("recordRevisionId")]
        public int? RecordRevisionId { get { return this.RecordRevisionIdOption; } set { this.RecordRevisionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordIdOption { get; private set; }

        /// <summary>
        /// Unique system identifier of the related record
        /// </summary>
        /// <value>Unique system identifier of the related record</value>
        [JsonPropertyName("recordId")]
        public int? RecordId { get { return this.RecordIdOption; } set { this.RecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordOidOption { get; private set; }

        /// <summary>
        /// Client-assigned record OID (if any)
        /// </summary>
        /// <value>Client-assigned record OID (if any)</value>
        [JsonPropertyName("recordOid")]
        public string? RecordOid { get { return this.RecordOidOption; } set { this.RecordOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarRecordRevision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VarRecordRevisionOption { get; private set; }

        /// <summary>
        /// Revision number of the record (version of the record status)
        /// </summary>
        /// <value>Revision number of the record (version of the record status)</value>
        [JsonPropertyName("recordRevision")]
        public int? VarRecordRevision { get { return this.VarRecordRevisionOption; } set { this.VarRecordRevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataRevision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DataRevisionOption { get; private set; }

        /// <summary>
        /// Revision number of the data within the record
        /// </summary>
        /// <value>Revision number of the data within the record</value>
        [JsonPropertyName("dataRevision")]
        public int? DataRevision { get { return this.DataRevisionOption; } set { this.DataRevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RecordStatusOption { get; private set; }

        /// <summary>
        /// Status of the record at this revision (user-defined status label)
        /// </summary>
        /// <value>Status of the record at this revision (user-defined status label)</value>
        [JsonPropertyName("recordStatus")]
        public string? RecordStatus { get { return this.RecordStatusOption; } set { this.RecordStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Mednet subject ID related to the record
        /// </summary>
        /// <value>Mednet subject ID related to the record</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOidOption { get; private set; }

        /// <summary>
        /// Client-assigned subject OID related to the record
        /// </summary>
        /// <value>Client-assigned subject OID related to the record</value>
        [JsonPropertyName("subjectOid")]
        public string? SubjectOid { get { return this.SubjectOidOption; } set { this.SubjectOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Subject display ID related to the record
        /// </summary>
        /// <value>Subject display ID related to the record</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Site ID related to the record
        /// </summary>
        /// <value>Site ID related to the record</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// Form key of the form that the record belongs to
        /// </summary>
        /// <value>Form key of the form that the record belongs to</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of IntervalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IntervalIdOption { get; private set; }

        /// <summary>
        /// Interval ID (visit definition) related to the record
        /// </summary>
        /// <value>Interval ID (visit definition) related to the record</value>
        [JsonPropertyName("intervalId")]
        public int? IntervalId { get { return this.IntervalIdOption; } set { this.IntervalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleOption { get; private set; }

        /// <summary>
        /// Role name of the user who saved the record revision
        /// </summary>
        /// <value>Role name of the user who saved the record revision</value>
        [JsonPropertyName("role")]
        public string? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserOption { get; private set; }

        /// <summary>
        /// Username of the user who saved the record revision
        /// </summary>
        /// <value>Username of the user who saved the record revision</value>
        [JsonPropertyName("user")]
        public string? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReasonForChange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonForChangeOption { get; private set; }

        /// <summary>
        /// Reason for change, if provided (for audit trail)
        /// </summary>
        /// <value>Reason for change, if provided (for audit trail)</value>
        [JsonPropertyName("reasonForChange")]
        public string? ReasonForChange { get { return this.ReasonForChangeOption; } set { this.ReasonForChangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the record was deleted in this revision
        /// </summary>
        /// <value>Whether the record was deleted in this revision</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this record revision was created
        /// </summary>
        /// <value>Date when this record revision was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordRevision {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  RecordRevisionId: ").Append(RecordRevisionId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RecordOid: ").Append(RecordOid).Append("\n");
            sb.Append("  VarRecordRevision: ").Append(VarRecordRevision).Append("\n");
            sb.Append("  DataRevision: ").Append(DataRevision).Append("\n");
            sb.Append("  RecordStatus: ").Append(RecordStatus).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectOid: ").Append(SubjectOid).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  IntervalId: ").Append(IntervalId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ReasonForChange: ").Append(ReasonForChange).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RecordRevision" />
    /// </summary>
    public class RecordRevisionJsonConverter : JsonConverter<RecordRevision>
    {
        /// <summary>
        /// Deserializes json to <see cref="RecordRevision" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RecordRevision Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> recordRevisionId = default;
            Option<int?> recordId = default;
            Option<string?> recordOid = default;
            Option<int?> varRecordRevision = default;
            Option<int?> dataRevision = default;
            Option<string?> recordStatus = default;
            Option<int?> subjectId = default;
            Option<string?> subjectOid = default;
            Option<string?> subjectKey = default;
            Option<int?> siteId = default;
            Option<string?> formKey = default;
            Option<int?> intervalId = default;
            Option<string?> role = default;
            Option<string?> user = default;
            Option<string?> reasonForChange = default;
            Option<bool?> deleted = default;
            Option<string?> dateCreated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recordRevisionId":
                            recordRevisionId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordId":
                            recordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordOid":
                            recordOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recordRevision":
                            varRecordRevision = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "dataRevision":
                            dataRevision = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "recordStatus":
                            recordStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectOid":
                            subjectOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "intervalId":
                            intervalId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user":
                            user = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reasonForChange":
                            reasonForChange = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted":
                            deleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class RecordRevision.");

            if (recordRevisionId.IsSet && recordRevisionId.Value == null)
                throw new ArgumentNullException(nameof(recordRevisionId), "Property is not nullable for class RecordRevision.");

            if (recordId.IsSet && recordId.Value == null)
                throw new ArgumentNullException(nameof(recordId), "Property is not nullable for class RecordRevision.");

            if (recordOid.IsSet && recordOid.Value == null)
                throw new ArgumentNullException(nameof(recordOid), "Property is not nullable for class RecordRevision.");

            if (varRecordRevision.IsSet && varRecordRevision.Value == null)
                throw new ArgumentNullException(nameof(varRecordRevision), "Property is not nullable for class RecordRevision.");

            if (dataRevision.IsSet && dataRevision.Value == null)
                throw new ArgumentNullException(nameof(dataRevision), "Property is not nullable for class RecordRevision.");

            if (recordStatus.IsSet && recordStatus.Value == null)
                throw new ArgumentNullException(nameof(recordStatus), "Property is not nullable for class RecordRevision.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class RecordRevision.");

            if (subjectOid.IsSet && subjectOid.Value == null)
                throw new ArgumentNullException(nameof(subjectOid), "Property is not nullable for class RecordRevision.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class RecordRevision.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class RecordRevision.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class RecordRevision.");

            if (intervalId.IsSet && intervalId.Value == null)
                throw new ArgumentNullException(nameof(intervalId), "Property is not nullable for class RecordRevision.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class RecordRevision.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class RecordRevision.");

            if (reasonForChange.IsSet && reasonForChange.Value == null)
                throw new ArgumentNullException(nameof(reasonForChange), "Property is not nullable for class RecordRevision.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class RecordRevision.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class RecordRevision.");

            return new RecordRevision(studyKey, recordRevisionId, recordId, recordOid, varRecordRevision, dataRevision, recordStatus, subjectId, subjectOid, subjectKey, siteId, formKey, intervalId, role, user, reasonForChange, deleted, dateCreated);
        }

        /// <summary>
        /// Serializes a <see cref="RecordRevision" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recordRevision"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RecordRevision recordRevision, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, recordRevision, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RecordRevision" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="recordRevision"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RecordRevision recordRevision, JsonSerializerOptions jsonSerializerOptions)
        {
            if (recordRevision.StudyKeyOption.IsSet && recordRevision.StudyKey == null)
                throw new ArgumentNullException(nameof(recordRevision.StudyKey), "Property is required for class RecordRevision.");

            if (recordRevision.RecordOidOption.IsSet && recordRevision.RecordOid == null)
                throw new ArgumentNullException(nameof(recordRevision.RecordOid), "Property is required for class RecordRevision.");

            if (recordRevision.RecordStatusOption.IsSet && recordRevision.RecordStatus == null)
                throw new ArgumentNullException(nameof(recordRevision.RecordStatus), "Property is required for class RecordRevision.");

            if (recordRevision.SubjectOidOption.IsSet && recordRevision.SubjectOid == null)
                throw new ArgumentNullException(nameof(recordRevision.SubjectOid), "Property is required for class RecordRevision.");

            if (recordRevision.SubjectKeyOption.IsSet && recordRevision.SubjectKey == null)
                throw new ArgumentNullException(nameof(recordRevision.SubjectKey), "Property is required for class RecordRevision.");

            if (recordRevision.FormKeyOption.IsSet && recordRevision.FormKey == null)
                throw new ArgumentNullException(nameof(recordRevision.FormKey), "Property is required for class RecordRevision.");

            if (recordRevision.RoleOption.IsSet && recordRevision.Role == null)
                throw new ArgumentNullException(nameof(recordRevision.Role), "Property is required for class RecordRevision.");

            if (recordRevision.UserOption.IsSet && recordRevision.User == null)
                throw new ArgumentNullException(nameof(recordRevision.User), "Property is required for class RecordRevision.");

            if (recordRevision.ReasonForChangeOption.IsSet && recordRevision.ReasonForChange == null)
                throw new ArgumentNullException(nameof(recordRevision.ReasonForChange), "Property is required for class RecordRevision.");

            if (recordRevision.DateCreatedOption.IsSet && recordRevision.DateCreated == null)
                throw new ArgumentNullException(nameof(recordRevision.DateCreated), "Property is required for class RecordRevision.");

            if (recordRevision.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", recordRevision.StudyKey);

            if (recordRevision.RecordRevisionIdOption.IsSet)
                writer.WriteNumber("recordRevisionId", recordRevision.RecordRevisionIdOption.Value!.Value);

            if (recordRevision.RecordIdOption.IsSet)
                writer.WriteNumber("recordId", recordRevision.RecordIdOption.Value!.Value);

            if (recordRevision.RecordOidOption.IsSet)
                writer.WriteString("recordOid", recordRevision.RecordOid);

            if (recordRevision.VarRecordRevisionOption.IsSet)
                writer.WriteNumber("recordRevision", recordRevision.VarRecordRevisionOption.Value!.Value);

            if (recordRevision.DataRevisionOption.IsSet)
                writer.WriteNumber("dataRevision", recordRevision.DataRevisionOption.Value!.Value);

            if (recordRevision.RecordStatusOption.IsSet)
                writer.WriteString("recordStatus", recordRevision.RecordStatus);

            if (recordRevision.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", recordRevision.SubjectIdOption.Value!.Value);

            if (recordRevision.SubjectOidOption.IsSet)
                writer.WriteString("subjectOid", recordRevision.SubjectOid);

            if (recordRevision.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", recordRevision.SubjectKey);

            if (recordRevision.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", recordRevision.SiteIdOption.Value!.Value);

            if (recordRevision.FormKeyOption.IsSet)
                writer.WriteString("formKey", recordRevision.FormKey);

            if (recordRevision.IntervalIdOption.IsSet)
                writer.WriteNumber("intervalId", recordRevision.IntervalIdOption.Value!.Value);

            if (recordRevision.RoleOption.IsSet)
                writer.WriteString("role", recordRevision.Role);

            if (recordRevision.UserOption.IsSet)
                writer.WriteString("user", recordRevision.User);

            if (recordRevision.ReasonForChangeOption.IsSet)
                writer.WriteString("reasonForChange", recordRevision.ReasonForChange);

            if (recordRevision.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", recordRevision.DeletedOption.Value!.Value);

            if (recordRevision.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", recordRevision.DateCreated);
        }
    }
}
