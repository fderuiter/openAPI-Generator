/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComponentsSchemasRecordCreateRequestItem {
    /// Form key identifying the eCRF to create or update
    #[serde(rename = "formKey")]
    pub form_key: String,
    /// Form ID identifying the eCRF to create or update (alternative to formKey)
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// Name of the site where the record should be created (for new subject registration)
    #[serde(rename = "siteName", skip_serializing_if = "Option::is_none")]
    pub site_name: Option<String>,
    /// Site ID for the record (alternative to siteName)
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Subject identifier (display ID) for which to create or update the record
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Subject ID for which to create or update the record (alternative to subjectKey)
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Subject OID for which to create or update the record (alternative to subjectKey)
    #[serde(rename = "subjectOid", skip_serializing_if = "Option::is_none")]
    pub subject_oid: Option<String>,
    /// Name of the interval (visit) for a scheduled record update
    #[serde(rename = "intervalName", skip_serializing_if = "Option::is_none")]
    pub interval_name: Option<String>,
    /// Interval ID for a scheduled record update (alternative to intervalName)
    #[serde(rename = "intervalId", skip_serializing_if = "Option::is_none")]
    pub interval_id: Option<i32>,
    /// Record ID for updating an existing unscheduled record (if applicable)
    #[serde(rename = "recordId", skip_serializing_if = "Option::is_none")]
    pub record_id: Option<i32>,
    /// Record OID for updating an existing unscheduled record (if applicable)
    #[serde(rename = "recordOid", skip_serializing_if = "Option::is_none")]
    pub record_oid: Option<String>,
    /// Key-value pairs of field names and values for the record data
    #[serde(rename = "data")]
    pub data: std::collections::HashMap<String, serde_json::Value>,
}

impl ComponentsSchemasRecordCreateRequestItem {
    pub fn new(form_key: String, data: std::collections::HashMap<String, serde_json::Value>) -> ComponentsSchemasRecordCreateRequestItem {
        ComponentsSchemasRecordCreateRequestItem {
            form_key,
            form_id: None,
            site_name: None,
            site_id: None,
            subject_key: None,
            subject_id: None,
            subject_oid: None,
            interval_name: None,
            interval_id: None,
            record_id: None,
            record_oid: None,
            data,
        }
    }
}

