/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Interval {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Unique system identifier for the interval (visit definition)
    #[serde(rename = "intervalId", skip_serializing_if = "Option::is_none")]
    pub interval_id: Option<i32>,
    /// Name of the interval (visit) as defined in the study
    #[serde(rename = "intervalName", skip_serializing_if = "Option::is_none")]
    pub interval_name: Option<String>,
    /// Description of the interval (visit)
    #[serde(rename = "intervalDescription", skip_serializing_if = "Option::is_none")]
    pub interval_description: Option<String>,
    /// Sequence number of the interval in the schedule
    #[serde(rename = "intervalSequence", skip_serializing_if = "Option::is_none")]
    pub interval_sequence: Option<i32>,
    /// Identifier for the interval group (if intervals are grouped)
    #[serde(rename = "intervalGroupId", skip_serializing_if = "Option::is_none")]
    pub interval_group_id: Option<i32>,
    /// Name of the interval group
    #[serde(rename = "intervalGroupName", skip_serializing_if = "Option::is_none")]
    pub interval_group_name: Option<String>,
    /// Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    #[serde(rename = "timeline", skip_serializing_if = "Option::is_none")]
    pub timeline: Option<String>,
    /// Baseline interval used for calculating this intervalâ€™s dates
    #[serde(rename = "definedUsingInterval", skip_serializing_if = "Option::is_none")]
    pub defined_using_interval: Option<String>,
    /// Baseline form (name) from which the calculation date is taken
    #[serde(rename = "windowCalculationForm", skip_serializing_if = "Option::is_none")]
    pub window_calculation_form: Option<String>,
    /// Baseline field (variable name) from which the calculation date is taken
    #[serde(rename = "windowCalculationDate", skip_serializing_if = "Option::is_none")]
    pub window_calculation_date: Option<String>,
    /// Form used to capture the actual date for this interval
    #[serde(rename = "actualDateForm", skip_serializing_if = "Option::is_none")]
    pub actual_date_form: Option<String>,
    /// Field (variable name) used to capture the actual date for this interval
    #[serde(rename = "actualDate", skip_serializing_if = "Option::is_none")]
    pub actual_date: Option<String>,
    /// Number of days from the calculation date when the interval is due
    #[serde(rename = "dueDateWillBeIn", skip_serializing_if = "Option::is_none")]
    pub due_date_will_be_in: Option<i32>,
    /// Number of days before the due date that are allowed (negative window)
    #[serde(rename = "negativeSlack", skip_serializing_if = "Option::is_none")]
    pub negative_slack: Option<i32>,
    /// Number of days after the due date that are allowed (positive window)
    #[serde(rename = "positiveSlack", skip_serializing_if = "Option::is_none")]
    pub positive_slack: Option<i32>,
    /// Number of days of grace period for ePRO completion after due date
    #[serde(rename = "eproGracePeriod", skip_serializing_if = "Option::is_none")]
    pub epro_grace_period: Option<i32>,
    /// List of forms that are scheduled in this interval
    #[serde(rename = "forms", skip_serializing_if = "Option::is_none")]
    pub forms: Option<Vec<models::ComponentsSchemasIntervalFormsItem>>,
    /// Whether the interval is soft-deleted (disabled)
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Date when this interval was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this interval was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
}

impl Interval {
    pub fn new() -> Interval {
        Interval {
            study_key: None,
            interval_id: None,
            interval_name: None,
            interval_description: None,
            interval_sequence: None,
            interval_group_id: None,
            interval_group_name: None,
            timeline: None,
            defined_using_interval: None,
            window_calculation_form: None,
            window_calculation_date: None,
            actual_date_form: None,
            actual_date: None,
            due_date_will_be_in: None,
            negative_slack: None,
            positive_slack: None,
            epro_grace_period: None,
            forms: None,
            disabled: None,
            date_created: None,
            date_modified: None,
        }
    }
}

