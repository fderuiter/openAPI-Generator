/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Coding {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Name of the site associated with the coded data
    #[serde(rename = "siteName", skip_serializing_if = "Option::is_none")]
    pub site_name: Option<String>,
    /// Site ID associated with the coded data
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Subject ID associated with the coded data
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Subject key (display ID) associated with the coded data
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Form ID where the coded data originates
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// Name of the form where the coded data originates
    #[serde(rename = "formName", skip_serializing_if = "Option::is_none")]
    pub form_name: Option<String>,
    /// Form key where the coded data originates
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// Revision number of the coding entry
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    /// Record ID associated with the coded data
    #[serde(rename = "recordId", skip_serializing_if = "Option::is_none")]
    pub record_id: Option<i32>,
    /// Variable name (field) that was coded
    #[serde(rename = "variable", skip_serializing_if = "Option::is_none")]
    pub variable: Option<String>,
    /// Original value entered that required coding
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Mednet coding ID
    #[serde(rename = "codingId", skip_serializing_if = "Option::is_none")]
    pub coding_id: Option<i32>,
    /// Standardized code assigned (e.g., dictionary term)
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Name of the user who performed the coding
    #[serde(rename = "codedBy", skip_serializing_if = "Option::is_none")]
    pub coded_by: Option<String>,
    /// Reason for coding or any notes on changes
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Name of the dictionary used (e.g., MedDRA)
    #[serde(rename = "dictionaryName", skip_serializing_if = "Option::is_none")]
    pub dictionary_name: Option<String>,
    /// Version of the dictionary used
    #[serde(rename = "dictionaryVersion", skip_serializing_if = "Option::is_none")]
    pub dictionary_version: Option<String>,
    /// Date when the coding was performed
    #[serde(rename = "dateCoded", skip_serializing_if = "Option::is_none")]
    pub date_coded: Option<String>,
}

impl Coding {
    pub fn new() -> Coding {
        Coding {
            study_key: None,
            site_name: None,
            site_id: None,
            subject_id: None,
            subject_key: None,
            form_id: None,
            form_name: None,
            form_key: None,
            revision: None,
            record_id: None,
            variable: None,
            value: None,
            coding_id: None,
            code: None,
            coded_by: None,
            reason: None,
            dictionary_name: None,
            dictionary_version: None,
            date_coded: None,
        }
    }
}

