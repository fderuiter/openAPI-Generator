/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComponentsSchemasIntervalFormsItem from './ComponentsSchemasIntervalFormsItem';

/**
 * The Interval model module.
 * @module model/Interval
 * @version 1.0.15
 */
class Interval {
    /**
     * Constructs a new <code>Interval</code>.
     * @alias module:model/Interval
     */
    constructor() { 
        
        Interval.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Interval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Interval} obj Optional instance to populate.
     * @return {module:model/Interval} The populated <code>Interval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Interval();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('intervalName')) {
                obj['intervalName'] = ApiClient.convertToType(data['intervalName'], 'String');
            }
            if (data.hasOwnProperty('intervalDescription')) {
                obj['intervalDescription'] = ApiClient.convertToType(data['intervalDescription'], 'String');
            }
            if (data.hasOwnProperty('intervalSequence')) {
                obj['intervalSequence'] = ApiClient.convertToType(data['intervalSequence'], 'Number');
            }
            if (data.hasOwnProperty('intervalGroupId')) {
                obj['intervalGroupId'] = ApiClient.convertToType(data['intervalGroupId'], 'Number');
            }
            if (data.hasOwnProperty('intervalGroupName')) {
                obj['intervalGroupName'] = ApiClient.convertToType(data['intervalGroupName'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], 'String');
            }
            if (data.hasOwnProperty('definedUsingInterval')) {
                obj['definedUsingInterval'] = ApiClient.convertToType(data['definedUsingInterval'], 'String');
            }
            if (data.hasOwnProperty('windowCalculationForm')) {
                obj['windowCalculationForm'] = ApiClient.convertToType(data['windowCalculationForm'], 'String');
            }
            if (data.hasOwnProperty('windowCalculationDate')) {
                obj['windowCalculationDate'] = ApiClient.convertToType(data['windowCalculationDate'], 'String');
            }
            if (data.hasOwnProperty('actualDateForm')) {
                obj['actualDateForm'] = ApiClient.convertToType(data['actualDateForm'], 'String');
            }
            if (data.hasOwnProperty('actualDate')) {
                obj['actualDate'] = ApiClient.convertToType(data['actualDate'], 'String');
            }
            if (data.hasOwnProperty('dueDateWillBeIn')) {
                obj['dueDateWillBeIn'] = ApiClient.convertToType(data['dueDateWillBeIn'], 'Number');
            }
            if (data.hasOwnProperty('negativeSlack')) {
                obj['negativeSlack'] = ApiClient.convertToType(data['negativeSlack'], 'Number');
            }
            if (data.hasOwnProperty('positiveSlack')) {
                obj['positiveSlack'] = ApiClient.convertToType(data['positiveSlack'], 'Number');
            }
            if (data.hasOwnProperty('eproGracePeriod')) {
                obj['eproGracePeriod'] = ApiClient.convertToType(data['eproGracePeriod'], 'Number');
            }
            if (data.hasOwnProperty('forms')) {
                obj['forms'] = ApiClient.convertToType(data['forms'], [ComponentsSchemasIntervalFormsItem]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Interval</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Interval</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['intervalName'] && !(typeof data['intervalName'] === 'string' || data['intervalName'] instanceof String)) {
            throw new Error("Expected the field `intervalName` to be a primitive type in the JSON string but got " + data['intervalName']);
        }
        // ensure the json data is a string
        if (data['intervalDescription'] && !(typeof data['intervalDescription'] === 'string' || data['intervalDescription'] instanceof String)) {
            throw new Error("Expected the field `intervalDescription` to be a primitive type in the JSON string but got " + data['intervalDescription']);
        }
        // ensure the json data is a string
        if (data['intervalGroupName'] && !(typeof data['intervalGroupName'] === 'string' || data['intervalGroupName'] instanceof String)) {
            throw new Error("Expected the field `intervalGroupName` to be a primitive type in the JSON string but got " + data['intervalGroupName']);
        }
        // ensure the json data is a string
        if (data['timeline'] && !(typeof data['timeline'] === 'string' || data['timeline'] instanceof String)) {
            throw new Error("Expected the field `timeline` to be a primitive type in the JSON string but got " + data['timeline']);
        }
        // ensure the json data is a string
        if (data['definedUsingInterval'] && !(typeof data['definedUsingInterval'] === 'string' || data['definedUsingInterval'] instanceof String)) {
            throw new Error("Expected the field `definedUsingInterval` to be a primitive type in the JSON string but got " + data['definedUsingInterval']);
        }
        // ensure the json data is a string
        if (data['windowCalculationForm'] && !(typeof data['windowCalculationForm'] === 'string' || data['windowCalculationForm'] instanceof String)) {
            throw new Error("Expected the field `windowCalculationForm` to be a primitive type in the JSON string but got " + data['windowCalculationForm']);
        }
        // ensure the json data is a string
        if (data['windowCalculationDate'] && !(typeof data['windowCalculationDate'] === 'string' || data['windowCalculationDate'] instanceof String)) {
            throw new Error("Expected the field `windowCalculationDate` to be a primitive type in the JSON string but got " + data['windowCalculationDate']);
        }
        // ensure the json data is a string
        if (data['actualDateForm'] && !(typeof data['actualDateForm'] === 'string' || data['actualDateForm'] instanceof String)) {
            throw new Error("Expected the field `actualDateForm` to be a primitive type in the JSON string but got " + data['actualDateForm']);
        }
        // ensure the json data is a string
        if (data['actualDate'] && !(typeof data['actualDate'] === 'string' || data['actualDate'] instanceof String)) {
            throw new Error("Expected the field `actualDate` to be a primitive type in the JSON string but got " + data['actualDate']);
        }
        if (data['forms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['forms'])) {
                throw new Error("Expected the field `forms` to be an array in the JSON data but got " + data['forms']);
            }
            // validate the optional field `forms` (array)
            for (const item of data['forms']) {
                ComponentsSchemasIntervalFormsItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Interval.prototype['studyKey'] = undefined;

/**
 * Unique system identifier for the interval (visit definition)
 * @member {Number} intervalId
 */
Interval.prototype['intervalId'] = undefined;

/**
 * Name of the interval (visit) as defined in the study
 * @member {String} intervalName
 */
Interval.prototype['intervalName'] = undefined;

/**
 * Description of the interval (visit)
 * @member {String} intervalDescription
 */
Interval.prototype['intervalDescription'] = undefined;

/**
 * Sequence number of the interval in the schedule
 * @member {Number} intervalSequence
 */
Interval.prototype['intervalSequence'] = undefined;

/**
 * Identifier for the interval group (if intervals are grouped)
 * @member {Number} intervalGroupId
 */
Interval.prototype['intervalGroupId'] = undefined;

/**
 * Name of the interval group
 * @member {String} intervalGroupName
 */
Interval.prototype['intervalGroupName'] = undefined;

/**
 * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
 * @member {String} timeline
 */
Interval.prototype['timeline'] = undefined;

/**
 * Baseline interval used for calculating this interval’s dates
 * @member {String} definedUsingInterval
 */
Interval.prototype['definedUsingInterval'] = undefined;

/**
 * Baseline form (name) from which the calculation date is taken
 * @member {String} windowCalculationForm
 */
Interval.prototype['windowCalculationForm'] = undefined;

/**
 * Baseline field (variable name) from which the calculation date is taken
 * @member {String} windowCalculationDate
 */
Interval.prototype['windowCalculationDate'] = undefined;

/**
 * Form used to capture the actual date for this interval
 * @member {String} actualDateForm
 */
Interval.prototype['actualDateForm'] = undefined;

/**
 * Field (variable name) used to capture the actual date for this interval
 * @member {String} actualDate
 */
Interval.prototype['actualDate'] = undefined;

/**
 * Number of days from the calculation date when the interval is due
 * @member {Number} dueDateWillBeIn
 */
Interval.prototype['dueDateWillBeIn'] = undefined;

/**
 * Number of days before the due date that are allowed (negative window)
 * @member {Number} negativeSlack
 */
Interval.prototype['negativeSlack'] = undefined;

/**
 * Number of days after the due date that are allowed (positive window)
 * @member {Number} positiveSlack
 */
Interval.prototype['positiveSlack'] = undefined;

/**
 * Number of days of grace period for ePRO completion after due date
 * @member {Number} eproGracePeriod
 */
Interval.prototype['eproGracePeriod'] = undefined;

/**
 * List of forms that are scheduled in this interval
 * @member {Array.<module:model/ComponentsSchemasIntervalFormsItem>} forms
 */
Interval.prototype['forms'] = undefined;

/**
 * Whether the interval is soft-deleted (disabled)
 * @member {Boolean} disabled
 */
Interval.prototype['disabled'] = undefined;

/**
 * Date when this interval was created
 * @member {String} dateCreated
 */
Interval.prototype['dateCreated'] = undefined;

/**
 * Date when this interval was last modified
 * @member {String} dateModified
 */
Interval.prototype['dateModified'] = undefined;






export default Interval;

