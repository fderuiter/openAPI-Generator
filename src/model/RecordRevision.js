/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecordRevision model module.
 * @module model/RecordRevision
 * @version 1.0.15
 */
class RecordRevision {
    /**
     * Constructs a new <code>RecordRevision</code>.
     * @alias module:model/RecordRevision
     */
    constructor() { 
        
        RecordRevision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordRevision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordRevision} obj Optional instance to populate.
     * @return {module:model/RecordRevision} The populated <code>RecordRevision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordRevision();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('recordRevisionId')) {
                obj['recordRevisionId'] = ApiClient.convertToType(data['recordRevisionId'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('recordOid')) {
                obj['recordOid'] = ApiClient.convertToType(data['recordOid'], 'String');
            }
            if (data.hasOwnProperty('recordRevision')) {
                obj['recordRevision'] = ApiClient.convertToType(data['recordRevision'], 'Number');
            }
            if (data.hasOwnProperty('dataRevision')) {
                obj['dataRevision'] = ApiClient.convertToType(data['dataRevision'], 'Number');
            }
            if (data.hasOwnProperty('recordStatus')) {
                obj['recordStatus'] = ApiClient.convertToType(data['recordStatus'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectOid')) {
                obj['subjectOid'] = ApiClient.convertToType(data['subjectOid'], 'String');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('reasonForChange')) {
                obj['reasonForChange'] = ApiClient.convertToType(data['reasonForChange'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordRevision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordRevision</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['recordOid'] && !(typeof data['recordOid'] === 'string' || data['recordOid'] instanceof String)) {
            throw new Error("Expected the field `recordOid` to be a primitive type in the JSON string but got " + data['recordOid']);
        }
        // ensure the json data is a string
        if (data['recordStatus'] && !(typeof data['recordStatus'] === 'string' || data['recordStatus'] instanceof String)) {
            throw new Error("Expected the field `recordStatus` to be a primitive type in the JSON string but got " + data['recordStatus']);
        }
        // ensure the json data is a string
        if (data['subjectOid'] && !(typeof data['subjectOid'] === 'string' || data['subjectOid'] instanceof String)) {
            throw new Error("Expected the field `subjectOid` to be a primitive type in the JSON string but got " + data['subjectOid']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['reasonForChange'] && !(typeof data['reasonForChange'] === 'string' || data['reasonForChange'] instanceof String)) {
            throw new Error("Expected the field `reasonForChange` to be a primitive type in the JSON string but got " + data['reasonForChange']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
RecordRevision.prototype['studyKey'] = undefined;

/**
 * Unique system identifier for the record revision
 * @member {Number} recordRevisionId
 */
RecordRevision.prototype['recordRevisionId'] = undefined;

/**
 * Unique system identifier of the related record
 * @member {Number} recordId
 */
RecordRevision.prototype['recordId'] = undefined;

/**
 * Client-assigned record OID (if any)
 * @member {String} recordOid
 */
RecordRevision.prototype['recordOid'] = undefined;

/**
 * Revision number of the record (version of the record status)
 * @member {Number} recordRevision
 */
RecordRevision.prototype['recordRevision'] = undefined;

/**
 * Revision number of the data within the record
 * @member {Number} dataRevision
 */
RecordRevision.prototype['dataRevision'] = undefined;

/**
 * Status of the record at this revision (user-defined status label)
 * @member {String} recordStatus
 */
RecordRevision.prototype['recordStatus'] = undefined;

/**
 * Mednet subject ID related to the record
 * @member {Number} subjectId
 */
RecordRevision.prototype['subjectId'] = undefined;

/**
 * Client-assigned subject OID related to the record
 * @member {String} subjectOid
 */
RecordRevision.prototype['subjectOid'] = undefined;

/**
 * Subject display ID related to the record
 * @member {String} subjectKey
 */
RecordRevision.prototype['subjectKey'] = undefined;

/**
 * Site ID related to the record
 * @member {Number} siteId
 */
RecordRevision.prototype['siteId'] = undefined;

/**
 * Form key of the form that the record belongs to
 * @member {String} formKey
 */
RecordRevision.prototype['formKey'] = undefined;

/**
 * Interval ID (visit definition) related to the record
 * @member {Number} intervalId
 */
RecordRevision.prototype['intervalId'] = undefined;

/**
 * Role name of the user who saved the record revision
 * @member {String} role
 */
RecordRevision.prototype['role'] = undefined;

/**
 * Username of the user who saved the record revision
 * @member {String} user
 */
RecordRevision.prototype['user'] = undefined;

/**
 * Reason for change, if provided (for audit trail)
 * @member {String} reasonForChange
 */
RecordRevision.prototype['reasonForChange'] = undefined;

/**
 * Whether the record was deleted in this revision
 * @member {Boolean} deleted
 */
RecordRevision.prototype['deleted'] = undefined;

/**
 * Date when this record revision was created
 * @member {String} dateCreated
 */
RecordRevision.prototype['dateCreated'] = undefined;






export default RecordRevision;

