/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComponentsSchemasRecordCreateRequestItem model module.
 * @module model/ComponentsSchemasRecordCreateRequestItem
 * @version 1.0.15
 */
class ComponentsSchemasRecordCreateRequestItem {
    /**
     * Constructs a new <code>ComponentsSchemasRecordCreateRequestItem</code>.
     * @alias module:model/ComponentsSchemasRecordCreateRequestItem
     * @param formKey {String} Form key identifying the eCRF to create or update
     * @param data {Object.<String, Object>} Key-value pairs of field names and values for the record data
     */
    constructor(formKey, data) { 
        
        ComponentsSchemasRecordCreateRequestItem.initialize(this, formKey, data);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, formKey, data) { 
        obj['formKey'] = formKey;
        obj['data'] = data;
    }

    /**
     * Constructs a <code>ComponentsSchemasRecordCreateRequestItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComponentsSchemasRecordCreateRequestItem} obj Optional instance to populate.
     * @return {module:model/ComponentsSchemasRecordCreateRequestItem} The populated <code>ComponentsSchemasRecordCreateRequestItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComponentsSchemasRecordCreateRequestItem();

            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectOid')) {
                obj['subjectOid'] = ApiClient.convertToType(data['subjectOid'], 'String');
            }
            if (data.hasOwnProperty('intervalName')) {
                obj['intervalName'] = ApiClient.convertToType(data['intervalName'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('recordOid')) {
                obj['recordOid'] = ApiClient.convertToType(data['recordOid'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComponentsSchemasRecordCreateRequestItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComponentsSchemasRecordCreateRequestItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ComponentsSchemasRecordCreateRequestItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['siteName'] && !(typeof data['siteName'] === 'string' || data['siteName'] instanceof String)) {
            throw new Error("Expected the field `siteName` to be a primitive type in the JSON string but got " + data['siteName']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        // ensure the json data is a string
        if (data['subjectOid'] && !(typeof data['subjectOid'] === 'string' || data['subjectOid'] instanceof String)) {
            throw new Error("Expected the field `subjectOid` to be a primitive type in the JSON string but got " + data['subjectOid']);
        }
        // ensure the json data is a string
        if (data['intervalName'] && !(typeof data['intervalName'] === 'string' || data['intervalName'] instanceof String)) {
            throw new Error("Expected the field `intervalName` to be a primitive type in the JSON string but got " + data['intervalName']);
        }
        // ensure the json data is a string
        if (data['recordOid'] && !(typeof data['recordOid'] === 'string' || data['recordOid'] instanceof String)) {
            throw new Error("Expected the field `recordOid` to be a primitive type in the JSON string but got " + data['recordOid']);
        }

        return true;
    }


}

ComponentsSchemasRecordCreateRequestItem.RequiredProperties = ["formKey", "data"];

/**
 * Form key identifying the eCRF to create or update
 * @member {String} formKey
 */
ComponentsSchemasRecordCreateRequestItem.prototype['formKey'] = undefined;

/**
 * Form ID identifying the eCRF to create or update (alternative to formKey)
 * @member {Number} formId
 */
ComponentsSchemasRecordCreateRequestItem.prototype['formId'] = undefined;

/**
 * Name of the site where the record should be created (for new subject registration)
 * @member {String} siteName
 */
ComponentsSchemasRecordCreateRequestItem.prototype['siteName'] = undefined;

/**
 * Site ID for the record (alternative to siteName)
 * @member {Number} siteId
 */
ComponentsSchemasRecordCreateRequestItem.prototype['siteId'] = undefined;

/**
 * Subject identifier (display ID) for which to create or update the record
 * @member {String} subjectKey
 */
ComponentsSchemasRecordCreateRequestItem.prototype['subjectKey'] = undefined;

/**
 * Subject ID for which to create or update the record (alternative to subjectKey)
 * @member {Number} subjectId
 */
ComponentsSchemasRecordCreateRequestItem.prototype['subjectId'] = undefined;

/**
 * Subject OID for which to create or update the record (alternative to subjectKey)
 * @member {String} subjectOid
 */
ComponentsSchemasRecordCreateRequestItem.prototype['subjectOid'] = undefined;

/**
 * Name of the interval (visit) for a scheduled record update
 * @member {String} intervalName
 */
ComponentsSchemasRecordCreateRequestItem.prototype['intervalName'] = undefined;

/**
 * Interval ID for a scheduled record update (alternative to intervalName)
 * @member {Number} intervalId
 */
ComponentsSchemasRecordCreateRequestItem.prototype['intervalId'] = undefined;

/**
 * Record ID for updating an existing unscheduled record (if applicable)
 * @member {Number} recordId
 */
ComponentsSchemasRecordCreateRequestItem.prototype['recordId'] = undefined;

/**
 * Record OID for updating an existing unscheduled record (if applicable)
 * @member {String} recordOid
 */
ComponentsSchemasRecordCreateRequestItem.prototype['recordOid'] = undefined;

/**
 * Key-value pairs of field names and values for the record data
 * @member {Object.<String, Object>} data
 */
ComponentsSchemasRecordCreateRequestItem.prototype['data'] = undefined;






export default ComponentsSchemasRecordCreateRequestItem;

