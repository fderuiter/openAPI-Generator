/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Site model module.
 * @module model/Site
 * @version 1.0.15
 */
class Site {
    /**
     * Constructs a new <code>Site</code>.
     * @alias module:model/Site
     */
    constructor() { 
        
        Site.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Site</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Site} obj Optional instance to populate.
     * @return {module:model/Site} The populated <code>Site</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Site();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
            if (data.hasOwnProperty('siteEnrollmentStatus')) {
                obj['siteEnrollmentStatus'] = ApiClient.convertToType(data['siteEnrollmentStatus'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Site</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Site</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['siteName'] && !(typeof data['siteName'] === 'string' || data['siteName'] instanceof String)) {
            throw new Error("Expected the field `siteName` to be a primitive type in the JSON string but got " + data['siteName']);
        }
        // ensure the json data is a string
        if (data['siteEnrollmentStatus'] && !(typeof data['siteEnrollmentStatus'] === 'string' || data['siteEnrollmentStatus'] instanceof String)) {
            throw new Error("Expected the field `siteEnrollmentStatus` to be a primitive type in the JSON string but got " + data['siteEnrollmentStatus']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Site.prototype['studyKey'] = undefined;

/**
 * Unique site ID
 * @member {Number} siteId
 */
Site.prototype['siteId'] = undefined;

/**
 * Name of the site
 * @member {String} siteName
 */
Site.prototype['siteName'] = undefined;

/**
 * Enrollment status of the site
 * @member {String} siteEnrollmentStatus
 */
Site.prototype['siteEnrollmentStatus'] = undefined;

/**
 * Date when this site was created
 * @member {String} dateCreated
 */
Site.prototype['dateCreated'] = undefined;

/**
 * Date when this site was last modified
 * @member {String} dateModified
 */
Site.prototype['dateModified'] = undefined;






export default Site;

