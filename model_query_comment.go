/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryComment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryComment{}

// QueryComment struct for QueryComment
type QueryComment struct {
	// Sequence number of the comment/action in the query history
	Sequence *int32 `json:"sequence,omitempty"`
	// Status of the query after this comment (e.g., Open, Closed)
	AnnotationStatus *string `json:"annotationStatus,omitempty"`
	// Username of the user who made the comment or action
	User *string `json:"user,omitempty"`
	// Text of the comment
	Comment *string `json:"comment,omitempty"`
	// Whether the query was marked closed at this step
	Closed *bool `json:"closed,omitempty"`
	// Date of the comment or action
	Date *string `json:"date,omitempty"`
}

// NewQueryComment instantiates a new QueryComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryComment() *QueryComment {
	this := QueryComment{}
	return &this
}

// NewQueryCommentWithDefaults instantiates a new QueryComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryCommentWithDefaults() *QueryComment {
	this := QueryComment{}
	return &this
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *QueryComment) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *QueryComment) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *QueryComment) SetSequence(v int32) {
	o.Sequence = &v
}

// GetAnnotationStatus returns the AnnotationStatus field value if set, zero value otherwise.
func (o *QueryComment) GetAnnotationStatus() string {
	if o == nil || IsNil(o.AnnotationStatus) {
		var ret string
		return ret
	}
	return *o.AnnotationStatus
}

// GetAnnotationStatusOk returns a tuple with the AnnotationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetAnnotationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationStatus) {
		return nil, false
	}
	return o.AnnotationStatus, true
}

// HasAnnotationStatus returns a boolean if a field has been set.
func (o *QueryComment) HasAnnotationStatus() bool {
	if o != nil && !IsNil(o.AnnotationStatus) {
		return true
	}

	return false
}

// SetAnnotationStatus gets a reference to the given string and assigns it to the AnnotationStatus field.
func (o *QueryComment) SetAnnotationStatus(v string) {
	o.AnnotationStatus = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *QueryComment) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *QueryComment) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *QueryComment) SetUser(v string) {
	o.User = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *QueryComment) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *QueryComment) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *QueryComment) SetComment(v string) {
	o.Comment = &v
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *QueryComment) GetClosed() bool {
	if o == nil || IsNil(o.Closed) {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.Closed) {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *QueryComment) HasClosed() bool {
	if o != nil && !IsNil(o.Closed) {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *QueryComment) SetClosed(v bool) {
	o.Closed = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *QueryComment) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryComment) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *QueryComment) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *QueryComment) SetDate(v string) {
	o.Date = &v
}

func (o QueryComment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryComment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.AnnotationStatus) {
		toSerialize["annotationStatus"] = o.AnnotationStatus
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Closed) {
		toSerialize["closed"] = o.Closed
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableQueryComment struct {
	value *QueryComment
	isSet bool
}

func (v NullableQueryComment) Get() *QueryComment {
	return v.value
}

func (v *NullableQueryComment) Set(val *QueryComment) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryComment) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryComment(val *QueryComment) *NullableQueryComment {
	return &NullableQueryComment{value: val, isSet: true}
}

func (v NullableQueryComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


