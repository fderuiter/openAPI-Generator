/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ComponentsSchemasRecordCreateRequestItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentsSchemasRecordCreateRequestItem{}

// ComponentsSchemasRecordCreateRequestItem struct for ComponentsSchemasRecordCreateRequestItem
type ComponentsSchemasRecordCreateRequestItem struct {
	// Form key identifying the eCRF to create or update
	FormKey string `json:"formKey"`
	// Form ID identifying the eCRF to create or update (alternative to formKey)
	FormId *int32 `json:"formId,omitempty"`
	// Name of the site where the record should be created (for new subject registration)
	SiteName *string `json:"siteName,omitempty"`
	// Site ID for the record (alternative to siteName)
	SiteId *int32 `json:"siteId,omitempty"`
	// Subject identifier (display ID) for which to create or update the record
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Subject ID for which to create or update the record (alternative to subjectKey)
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Subject OID for which to create or update the record (alternative to subjectKey)
	SubjectOid *string `json:"subjectOid,omitempty"`
	// Name of the interval (visit) for a scheduled record update
	IntervalName *string `json:"intervalName,omitempty"`
	// Interval ID for a scheduled record update (alternative to intervalName)
	IntervalId *int32 `json:"intervalId,omitempty"`
	// Record ID for updating an existing unscheduled record (if applicable)
	RecordId *int32 `json:"recordId,omitempty"`
	// Record OID for updating an existing unscheduled record (if applicable)
	RecordOid *string `json:"recordOid,omitempty"`
	// Key-value pairs of field names and values for the record data
	Data map[string]interface{} `json:"data"`
}

type _ComponentsSchemasRecordCreateRequestItem ComponentsSchemasRecordCreateRequestItem

// NewComponentsSchemasRecordCreateRequestItem instantiates a new ComponentsSchemasRecordCreateRequestItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentsSchemasRecordCreateRequestItem(formKey string, data map[string]interface{}) *ComponentsSchemasRecordCreateRequestItem {
	this := ComponentsSchemasRecordCreateRequestItem{}
	this.FormKey = formKey
	this.Data = data
	return &this
}

// NewComponentsSchemasRecordCreateRequestItemWithDefaults instantiates a new ComponentsSchemasRecordCreateRequestItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentsSchemasRecordCreateRequestItemWithDefaults() *ComponentsSchemasRecordCreateRequestItem {
	this := ComponentsSchemasRecordCreateRequestItem{}
	return &this
}

// GetFormKey returns the FormKey field value
func (o *ComponentsSchemasRecordCreateRequestItem) GetFormKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetFormKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FormKey, true
}

// SetFormKey sets field value
func (o *ComponentsSchemasRecordCreateRequestItem) SetFormKey(v string) {
	o.FormKey = v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetFormId() int32 {
	if o == nil || IsNil(o.FormId) {
		var ret int32
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetFormIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given int32 and assigns it to the FormId field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetFormId(v int32) {
	o.FormId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectOid returns the SubjectOid field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectOid() string {
	if o == nil || IsNil(o.SubjectOid) {
		var ret string
		return ret
	}
	return *o.SubjectOid
}

// GetSubjectOidOk returns a tuple with the SubjectOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetSubjectOidOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOid) {
		return nil, false
	}
	return o.SubjectOid, true
}

// HasSubjectOid returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasSubjectOid() bool {
	if o != nil && !IsNil(o.SubjectOid) {
		return true
	}

	return false
}

// SetSubjectOid gets a reference to the given string and assigns it to the SubjectOid field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetSubjectOid(v string) {
	o.SubjectOid = &v
}

// GetIntervalName returns the IntervalName field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetIntervalName() string {
	if o == nil || IsNil(o.IntervalName) {
		var ret string
		return ret
	}
	return *o.IntervalName
}

// GetIntervalNameOk returns a tuple with the IntervalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetIntervalNameOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalName) {
		return nil, false
	}
	return o.IntervalName, true
}

// HasIntervalName returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasIntervalName() bool {
	if o != nil && !IsNil(o.IntervalName) {
		return true
	}

	return false
}

// SetIntervalName gets a reference to the given string and assigns it to the IntervalName field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetIntervalName(v string) {
	o.IntervalName = &v
}

// GetIntervalId returns the IntervalId field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetIntervalId() int32 {
	if o == nil || IsNil(o.IntervalId) {
		var ret int32
		return ret
	}
	return *o.IntervalId
}

// GetIntervalIdOk returns a tuple with the IntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalId) {
		return nil, false
	}
	return o.IntervalId, true
}

// HasIntervalId returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasIntervalId() bool {
	if o != nil && !IsNil(o.IntervalId) {
		return true
	}

	return false
}

// SetIntervalId gets a reference to the given int32 and assigns it to the IntervalId field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetIntervalId(v int32) {
	o.IntervalId = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetRecordId() int32 {
	if o == nil || IsNil(o.RecordId) {
		var ret int32
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given int32 and assigns it to the RecordId field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetRecordId(v int32) {
	o.RecordId = &v
}

// GetRecordOid returns the RecordOid field value if set, zero value otherwise.
func (o *ComponentsSchemasRecordCreateRequestItem) GetRecordOid() string {
	if o == nil || IsNil(o.RecordOid) {
		var ret string
		return ret
	}
	return *o.RecordOid
}

// GetRecordOidOk returns a tuple with the RecordOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetRecordOidOk() (*string, bool) {
	if o == nil || IsNil(o.RecordOid) {
		return nil, false
	}
	return o.RecordOid, true
}

// HasRecordOid returns a boolean if a field has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) HasRecordOid() bool {
	if o != nil && !IsNil(o.RecordOid) {
		return true
	}

	return false
}

// SetRecordOid gets a reference to the given string and assigns it to the RecordOid field.
func (o *ComponentsSchemasRecordCreateRequestItem) SetRecordOid(v string) {
	o.RecordOid = &v
}

// GetData returns the Data field value
func (o *ComponentsSchemasRecordCreateRequestItem) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ComponentsSchemasRecordCreateRequestItem) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ComponentsSchemasRecordCreateRequestItem) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o ComponentsSchemasRecordCreateRequestItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentsSchemasRecordCreateRequestItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["formKey"] = o.FormKey
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectOid) {
		toSerialize["subjectOid"] = o.SubjectOid
	}
	if !IsNil(o.IntervalName) {
		toSerialize["intervalName"] = o.IntervalName
	}
	if !IsNil(o.IntervalId) {
		toSerialize["intervalId"] = o.IntervalId
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.RecordOid) {
		toSerialize["recordOid"] = o.RecordOid
	}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ComponentsSchemasRecordCreateRequestItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"formKey",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentsSchemasRecordCreateRequestItem := _ComponentsSchemasRecordCreateRequestItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComponentsSchemasRecordCreateRequestItem)

	if err != nil {
		return err
	}

	*o = ComponentsSchemasRecordCreateRequestItem(varComponentsSchemasRecordCreateRequestItem)

	return err
}

type NullableComponentsSchemasRecordCreateRequestItem struct {
	value *ComponentsSchemasRecordCreateRequestItem
	isSet bool
}

func (v NullableComponentsSchemasRecordCreateRequestItem) Get() *ComponentsSchemasRecordCreateRequestItem {
	return v.value
}

func (v *NullableComponentsSchemasRecordCreateRequestItem) Set(val *ComponentsSchemasRecordCreateRequestItem) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentsSchemasRecordCreateRequestItem) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentsSchemasRecordCreateRequestItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentsSchemasRecordCreateRequestItem(val *ComponentsSchemasRecordCreateRequestItem) *NullableComponentsSchemasRecordCreateRequestItem {
	return &NullableComponentsSchemasRecordCreateRequestItem{value: val, isSet: true}
}

func (v NullableComponentsSchemasRecordCreateRequestItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentsSchemasRecordCreateRequestItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


