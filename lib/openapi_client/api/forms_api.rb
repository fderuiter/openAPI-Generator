=begin
#Mednet EDC API

#The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.0.15

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class FormsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List forms in a study
    # @param study_key [String] Study key identifying the study context for the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page index to retrieve (0-based) (default to 0)
    # @option opts [Integer] :size Number of items to return per page (max 500) (default to 25)
    # @option opts [String] :sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
    # @option opts [String] :filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
    # @return [FormList]
    def list_forms(study_key, opts = {})
      data, _status_code, _headers = list_forms_with_http_info(study_key, opts)
      data
    end

    # List forms in a study
    # @param study_key [String] Study key identifying the study context for the request
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page index to retrieve (0-based) (default to 0)
    # @option opts [Integer] :size Number of items to return per page (max 500) (default to 25)
    # @option opts [String] :sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
    # @option opts [String] :filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
    # @return [Array<(FormList, Integer, Hash)>] FormList data, response status code and response headers
    def list_forms_with_http_info(study_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormsApi.list_forms ...'
      end
      # verify the required parameter 'study_key' is set
      if @api_client.config.client_side_validation && study_key.nil?
        fail ArgumentError, "Missing the required parameter 'study_key' when calling FormsApi.list_forms"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling FormsApi.list_forms, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling FormsApi.list_forms, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling FormsApi.list_forms, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/studies/{studyKey}/forms'.sub('{' + 'studyKey' + '}', CGI.escape(study_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FormList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'securityKeyAuth']

      new_options = opts.merge(
        :operation => :"FormsApi.list_forms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormsApi#list_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
