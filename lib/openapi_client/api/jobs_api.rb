=begin
#Mednet EDC API

#The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.0.15

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'cgi'

module OpenapiClient
  class JobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve job status by batch ID
    # @param study_key [String] Study key identifying the study context for the request
    # @param batch_id [String] Batch ID of the job to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def get_job_status(study_key, batch_id, opts = {})
      data, _status_code, _headers = get_job_status_with_http_info(study_key, batch_id, opts)
      data
    end

    # Retrieve job status by batch ID
    # @param study_key [String] Study key identifying the study context for the request
    # @param batch_id [String] Batch ID of the job to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def get_job_status_with_http_info(study_key, batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobsApi.get_job_status ...'
      end
      # verify the required parameter 'study_key' is set
      if @api_client.config.client_side_validation && study_key.nil?
        fail ArgumentError, "Missing the required parameter 'study_key' when calling JobsApi.get_job_status"
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling JobsApi.get_job_status"
      end
      # resource path
      local_var_path = '/studies/{studyKey}/jobs/{batchId}'.sub('{' + 'studyKey' + '}', CGI.escape(study_key.to_s)).sub('{' + 'batchId' + '}', CGI.escape(batch_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'securityKeyAuth']

      new_options = opts.merge(
        :operation => :"JobsApi.get_job_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#get_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
