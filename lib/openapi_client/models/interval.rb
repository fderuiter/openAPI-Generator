=begin
#Mednet EDC API

#The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.0.15

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Interval
    # Unique study key
    attr_accessor :study_key

    # Unique system identifier for the interval (visit definition)
    attr_accessor :interval_id

    # Name of the interval (visit) as defined in the study
    attr_accessor :interval_name

    # Description of the interval (visit)
    attr_accessor :interval_description

    # Sequence number of the interval in the schedule
    attr_accessor :interval_sequence

    # Identifier for the interval group (if intervals are grouped)
    attr_accessor :interval_group_id

    # Name of the interval group
    attr_accessor :interval_group_name

    # Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    attr_accessor :timeline

    # Baseline interval used for calculating this intervalâ€™s dates
    attr_accessor :defined_using_interval

    # Baseline form (name) from which the calculation date is taken
    attr_accessor :window_calculation_form

    # Baseline field (variable name) from which the calculation date is taken
    attr_accessor :window_calculation_date

    # Form used to capture the actual date for this interval
    attr_accessor :actual_date_form

    # Field (variable name) used to capture the actual date for this interval
    attr_accessor :actual_date

    # Number of days from the calculation date when the interval is due
    attr_accessor :due_date_will_be_in

    # Number of days before the due date that are allowed (negative window)
    attr_accessor :negative_slack

    # Number of days after the due date that are allowed (positive window)
    attr_accessor :positive_slack

    # Number of days of grace period for ePRO completion after due date
    attr_accessor :epro_grace_period

    # List of forms that are scheduled in this interval
    attr_accessor :forms

    # Whether the interval is soft-deleted (disabled)
    attr_accessor :disabled

    # Date when this interval was created
    attr_accessor :date_created

    # Date when this interval was last modified
    attr_accessor :date_modified

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'study_key' => :'studyKey',
        :'interval_id' => :'intervalId',
        :'interval_name' => :'intervalName',
        :'interval_description' => :'intervalDescription',
        :'interval_sequence' => :'intervalSequence',
        :'interval_group_id' => :'intervalGroupId',
        :'interval_group_name' => :'intervalGroupName',
        :'timeline' => :'timeline',
        :'defined_using_interval' => :'definedUsingInterval',
        :'window_calculation_form' => :'windowCalculationForm',
        :'window_calculation_date' => :'windowCalculationDate',
        :'actual_date_form' => :'actualDateForm',
        :'actual_date' => :'actualDate',
        :'due_date_will_be_in' => :'dueDateWillBeIn',
        :'negative_slack' => :'negativeSlack',
        :'positive_slack' => :'positiveSlack',
        :'epro_grace_period' => :'eproGracePeriod',
        :'forms' => :'forms',
        :'disabled' => :'disabled',
        :'date_created' => :'dateCreated',
        :'date_modified' => :'dateModified'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'study_key' => :'String',
        :'interval_id' => :'Integer',
        :'interval_name' => :'String',
        :'interval_description' => :'String',
        :'interval_sequence' => :'Integer',
        :'interval_group_id' => :'Integer',
        :'interval_group_name' => :'String',
        :'timeline' => :'String',
        :'defined_using_interval' => :'String',
        :'window_calculation_form' => :'String',
        :'window_calculation_date' => :'String',
        :'actual_date_form' => :'String',
        :'actual_date' => :'String',
        :'due_date_will_be_in' => :'Integer',
        :'negative_slack' => :'Integer',
        :'positive_slack' => :'Integer',
        :'epro_grace_period' => :'Integer',
        :'forms' => :'Array<ComponentsSchemasIntervalFormsItem>',
        :'disabled' => :'Boolean',
        :'date_created' => :'String',
        :'date_modified' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Interval` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Interval`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'study_key')
        self.study_key = attributes[:'study_key']
      end

      if attributes.key?(:'interval_id')
        self.interval_id = attributes[:'interval_id']
      end

      if attributes.key?(:'interval_name')
        self.interval_name = attributes[:'interval_name']
      end

      if attributes.key?(:'interval_description')
        self.interval_description = attributes[:'interval_description']
      end

      if attributes.key?(:'interval_sequence')
        self.interval_sequence = attributes[:'interval_sequence']
      end

      if attributes.key?(:'interval_group_id')
        self.interval_group_id = attributes[:'interval_group_id']
      end

      if attributes.key?(:'interval_group_name')
        self.interval_group_name = attributes[:'interval_group_name']
      end

      if attributes.key?(:'timeline')
        self.timeline = attributes[:'timeline']
      end

      if attributes.key?(:'defined_using_interval')
        self.defined_using_interval = attributes[:'defined_using_interval']
      end

      if attributes.key?(:'window_calculation_form')
        self.window_calculation_form = attributes[:'window_calculation_form']
      end

      if attributes.key?(:'window_calculation_date')
        self.window_calculation_date = attributes[:'window_calculation_date']
      end

      if attributes.key?(:'actual_date_form')
        self.actual_date_form = attributes[:'actual_date_form']
      end

      if attributes.key?(:'actual_date')
        self.actual_date = attributes[:'actual_date']
      end

      if attributes.key?(:'due_date_will_be_in')
        self.due_date_will_be_in = attributes[:'due_date_will_be_in']
      end

      if attributes.key?(:'negative_slack')
        self.negative_slack = attributes[:'negative_slack']
      end

      if attributes.key?(:'positive_slack')
        self.positive_slack = attributes[:'positive_slack']
      end

      if attributes.key?(:'epro_grace_period')
        self.epro_grace_period = attributes[:'epro_grace_period']
      end

      if attributes.key?(:'forms')
        if (value = attributes[:'forms']).is_a?(Array)
          self.forms = value
        end
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          study_key == o.study_key &&
          interval_id == o.interval_id &&
          interval_name == o.interval_name &&
          interval_description == o.interval_description &&
          interval_sequence == o.interval_sequence &&
          interval_group_id == o.interval_group_id &&
          interval_group_name == o.interval_group_name &&
          timeline == o.timeline &&
          defined_using_interval == o.defined_using_interval &&
          window_calculation_form == o.window_calculation_form &&
          window_calculation_date == o.window_calculation_date &&
          actual_date_form == o.actual_date_form &&
          actual_date == o.actual_date &&
          due_date_will_be_in == o.due_date_will_be_in &&
          negative_slack == o.negative_slack &&
          positive_slack == o.positive_slack &&
          epro_grace_period == o.epro_grace_period &&
          forms == o.forms &&
          disabled == o.disabled &&
          date_created == o.date_created &&
          date_modified == o.date_modified
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, interval_id, interval_name, interval_description, interval_sequence, interval_group_id, interval_group_name, timeline, defined_using_interval, window_calculation_form, window_calculation_date, actual_date_form, actual_date, due_date_will_be_in, negative_slack, positive_slack, epro_grace_period, forms, disabled, date_created, date_modified].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
