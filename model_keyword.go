/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Keyword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Keyword{}

// Keyword struct for Keyword
type Keyword struct {
	// Name of the keyword
	KeywordName *string `json:"keywordName,omitempty"`
	// Key of the keyword (short code)
	KeywordKey *string `json:"keywordKey,omitempty"`
	// Internal keyword ID
	KeywordId *int32 `json:"keywordId,omitempty"`
	// Date when this keyword was added
	DateAdded *string `json:"dateAdded,omitempty"`
}

// NewKeyword instantiates a new Keyword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyword() *Keyword {
	this := Keyword{}
	return &this
}

// NewKeywordWithDefaults instantiates a new Keyword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeywordWithDefaults() *Keyword {
	this := Keyword{}
	return &this
}

// GetKeywordName returns the KeywordName field value if set, zero value otherwise.
func (o *Keyword) GetKeywordName() string {
	if o == nil || IsNil(o.KeywordName) {
		var ret string
		return ret
	}
	return *o.KeywordName
}

// GetKeywordNameOk returns a tuple with the KeywordName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetKeywordNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeywordName) {
		return nil, false
	}
	return o.KeywordName, true
}

// HasKeywordName returns a boolean if a field has been set.
func (o *Keyword) HasKeywordName() bool {
	if o != nil && !IsNil(o.KeywordName) {
		return true
	}

	return false
}

// SetKeywordName gets a reference to the given string and assigns it to the KeywordName field.
func (o *Keyword) SetKeywordName(v string) {
	o.KeywordName = &v
}

// GetKeywordKey returns the KeywordKey field value if set, zero value otherwise.
func (o *Keyword) GetKeywordKey() string {
	if o == nil || IsNil(o.KeywordKey) {
		var ret string
		return ret
	}
	return *o.KeywordKey
}

// GetKeywordKeyOk returns a tuple with the KeywordKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetKeywordKeyOk() (*string, bool) {
	if o == nil || IsNil(o.KeywordKey) {
		return nil, false
	}
	return o.KeywordKey, true
}

// HasKeywordKey returns a boolean if a field has been set.
func (o *Keyword) HasKeywordKey() bool {
	if o != nil && !IsNil(o.KeywordKey) {
		return true
	}

	return false
}

// SetKeywordKey gets a reference to the given string and assigns it to the KeywordKey field.
func (o *Keyword) SetKeywordKey(v string) {
	o.KeywordKey = &v
}

// GetKeywordId returns the KeywordId field value if set, zero value otherwise.
func (o *Keyword) GetKeywordId() int32 {
	if o == nil || IsNil(o.KeywordId) {
		var ret int32
		return ret
	}
	return *o.KeywordId
}

// GetKeywordIdOk returns a tuple with the KeywordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetKeywordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.KeywordId) {
		return nil, false
	}
	return o.KeywordId, true
}

// HasKeywordId returns a boolean if a field has been set.
func (o *Keyword) HasKeywordId() bool {
	if o != nil && !IsNil(o.KeywordId) {
		return true
	}

	return false
}

// SetKeywordId gets a reference to the given int32 and assigns it to the KeywordId field.
func (o *Keyword) SetKeywordId(v int32) {
	o.KeywordId = &v
}

// GetDateAdded returns the DateAdded field value if set, zero value otherwise.
func (o *Keyword) GetDateAdded() string {
	if o == nil || IsNil(o.DateAdded) {
		var ret string
		return ret
	}
	return *o.DateAdded
}

// GetDateAddedOk returns a tuple with the DateAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Keyword) GetDateAddedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAdded) {
		return nil, false
	}
	return o.DateAdded, true
}

// HasDateAdded returns a boolean if a field has been set.
func (o *Keyword) HasDateAdded() bool {
	if o != nil && !IsNil(o.DateAdded) {
		return true
	}

	return false
}

// SetDateAdded gets a reference to the given string and assigns it to the DateAdded field.
func (o *Keyword) SetDateAdded(v string) {
	o.DateAdded = &v
}

func (o Keyword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Keyword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeywordName) {
		toSerialize["keywordName"] = o.KeywordName
	}
	if !IsNil(o.KeywordKey) {
		toSerialize["keywordKey"] = o.KeywordKey
	}
	if !IsNil(o.KeywordId) {
		toSerialize["keywordId"] = o.KeywordId
	}
	if !IsNil(o.DateAdded) {
		toSerialize["dateAdded"] = o.DateAdded
	}
	return toSerialize, nil
}

type NullableKeyword struct {
	value *Keyword
	isSet bool
}

func (v NullableKeyword) Get() *Keyword {
	return v.value
}

func (v *NullableKeyword) Set(val *Keyword) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyword) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyword(val *Keyword) *NullableKeyword {
	return &NullableKeyword{value: val, isSet: true}
}

func (v NullableKeyword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


