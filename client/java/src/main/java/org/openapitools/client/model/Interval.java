/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComponentsSchemasIntervalFormsItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Interval
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Interval {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_INTERVAL_ID = "intervalId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ID)
  @javax.annotation.Nullable
  private Integer intervalId;

  public static final String SERIALIZED_NAME_INTERVAL_NAME = "intervalName";
  @SerializedName(SERIALIZED_NAME_INTERVAL_NAME)
  @javax.annotation.Nullable
  private String intervalName;

  public static final String SERIALIZED_NAME_INTERVAL_DESCRIPTION = "intervalDescription";
  @SerializedName(SERIALIZED_NAME_INTERVAL_DESCRIPTION)
  @javax.annotation.Nullable
  private String intervalDescription;

  public static final String SERIALIZED_NAME_INTERVAL_SEQUENCE = "intervalSequence";
  @SerializedName(SERIALIZED_NAME_INTERVAL_SEQUENCE)
  @javax.annotation.Nullable
  private Integer intervalSequence;

  public static final String SERIALIZED_NAME_INTERVAL_GROUP_ID = "intervalGroupId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_GROUP_ID)
  @javax.annotation.Nullable
  private Integer intervalGroupId;

  public static final String SERIALIZED_NAME_INTERVAL_GROUP_NAME = "intervalGroupName";
  @SerializedName(SERIALIZED_NAME_INTERVAL_GROUP_NAME)
  @javax.annotation.Nullable
  private String intervalGroupName;

  public static final String SERIALIZED_NAME_TIMELINE = "timeline";
  @SerializedName(SERIALIZED_NAME_TIMELINE)
  @javax.annotation.Nullable
  private String timeline;

  public static final String SERIALIZED_NAME_DEFINED_USING_INTERVAL = "definedUsingInterval";
  @SerializedName(SERIALIZED_NAME_DEFINED_USING_INTERVAL)
  @javax.annotation.Nullable
  private String definedUsingInterval;

  public static final String SERIALIZED_NAME_WINDOW_CALCULATION_FORM = "windowCalculationForm";
  @SerializedName(SERIALIZED_NAME_WINDOW_CALCULATION_FORM)
  @javax.annotation.Nullable
  private String windowCalculationForm;

  public static final String SERIALIZED_NAME_WINDOW_CALCULATION_DATE = "windowCalculationDate";
  @SerializedName(SERIALIZED_NAME_WINDOW_CALCULATION_DATE)
  @javax.annotation.Nullable
  private String windowCalculationDate;

  public static final String SERIALIZED_NAME_ACTUAL_DATE_FORM = "actualDateForm";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DATE_FORM)
  @javax.annotation.Nullable
  private String actualDateForm;

  public static final String SERIALIZED_NAME_ACTUAL_DATE = "actualDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DATE)
  @javax.annotation.Nullable
  private String actualDate;

  public static final String SERIALIZED_NAME_DUE_DATE_WILL_BE_IN = "dueDateWillBeIn";
  @SerializedName(SERIALIZED_NAME_DUE_DATE_WILL_BE_IN)
  @javax.annotation.Nullable
  private Integer dueDateWillBeIn;

  public static final String SERIALIZED_NAME_NEGATIVE_SLACK = "negativeSlack";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_SLACK)
  @javax.annotation.Nullable
  private Integer negativeSlack;

  public static final String SERIALIZED_NAME_POSITIVE_SLACK = "positiveSlack";
  @SerializedName(SERIALIZED_NAME_POSITIVE_SLACK)
  @javax.annotation.Nullable
  private Integer positiveSlack;

  public static final String SERIALIZED_NAME_EPRO_GRACE_PERIOD = "eproGracePeriod";
  @SerializedName(SERIALIZED_NAME_EPRO_GRACE_PERIOD)
  @javax.annotation.Nullable
  private Integer eproGracePeriod;

  public static final String SERIALIZED_NAME_FORMS = "forms";
  @SerializedName(SERIALIZED_NAME_FORMS)
  @javax.annotation.Nullable
  private List<ComponentsSchemasIntervalFormsItem> forms = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  @javax.annotation.Nullable
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public Interval() {
  }

  public Interval studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Interval intervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

  /**
   * Unique system identifier for the interval (visit definition)
   * @return intervalId
   */
  @javax.annotation.Nullable
  public Integer getIntervalId() {
    return intervalId;
  }

  public void setIntervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
  }


  public Interval intervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

  /**
   * Name of the interval (visit) as defined in the study
   * @return intervalName
   */
  @javax.annotation.Nullable
  public String getIntervalName() {
    return intervalName;
  }

  public void setIntervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
  }


  public Interval intervalDescription(@javax.annotation.Nullable String intervalDescription) {
    this.intervalDescription = intervalDescription;
    return this;
  }

  /**
   * Description of the interval (visit)
   * @return intervalDescription
   */
  @javax.annotation.Nullable
  public String getIntervalDescription() {
    return intervalDescription;
  }

  public void setIntervalDescription(@javax.annotation.Nullable String intervalDescription) {
    this.intervalDescription = intervalDescription;
  }


  public Interval intervalSequence(@javax.annotation.Nullable Integer intervalSequence) {
    this.intervalSequence = intervalSequence;
    return this;
  }

  /**
   * Sequence number of the interval in the schedule
   * @return intervalSequence
   */
  @javax.annotation.Nullable
  public Integer getIntervalSequence() {
    return intervalSequence;
  }

  public void setIntervalSequence(@javax.annotation.Nullable Integer intervalSequence) {
    this.intervalSequence = intervalSequence;
  }


  public Interval intervalGroupId(@javax.annotation.Nullable Integer intervalGroupId) {
    this.intervalGroupId = intervalGroupId;
    return this;
  }

  /**
   * Identifier for the interval group (if intervals are grouped)
   * @return intervalGroupId
   */
  @javax.annotation.Nullable
  public Integer getIntervalGroupId() {
    return intervalGroupId;
  }

  public void setIntervalGroupId(@javax.annotation.Nullable Integer intervalGroupId) {
    this.intervalGroupId = intervalGroupId;
  }


  public Interval intervalGroupName(@javax.annotation.Nullable String intervalGroupName) {
    this.intervalGroupName = intervalGroupName;
    return this;
  }

  /**
   * Name of the interval group
   * @return intervalGroupName
   */
  @javax.annotation.Nullable
  public String getIntervalGroupName() {
    return intervalGroupName;
  }

  public void setIntervalGroupName(@javax.annotation.Nullable String intervalGroupName) {
    this.intervalGroupName = intervalGroupName;
  }


  public Interval timeline(@javax.annotation.Nullable String timeline) {
    this.timeline = timeline;
    return this;
  }

  /**
   * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
   * @return timeline
   */
  @javax.annotation.Nullable
  public String getTimeline() {
    return timeline;
  }

  public void setTimeline(@javax.annotation.Nullable String timeline) {
    this.timeline = timeline;
  }


  public Interval definedUsingInterval(@javax.annotation.Nullable String definedUsingInterval) {
    this.definedUsingInterval = definedUsingInterval;
    return this;
  }

  /**
   * Baseline interval used for calculating this intervalâ€™s dates
   * @return definedUsingInterval
   */
  @javax.annotation.Nullable
  public String getDefinedUsingInterval() {
    return definedUsingInterval;
  }

  public void setDefinedUsingInterval(@javax.annotation.Nullable String definedUsingInterval) {
    this.definedUsingInterval = definedUsingInterval;
  }


  public Interval windowCalculationForm(@javax.annotation.Nullable String windowCalculationForm) {
    this.windowCalculationForm = windowCalculationForm;
    return this;
  }

  /**
   * Baseline form (name) from which the calculation date is taken
   * @return windowCalculationForm
   */
  @javax.annotation.Nullable
  public String getWindowCalculationForm() {
    return windowCalculationForm;
  }

  public void setWindowCalculationForm(@javax.annotation.Nullable String windowCalculationForm) {
    this.windowCalculationForm = windowCalculationForm;
  }


  public Interval windowCalculationDate(@javax.annotation.Nullable String windowCalculationDate) {
    this.windowCalculationDate = windowCalculationDate;
    return this;
  }

  /**
   * Baseline field (variable name) from which the calculation date is taken
   * @return windowCalculationDate
   */
  @javax.annotation.Nullable
  public String getWindowCalculationDate() {
    return windowCalculationDate;
  }

  public void setWindowCalculationDate(@javax.annotation.Nullable String windowCalculationDate) {
    this.windowCalculationDate = windowCalculationDate;
  }


  public Interval actualDateForm(@javax.annotation.Nullable String actualDateForm) {
    this.actualDateForm = actualDateForm;
    return this;
  }

  /**
   * Form used to capture the actual date for this interval
   * @return actualDateForm
   */
  @javax.annotation.Nullable
  public String getActualDateForm() {
    return actualDateForm;
  }

  public void setActualDateForm(@javax.annotation.Nullable String actualDateForm) {
    this.actualDateForm = actualDateForm;
  }


  public Interval actualDate(@javax.annotation.Nullable String actualDate) {
    this.actualDate = actualDate;
    return this;
  }

  /**
   * Field (variable name) used to capture the actual date for this interval
   * @return actualDate
   */
  @javax.annotation.Nullable
  public String getActualDate() {
    return actualDate;
  }

  public void setActualDate(@javax.annotation.Nullable String actualDate) {
    this.actualDate = actualDate;
  }


  public Interval dueDateWillBeIn(@javax.annotation.Nullable Integer dueDateWillBeIn) {
    this.dueDateWillBeIn = dueDateWillBeIn;
    return this;
  }

  /**
   * Number of days from the calculation date when the interval is due
   * @return dueDateWillBeIn
   */
  @javax.annotation.Nullable
  public Integer getDueDateWillBeIn() {
    return dueDateWillBeIn;
  }

  public void setDueDateWillBeIn(@javax.annotation.Nullable Integer dueDateWillBeIn) {
    this.dueDateWillBeIn = dueDateWillBeIn;
  }


  public Interval negativeSlack(@javax.annotation.Nullable Integer negativeSlack) {
    this.negativeSlack = negativeSlack;
    return this;
  }

  /**
   * Number of days before the due date that are allowed (negative window)
   * @return negativeSlack
   */
  @javax.annotation.Nullable
  public Integer getNegativeSlack() {
    return negativeSlack;
  }

  public void setNegativeSlack(@javax.annotation.Nullable Integer negativeSlack) {
    this.negativeSlack = negativeSlack;
  }


  public Interval positiveSlack(@javax.annotation.Nullable Integer positiveSlack) {
    this.positiveSlack = positiveSlack;
    return this;
  }

  /**
   * Number of days after the due date that are allowed (positive window)
   * @return positiveSlack
   */
  @javax.annotation.Nullable
  public Integer getPositiveSlack() {
    return positiveSlack;
  }

  public void setPositiveSlack(@javax.annotation.Nullable Integer positiveSlack) {
    this.positiveSlack = positiveSlack;
  }


  public Interval eproGracePeriod(@javax.annotation.Nullable Integer eproGracePeriod) {
    this.eproGracePeriod = eproGracePeriod;
    return this;
  }

  /**
   * Number of days of grace period for ePRO completion after due date
   * @return eproGracePeriod
   */
  @javax.annotation.Nullable
  public Integer getEproGracePeriod() {
    return eproGracePeriod;
  }

  public void setEproGracePeriod(@javax.annotation.Nullable Integer eproGracePeriod) {
    this.eproGracePeriod = eproGracePeriod;
  }


  public Interval forms(@javax.annotation.Nullable List<ComponentsSchemasIntervalFormsItem> forms) {
    this.forms = forms;
    return this;
  }

  public Interval addFormsItem(ComponentsSchemasIntervalFormsItem formsItem) {
    if (this.forms == null) {
      this.forms = new ArrayList<>();
    }
    this.forms.add(formsItem);
    return this;
  }

  /**
   * List of forms that are scheduled in this interval
   * @return forms
   */
  @javax.annotation.Nullable
  public List<ComponentsSchemasIntervalFormsItem> getForms() {
    return forms;
  }

  public void setForms(@javax.annotation.Nullable List<ComponentsSchemasIntervalFormsItem> forms) {
    this.forms = forms;
  }


  public Interval disabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the interval is soft-deleted (disabled)
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(@javax.annotation.Nullable Boolean disabled) {
    this.disabled = disabled;
  }


  public Interval dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this interval was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Interval dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this interval was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Interval interval = (Interval) o;
    return Objects.equals(this.studyKey, interval.studyKey) &&
        Objects.equals(this.intervalId, interval.intervalId) &&
        Objects.equals(this.intervalName, interval.intervalName) &&
        Objects.equals(this.intervalDescription, interval.intervalDescription) &&
        Objects.equals(this.intervalSequence, interval.intervalSequence) &&
        Objects.equals(this.intervalGroupId, interval.intervalGroupId) &&
        Objects.equals(this.intervalGroupName, interval.intervalGroupName) &&
        Objects.equals(this.timeline, interval.timeline) &&
        Objects.equals(this.definedUsingInterval, interval.definedUsingInterval) &&
        Objects.equals(this.windowCalculationForm, interval.windowCalculationForm) &&
        Objects.equals(this.windowCalculationDate, interval.windowCalculationDate) &&
        Objects.equals(this.actualDateForm, interval.actualDateForm) &&
        Objects.equals(this.actualDate, interval.actualDate) &&
        Objects.equals(this.dueDateWillBeIn, interval.dueDateWillBeIn) &&
        Objects.equals(this.negativeSlack, interval.negativeSlack) &&
        Objects.equals(this.positiveSlack, interval.positiveSlack) &&
        Objects.equals(this.eproGracePeriod, interval.eproGracePeriod) &&
        Objects.equals(this.forms, interval.forms) &&
        Objects.equals(this.disabled, interval.disabled) &&
        Objects.equals(this.dateCreated, interval.dateCreated) &&
        Objects.equals(this.dateModified, interval.dateModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, intervalId, intervalName, intervalDescription, intervalSequence, intervalGroupId, intervalGroupName, timeline, definedUsingInterval, windowCalculationForm, windowCalculationDate, actualDateForm, actualDate, dueDateWillBeIn, negativeSlack, positiveSlack, eproGracePeriod, forms, disabled, dateCreated, dateModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Interval {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    intervalDescription: ").append(toIndentedString(intervalDescription)).append("\n");
    sb.append("    intervalSequence: ").append(toIndentedString(intervalSequence)).append("\n");
    sb.append("    intervalGroupId: ").append(toIndentedString(intervalGroupId)).append("\n");
    sb.append("    intervalGroupName: ").append(toIndentedString(intervalGroupName)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    definedUsingInterval: ").append(toIndentedString(definedUsingInterval)).append("\n");
    sb.append("    windowCalculationForm: ").append(toIndentedString(windowCalculationForm)).append("\n");
    sb.append("    windowCalculationDate: ").append(toIndentedString(windowCalculationDate)).append("\n");
    sb.append("    actualDateForm: ").append(toIndentedString(actualDateForm)).append("\n");
    sb.append("    actualDate: ").append(toIndentedString(actualDate)).append("\n");
    sb.append("    dueDateWillBeIn: ").append(toIndentedString(dueDateWillBeIn)).append("\n");
    sb.append("    negativeSlack: ").append(toIndentedString(negativeSlack)).append("\n");
    sb.append("    positiveSlack: ").append(toIndentedString(positiveSlack)).append("\n");
    sb.append("    eproGracePeriod: ").append(toIndentedString(eproGracePeriod)).append("\n");
    sb.append("    forms: ").append(toIndentedString(forms)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "intervalId", "intervalName", "intervalDescription", "intervalSequence", "intervalGroupId", "intervalGroupName", "timeline", "definedUsingInterval", "windowCalculationForm", "windowCalculationDate", "actualDateForm", "actualDate", "dueDateWillBeIn", "negativeSlack", "positiveSlack", "eproGracePeriod", "forms", "disabled", "dateCreated", "dateModified"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Interval
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Interval.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Interval is not found in the empty JSON string", Interval.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Interval.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Interval` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("intervalName") != null && !jsonObj.get("intervalName").isJsonNull()) && !jsonObj.get("intervalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalName").toString()));
      }
      if ((jsonObj.get("intervalDescription") != null && !jsonObj.get("intervalDescription").isJsonNull()) && !jsonObj.get("intervalDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalDescription").toString()));
      }
      if ((jsonObj.get("intervalGroupName") != null && !jsonObj.get("intervalGroupName").isJsonNull()) && !jsonObj.get("intervalGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalGroupName").toString()));
      }
      if ((jsonObj.get("timeline") != null && !jsonObj.get("timeline").isJsonNull()) && !jsonObj.get("timeline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeline").toString()));
      }
      if ((jsonObj.get("definedUsingInterval") != null && !jsonObj.get("definedUsingInterval").isJsonNull()) && !jsonObj.get("definedUsingInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definedUsingInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definedUsingInterval").toString()));
      }
      if ((jsonObj.get("windowCalculationForm") != null && !jsonObj.get("windowCalculationForm").isJsonNull()) && !jsonObj.get("windowCalculationForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowCalculationForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowCalculationForm").toString()));
      }
      if ((jsonObj.get("windowCalculationDate") != null && !jsonObj.get("windowCalculationDate").isJsonNull()) && !jsonObj.get("windowCalculationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowCalculationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowCalculationDate").toString()));
      }
      if ((jsonObj.get("actualDateForm") != null && !jsonObj.get("actualDateForm").isJsonNull()) && !jsonObj.get("actualDateForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualDateForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualDateForm").toString()));
      }
      if ((jsonObj.get("actualDate") != null && !jsonObj.get("actualDate").isJsonNull()) && !jsonObj.get("actualDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actualDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actualDate").toString()));
      }
      if (jsonObj.get("forms") != null && !jsonObj.get("forms").isJsonNull()) {
        JsonArray jsonArrayforms = jsonObj.getAsJsonArray("forms");
        if (jsonArrayforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forms` to be an array in the JSON string but got `%s`", jsonObj.get("forms").toString()));
          }

          // validate the optional field `forms` (array)
          for (int i = 0; i < jsonArrayforms.size(); i++) {
            ComponentsSchemasIntervalFormsItem.validateJsonElement(jsonArrayforms.get(i));
          };
        }
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Interval.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Interval' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Interval> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Interval.class));

       return (TypeAdapter<T>) new TypeAdapter<Interval>() {
           @Override
           public void write(JsonWriter out, Interval value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Interval read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Interval given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Interval
   * @throws IOException if the JSON string is invalid with respect to Interval
   */
  public static Interval fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Interval.class);
  }

  /**
   * Convert an instance of Interval to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

