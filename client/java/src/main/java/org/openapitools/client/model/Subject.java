/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Keyword;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Subject {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_OID = "subjectOid";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OID)
  @javax.annotation.Nullable
  private String subjectOid;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_SUBJECT_STATUS = "subjectStatus";
  @SerializedName(SERIALIZED_NAME_SUBJECT_STATUS)
  @javax.annotation.Nullable
  private String subjectStatus;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private Integer siteId;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  @javax.annotation.Nullable
  private String siteName;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private Boolean deleted;

  public static final String SERIALIZED_NAME_ENROLLMENT_START_DATE = "enrollmentStartDate";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_START_DATE)
  @javax.annotation.Nullable
  private String enrollmentStartDate;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  @javax.annotation.Nullable
  private List<Keyword> keywords = new ArrayList<>();

  public Subject() {
  }

  public Subject studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Subject subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Mednet subject ID (internal numeric ID)
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public Subject subjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

  /**
   * Client-assigned subject object identifier (OID)
   * @return subjectOid
   */
  @javax.annotation.Nullable
  public String getSubjectOid() {
    return subjectOid;
  }

  public void setSubjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
  }


  public Subject subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Protocol-assigned subject identifier (display ID)
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public Subject subjectStatus(@javax.annotation.Nullable String subjectStatus) {
    this.subjectStatus = subjectStatus;
    return this;
  }

  /**
   * Current status of the subject (e.g., Enrolled)
   * @return subjectStatus
   */
  @javax.annotation.Nullable
  public String getSubjectStatus() {
    return subjectStatus;
  }

  public void setSubjectStatus(@javax.annotation.Nullable String subjectStatus) {
    this.subjectStatus = subjectStatus;
  }


  public Subject siteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Mednet site ID the subject is associated with
   * @return siteId
   */
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
  }


  public Subject siteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Name of the site the subject is associated with
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
  }


  public Subject deleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the subject is marked as deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
  }


  public Subject enrollmentStartDate(@javax.annotation.Nullable String enrollmentStartDate) {
    this.enrollmentStartDate = enrollmentStartDate;
    return this;
  }

  /**
   * Subjectâ€™s enrollment start date
   * @return enrollmentStartDate
   */
  @javax.annotation.Nullable
  public String getEnrollmentStartDate() {
    return enrollmentStartDate;
  }

  public void setEnrollmentStartDate(@javax.annotation.Nullable String enrollmentStartDate) {
    this.enrollmentStartDate = enrollmentStartDate;
  }


  public Subject dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this subject record was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Subject dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this subject record was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }


  public Subject keywords(@javax.annotation.Nullable List<Keyword> keywords) {
    this.keywords = keywords;
    return this;
  }

  public Subject addKeywordsItem(Keyword keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * List of keywords associated with the subject
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<Keyword> getKeywords() {
    return keywords;
  }

  public void setKeywords(@javax.annotation.Nullable List<Keyword> keywords) {
    this.keywords = keywords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subject subject = (Subject) o;
    return Objects.equals(this.studyKey, subject.studyKey) &&
        Objects.equals(this.subjectId, subject.subjectId) &&
        Objects.equals(this.subjectOid, subject.subjectOid) &&
        Objects.equals(this.subjectKey, subject.subjectKey) &&
        Objects.equals(this.subjectStatus, subject.subjectStatus) &&
        Objects.equals(this.siteId, subject.siteId) &&
        Objects.equals(this.siteName, subject.siteName) &&
        Objects.equals(this.deleted, subject.deleted) &&
        Objects.equals(this.enrollmentStartDate, subject.enrollmentStartDate) &&
        Objects.equals(this.dateCreated, subject.dateCreated) &&
        Objects.equals(this.dateModified, subject.dateModified) &&
        Objects.equals(this.keywords, subject.keywords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, subjectId, subjectOid, subjectKey, subjectStatus, siteId, siteName, deleted, enrollmentStartDate, dateCreated, dateModified, keywords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subject {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    subjectStatus: ").append(toIndentedString(subjectStatus)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    enrollmentStartDate: ").append(toIndentedString(enrollmentStartDate)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "subjectId", "subjectOid", "subjectKey", "subjectStatus", "siteId", "siteName", "deleted", "enrollmentStartDate", "dateCreated", "dateModified", "keywords"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subject is not found in the empty JSON string", Subject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("subjectOid") != null && !jsonObj.get("subjectOid").isJsonNull()) && !jsonObj.get("subjectOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOid").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("subjectStatus") != null && !jsonObj.get("subjectStatus").isJsonNull()) && !jsonObj.get("subjectStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectStatus").toString()));
      }
      if ((jsonObj.get("siteName") != null && !jsonObj.get("siteName").isJsonNull()) && !jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
      if ((jsonObj.get("enrollmentStartDate") != null && !jsonObj.get("enrollmentStartDate").isJsonNull()) && !jsonObj.get("enrollmentStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentStartDate").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) {
        JsonArray jsonArraykeywords = jsonObj.getAsJsonArray("keywords");
        if (jsonArraykeywords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("keywords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
          }

          // validate the optional field `keywords` (array)
          for (int i = 0; i < jsonArraykeywords.size(); i++) {
            Keyword.validateJsonElement(jsonArraykeywords.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subject.class));

       return (TypeAdapter<T>) new TypeAdapter<Subject>() {
           @Override
           public void write(JsonWriter out, Subject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subject
   * @throws IOException if the JSON string is invalid with respect to Subject
   */
  public static Subject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subject.class);
  }

  /**
   * Convert an instance of Subject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

