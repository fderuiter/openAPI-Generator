/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ComponentsSchemasRecordCreateRequestItem;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject5;
import org.openapitools.client.model.RecordJobStatus;
import org.openapitools.client.model.RecordList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createRecords
     * @param studyKey Study key identifying the study context for the request (required)
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for record creation. Returns a job identifier to check status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (rate limit exceeded) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordsCall(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nonnull List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = componentsSchemasRecordCreateRequestItem;

        // create path and map variables
        String localVarPath = "/studies/{studyKey}/records"
            .replace("{" + "studyKey" + "}", localVarApiClient.escapeString(studyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth", "securityKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecordsValidateBeforeCall(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nonnull List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'studyKey' is set
        if (studyKey == null) {
            throw new ApiException("Missing the required parameter 'studyKey' when calling createRecords(Async)");
        }

        // verify the required parameter 'componentsSchemasRecordCreateRequestItem' is set
        if (componentsSchemasRecordCreateRequestItem == null) {
            throw new ApiException("Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords(Async)");
        }

        return createRecordsCall(studyKey, componentsSchemasRecordCreateRequestItem, _callback);

    }

    /**
     * Add new record or update subject/record data
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). (required)
     * @return RecordJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for record creation. Returns a job identifier to check status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (rate limit exceeded) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public RecordJobStatus createRecords(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nonnull List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem) throws ApiException {
        ApiResponse<RecordJobStatus> localVarResp = createRecordsWithHttpInfo(studyKey, componentsSchemasRecordCreateRequestItem);
        return localVarResp.getData();
    }

    /**
     * Add new record or update subject/record data
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). (required)
     * @return ApiResponse&lt;RecordJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for record creation. Returns a job identifier to check status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (rate limit exceeded) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordJobStatus> createRecordsWithHttpInfo(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nonnull List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem) throws ApiException {
        okhttp3.Call localVarCall = createRecordsValidateBeforeCall(studyKey, componentsSchemasRecordCreateRequestItem, null);
        Type localVarReturnType = new TypeToken<RecordJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new record or update subject/record data (asynchronously)
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for record creation. Returns a job identifier to check status. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (rate limit exceeded) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRecordsAsync(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nonnull List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem, final ApiCallback<RecordJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecordsValidateBeforeCall(studyKey, componentsSchemasRecordCreateRequestItem, _callback);
        Type localVarReturnType = new TypeToken<RecordJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRecords
     * @param studyKey Study key identifying the study context for the request (required)
     * @param page Page index to retrieve (0-based) (optional, default to 0)
     * @param size Number of items to return per page (max 500) (optional, default to 25)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with list of records </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRecordsCall(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String recordDataFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/studies/{studyKey}/records"
            .replace("{" + "studyKey" + "}", localVarApiClient.escapeString(studyKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (recordDataFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recordDataFilter", recordDataFilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyAuth", "securityKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRecordsValidateBeforeCall(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String recordDataFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'studyKey' is set
        if (studyKey == null) {
            throw new ApiException("Missing the required parameter 'studyKey' when calling listRecords(Async)");
        }

        return listRecordsCall(studyKey, page, size, sort, filter, recordDataFilter, _callback);

    }

    /**
     * List records (eCRF instances) in a study
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param page Page index to retrieve (0-based) (optional, default to 0)
     * @param size Number of items to return per page (max 500) (optional, default to 25)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @return RecordList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with list of records </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public RecordList listRecords(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String recordDataFilter) throws ApiException {
        ApiResponse<RecordList> localVarResp = listRecordsWithHttpInfo(studyKey, page, size, sort, filter, recordDataFilter);
        return localVarResp.getData();
    }

    /**
     * List records (eCRF instances) in a study
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param page Page index to retrieve (0-based) (optional, default to 0)
     * @param size Number of items to return per page (max 500) (optional, default to 25)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @return ApiResponse&lt;RecordList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with list of records </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecordList> listRecordsWithHttpInfo(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String recordDataFilter) throws ApiException {
        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(studyKey, page, size, sort, filter, recordDataFilter, null);
        Type localVarReturnType = new TypeToken<RecordList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List records (eCRF instances) in a study (asynchronously)
     * 
     * @param studyKey Study key identifying the study context for the request (required)
     * @param page Page index to retrieve (0-based) (optional, default to 0)
     * @param size Number of items to return per page (max 500) (optional, default to 25)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with list of records </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request (malformed or invalid input) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed or was not provided </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authenticated but not allowed to access the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error (unexpected condition encountered) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRecordsAsync(@javax.annotation.Nonnull String studyKey, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String recordDataFilter, final ApiCallback<RecordList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRecordsValidateBeforeCall(studyKey, page, size, sort, filter, recordDataFilter, _callback);
        Type localVarReturnType = new TypeToken<RecordList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
