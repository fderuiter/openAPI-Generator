/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ComponentsSchemasRecordCreateRequestItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class ComponentsSchemasRecordCreateRequestItem {
  public static final String SERIALIZED_NAME_FORM_KEY = "formKey";
  @SerializedName(SERIALIZED_NAME_FORM_KEY)
  @javax.annotation.Nonnull
  private String formKey;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  @javax.annotation.Nullable
  private Integer formId;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  @javax.annotation.Nullable
  private String siteName;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  @javax.annotation.Nullable
  private Integer siteId;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_OID = "subjectOid";
  @SerializedName(SERIALIZED_NAME_SUBJECT_OID)
  @javax.annotation.Nullable
  private String subjectOid;

  public static final String SERIALIZED_NAME_INTERVAL_NAME = "intervalName";
  @SerializedName(SERIALIZED_NAME_INTERVAL_NAME)
  @javax.annotation.Nullable
  private String intervalName;

  public static final String SERIALIZED_NAME_INTERVAL_ID = "intervalId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ID)
  @javax.annotation.Nullable
  private Integer intervalId;

  public static final String SERIALIZED_NAME_RECORD_ID = "recordId";
  @SerializedName(SERIALIZED_NAME_RECORD_ID)
  @javax.annotation.Nullable
  private Integer recordId;

  public static final String SERIALIZED_NAME_RECORD_OID = "recordOid";
  @SerializedName(SERIALIZED_NAME_RECORD_OID)
  @javax.annotation.Nullable
  private String recordOid;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nonnull
  private Map<String, Object> data = new HashMap<>();

  public ComponentsSchemasRecordCreateRequestItem() {
  }

  public ComponentsSchemasRecordCreateRequestItem formKey(@javax.annotation.Nonnull String formKey) {
    this.formKey = formKey;
    return this;
  }

  /**
   * Form key identifying the eCRF to create or update
   * @return formKey
   */
  @javax.annotation.Nonnull
  public String getFormKey() {
    return formKey;
  }

  public void setFormKey(@javax.annotation.Nonnull String formKey) {
    this.formKey = formKey;
  }


  public ComponentsSchemasRecordCreateRequestItem formId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
    return this;
  }

  /**
   * Form ID identifying the eCRF to create or update (alternative to formKey)
   * @return formId
   */
  @javax.annotation.Nullable
  public Integer getFormId() {
    return formId;
  }

  public void setFormId(@javax.annotation.Nullable Integer formId) {
    this.formId = formId;
  }


  public ComponentsSchemasRecordCreateRequestItem siteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Name of the site where the record should be created (for new subject registration)
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(@javax.annotation.Nullable String siteName) {
    this.siteName = siteName;
  }


  public ComponentsSchemasRecordCreateRequestItem siteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Site ID for the record (alternative to siteName)
   * @return siteId
   */
  @javax.annotation.Nullable
  public Integer getSiteId() {
    return siteId;
  }

  public void setSiteId(@javax.annotation.Nullable Integer siteId) {
    this.siteId = siteId;
  }


  public ComponentsSchemasRecordCreateRequestItem subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Subject identifier (display ID) for which to create or update the record
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public ComponentsSchemasRecordCreateRequestItem subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Subject ID for which to create or update the record (alternative to subjectKey)
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public ComponentsSchemasRecordCreateRequestItem subjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

  /**
   * Subject OID for which to create or update the record (alternative to subjectKey)
   * @return subjectOid
   */
  @javax.annotation.Nullable
  public String getSubjectOid() {
    return subjectOid;
  }

  public void setSubjectOid(@javax.annotation.Nullable String subjectOid) {
    this.subjectOid = subjectOid;
  }


  public ComponentsSchemasRecordCreateRequestItem intervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

  /**
   * Name of the interval (visit) for a scheduled record update
   * @return intervalName
   */
  @javax.annotation.Nullable
  public String getIntervalName() {
    return intervalName;
  }

  public void setIntervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
  }


  public ComponentsSchemasRecordCreateRequestItem intervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

  /**
   * Interval ID for a scheduled record update (alternative to intervalName)
   * @return intervalId
   */
  @javax.annotation.Nullable
  public Integer getIntervalId() {
    return intervalId;
  }

  public void setIntervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
  }


  public ComponentsSchemasRecordCreateRequestItem recordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
    return this;
  }

  /**
   * Record ID for updating an existing unscheduled record (if applicable)
   * @return recordId
   */
  @javax.annotation.Nullable
  public Integer getRecordId() {
    return recordId;
  }

  public void setRecordId(@javax.annotation.Nullable Integer recordId) {
    this.recordId = recordId;
  }


  public ComponentsSchemasRecordCreateRequestItem recordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
    return this;
  }

  /**
   * Record OID for updating an existing unscheduled record (if applicable)
   * @return recordOid
   */
  @javax.annotation.Nullable
  public String getRecordOid() {
    return recordOid;
  }

  public void setRecordOid(@javax.annotation.Nullable String recordOid) {
    this.recordOid = recordOid;
  }


  public ComponentsSchemasRecordCreateRequestItem data(@javax.annotation.Nonnull Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public ComponentsSchemasRecordCreateRequestItem putDataItem(String key, Object dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

  /**
   * Key-value pairs of field names and values for the record data
   * @return data
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getData() {
    return data;
  }

  public void setData(@javax.annotation.Nonnull Map<String, Object> data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComponentsSchemasRecordCreateRequestItem componentsSchemasRecordCreateRequestItem = (ComponentsSchemasRecordCreateRequestItem) o;
    return Objects.equals(this.formKey, componentsSchemasRecordCreateRequestItem.formKey) &&
        Objects.equals(this.formId, componentsSchemasRecordCreateRequestItem.formId) &&
        Objects.equals(this.siteName, componentsSchemasRecordCreateRequestItem.siteName) &&
        Objects.equals(this.siteId, componentsSchemasRecordCreateRequestItem.siteId) &&
        Objects.equals(this.subjectKey, componentsSchemasRecordCreateRequestItem.subjectKey) &&
        Objects.equals(this.subjectId, componentsSchemasRecordCreateRequestItem.subjectId) &&
        Objects.equals(this.subjectOid, componentsSchemasRecordCreateRequestItem.subjectOid) &&
        Objects.equals(this.intervalName, componentsSchemasRecordCreateRequestItem.intervalName) &&
        Objects.equals(this.intervalId, componentsSchemasRecordCreateRequestItem.intervalId) &&
        Objects.equals(this.recordId, componentsSchemasRecordCreateRequestItem.recordId) &&
        Objects.equals(this.recordOid, componentsSchemasRecordCreateRequestItem.recordOid) &&
        Objects.equals(this.data, componentsSchemasRecordCreateRequestItem.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formKey, formId, siteName, siteId, subjectKey, subjectId, subjectOid, intervalName, intervalId, recordId, recordOid, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentsSchemasRecordCreateRequestItem {\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    recordOid: ").append(toIndentedString(recordOid)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("formKey", "formId", "siteName", "siteId", "subjectKey", "subjectId", "subjectOid", "intervalName", "intervalId", "recordId", "recordOid", "data"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("formKey", "data"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComponentsSchemasRecordCreateRequestItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComponentsSchemasRecordCreateRequestItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComponentsSchemasRecordCreateRequestItem is not found in the empty JSON string", ComponentsSchemasRecordCreateRequestItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComponentsSchemasRecordCreateRequestItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComponentsSchemasRecordCreateRequestItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ComponentsSchemasRecordCreateRequestItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("formKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formKey").toString()));
      }
      if ((jsonObj.get("siteName") != null && !jsonObj.get("siteName").isJsonNull()) && !jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("subjectOid") != null && !jsonObj.get("subjectOid").isJsonNull()) && !jsonObj.get("subjectOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectOid").toString()));
      }
      if ((jsonObj.get("intervalName") != null && !jsonObj.get("intervalName").isJsonNull()) && !jsonObj.get("intervalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalName").toString()));
      }
      if ((jsonObj.get("recordOid") != null && !jsonObj.get("recordOid").isJsonNull()) && !jsonObj.get("recordOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recordOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recordOid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComponentsSchemasRecordCreateRequestItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComponentsSchemasRecordCreateRequestItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComponentsSchemasRecordCreateRequestItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComponentsSchemasRecordCreateRequestItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ComponentsSchemasRecordCreateRequestItem>() {
           @Override
           public void write(JsonWriter out, ComponentsSchemasRecordCreateRequestItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComponentsSchemasRecordCreateRequestItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComponentsSchemasRecordCreateRequestItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComponentsSchemasRecordCreateRequestItem
   * @throws IOException if the JSON string is invalid with respect to ComponentsSchemasRecordCreateRequestItem
   */
  public static ComponentsSchemasRecordCreateRequestItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComponentsSchemasRecordCreateRequestItem.class);
  }

  /**
   * Convert an instance of ComponentsSchemasRecordCreateRequestItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

