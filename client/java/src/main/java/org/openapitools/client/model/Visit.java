/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Visit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Visit {
  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_VISIT_ID = "visitId";
  @SerializedName(SERIALIZED_NAME_VISIT_ID)
  @javax.annotation.Nullable
  private Integer visitId;

  public static final String SERIALIZED_NAME_INTERVAL_ID = "intervalId";
  @SerializedName(SERIALIZED_NAME_INTERVAL_ID)
  @javax.annotation.Nullable
  private Integer intervalId;

  public static final String SERIALIZED_NAME_INTERVAL_NAME = "intervalName";
  @SerializedName(SERIALIZED_NAME_INTERVAL_NAME)
  @javax.annotation.Nullable
  private String intervalName;

  public static final String SERIALIZED_NAME_SUBJECT_ID = "subjectId";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ID)
  @javax.annotation.Nullable
  private Integer subjectId;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "subjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  @javax.annotation.Nullable
  private String subjectKey;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  @javax.annotation.Nullable
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  @javax.annotation.Nullable
  private String endDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  @javax.annotation.Nullable
  private String dueDate;

  public static final String SERIALIZED_NAME_VISIT_DATE = "visitDate";
  @SerializedName(SERIALIZED_NAME_VISIT_DATE)
  @javax.annotation.Nullable
  private String visitDate;

  public static final String SERIALIZED_NAME_VISIT_DATE_FORM = "visitDateForm";
  @SerializedName(SERIALIZED_NAME_VISIT_DATE_FORM)
  @javax.annotation.Nullable
  private String visitDateForm;

  public static final String SERIALIZED_NAME_VISIT_DATE_QUESTION = "visitDateQuestion";
  @SerializedName(SERIALIZED_NAME_VISIT_DATE_QUESTION)
  @javax.annotation.Nullable
  private String visitDateQuestion;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  @javax.annotation.Nullable
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public Visit() {
  }

  public Visit studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Visit visitId(@javax.annotation.Nullable Integer visitId) {
    this.visitId = visitId;
    return this;
  }

  /**
   * Unique system identifier for the subject visit instance
   * @return visitId
   */
  @javax.annotation.Nullable
  public Integer getVisitId() {
    return visitId;
  }

  public void setVisitId(@javax.annotation.Nullable Integer visitId) {
    this.visitId = visitId;
  }


  public Visit intervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

  /**
   * Unique system identifier of the interval definition for this visit
   * @return intervalId
   */
  @javax.annotation.Nullable
  public Integer getIntervalId() {
    return intervalId;
  }

  public void setIntervalId(@javax.annotation.Nullable Integer intervalId) {
    this.intervalId = intervalId;
  }


  public Visit intervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

  /**
   * Name of the interval (visit) for this visit instance
   * @return intervalName
   */
  @javax.annotation.Nullable
  public String getIntervalName() {
    return intervalName;
  }

  public void setIntervalName(@javax.annotation.Nullable String intervalName) {
    this.intervalName = intervalName;
  }


  public Visit subjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

  /**
   * Mednet subject ID of the subject
   * @return subjectId
   */
  @javax.annotation.Nullable
  public Integer getSubjectId() {
    return subjectId;
  }

  public void setSubjectId(@javax.annotation.Nullable Integer subjectId) {
    this.subjectId = subjectId;
  }


  public Visit subjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Protocol-assigned subject identifier
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(@javax.annotation.Nullable String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public Visit startDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date of the visit window (in YYYY-MM-DD format)
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(@javax.annotation.Nullable String startDate) {
    this.startDate = startDate;
  }


  public Visit endDate(@javax.annotation.Nullable String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date of the visit window (in YYYY-MM-DD format)
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(@javax.annotation.Nullable String endDate) {
    this.endDate = endDate;
  }


  public Visit dueDate(@javax.annotation.Nullable String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Due date of the visit (in YYYY-MM-DD format), if applicable
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(@javax.annotation.Nullable String dueDate) {
    this.dueDate = dueDate;
  }


  public Visit visitDate(@javax.annotation.Nullable String visitDate) {
    this.visitDate = visitDate;
    return this;
  }

  /**
   * Actual date the visit took place (in YYYY-MM-DD format)
   * @return visitDate
   */
  @javax.annotation.Nullable
  public String getVisitDate() {
    return visitDate;
  }

  public void setVisitDate(@javax.annotation.Nullable String visitDate) {
    this.visitDate = visitDate;
  }


  public Visit visitDateForm(@javax.annotation.Nullable String visitDateForm) {
    this.visitDateForm = visitDateForm;
    return this;
  }

  /**
   * Name of the form used to capture the actual visit date
   * @return visitDateForm
   */
  @javax.annotation.Nullable
  public String getVisitDateForm() {
    return visitDateForm;
  }

  public void setVisitDateForm(@javax.annotation.Nullable String visitDateForm) {
    this.visitDateForm = visitDateForm;
  }


  public Visit visitDateQuestion(@javax.annotation.Nullable String visitDateQuestion) {
    this.visitDateQuestion = visitDateQuestion;
    return this;
  }

  /**
   * Variable name of the field capturing the actual visit date
   * @return visitDateQuestion
   */
  @javax.annotation.Nullable
  public String getVisitDateQuestion() {
    return visitDateQuestion;
  }

  public void setVisitDateQuestion(@javax.annotation.Nullable String visitDateQuestion) {
    this.visitDateQuestion = visitDateQuestion;
  }


  public Visit deleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Whether the visit instance is marked as deleted
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(@javax.annotation.Nullable Boolean deleted) {
    this.deleted = deleted;
  }


  public Visit dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when this visit record was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Visit dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when this visit record was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Visit visit = (Visit) o;
    return Objects.equals(this.studyKey, visit.studyKey) &&
        Objects.equals(this.visitId, visit.visitId) &&
        Objects.equals(this.intervalId, visit.intervalId) &&
        Objects.equals(this.intervalName, visit.intervalName) &&
        Objects.equals(this.subjectId, visit.subjectId) &&
        Objects.equals(this.subjectKey, visit.subjectKey) &&
        Objects.equals(this.startDate, visit.startDate) &&
        Objects.equals(this.endDate, visit.endDate) &&
        Objects.equals(this.dueDate, visit.dueDate) &&
        Objects.equals(this.visitDate, visit.visitDate) &&
        Objects.equals(this.visitDateForm, visit.visitDateForm) &&
        Objects.equals(this.visitDateQuestion, visit.visitDateQuestion) &&
        Objects.equals(this.deleted, visit.deleted) &&
        Objects.equals(this.dateCreated, visit.dateCreated) &&
        Objects.equals(this.dateModified, visit.dateModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(studyKey, visitId, intervalId, intervalName, subjectId, subjectKey, startDate, endDate, dueDate, visitDate, visitDateForm, visitDateQuestion, deleted, dateCreated, dateModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visit {\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    visitDate: ").append(toIndentedString(visitDate)).append("\n");
    sb.append("    visitDateForm: ").append(toIndentedString(visitDateForm)).append("\n");
    sb.append("    visitDateQuestion: ").append(toIndentedString(visitDateQuestion)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("studyKey", "visitId", "intervalId", "intervalName", "subjectId", "subjectKey", "startDate", "endDate", "dueDate", "visitDate", "visitDateForm", "visitDateQuestion", "deleted", "dateCreated", "dateModified"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Visit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Visit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Visit is not found in the empty JSON string", Visit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Visit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Visit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("intervalName") != null && !jsonObj.get("intervalName").isJsonNull()) && !jsonObj.get("intervalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intervalName").toString()));
      }
      if ((jsonObj.get("subjectKey") != null && !jsonObj.get("subjectKey").isJsonNull()) && !jsonObj.get("subjectKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectKey").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("visitDate") != null && !jsonObj.get("visitDate").isJsonNull()) && !jsonObj.get("visitDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitDate").toString()));
      }
      if ((jsonObj.get("visitDateForm") != null && !jsonObj.get("visitDateForm").isJsonNull()) && !jsonObj.get("visitDateForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitDateForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitDateForm").toString()));
      }
      if ((jsonObj.get("visitDateQuestion") != null && !jsonObj.get("visitDateQuestion").isJsonNull()) && !jsonObj.get("visitDateQuestion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visitDateQuestion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visitDateQuestion").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Visit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Visit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Visit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Visit.class));

       return (TypeAdapter<T>) new TypeAdapter<Visit>() {
           @Override
           public void write(JsonWriter out, Visit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Visit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Visit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Visit
   * @throws IOException if the JSON string is invalid with respect to Visit
   */
  public static Visit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Visit.class);
  }

  /**
   * Convert an instance of Visit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

