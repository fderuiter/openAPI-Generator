/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Study
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Study {
  public static final String SERIALIZED_NAME_SPONSOR_KEY = "sponsorKey";
  @SerializedName(SERIALIZED_NAME_SPONSOR_KEY)
  @javax.annotation.Nullable
  private String sponsorKey;

  public static final String SERIALIZED_NAME_STUDY_KEY = "studyKey";
  @SerializedName(SERIALIZED_NAME_STUDY_KEY)
  @javax.annotation.Nullable
  private String studyKey;

  public static final String SERIALIZED_NAME_STUDY_ID = "studyId";
  @SerializedName(SERIALIZED_NAME_STUDY_ID)
  @javax.annotation.Nullable
  private Integer studyId;

  public static final String SERIALIZED_NAME_STUDY_NAME = "studyName";
  @SerializedName(SERIALIZED_NAME_STUDY_NAME)
  @javax.annotation.Nullable
  private String studyName;

  public static final String SERIALIZED_NAME_STUDY_DESCRIPTION = "studyDescription";
  @SerializedName(SERIALIZED_NAME_STUDY_DESCRIPTION)
  @javax.annotation.Nullable
  private String studyDescription;

  public static final String SERIALIZED_NAME_STUDY_TYPE = "studyType";
  @SerializedName(SERIALIZED_NAME_STUDY_TYPE)
  @javax.annotation.Nullable
  private String studyType;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private String dateModified;

  public Study() {
  }

  public Study sponsorKey(@javax.annotation.Nullable String sponsorKey) {
    this.sponsorKey = sponsorKey;
    return this;
  }

  /**
   * Sponsor key that this study belongs to
   * @return sponsorKey
   */
  @javax.annotation.Nullable
  public String getSponsorKey() {
    return sponsorKey;
  }

  public void setSponsorKey(@javax.annotation.Nullable String sponsorKey) {
    this.sponsorKey = sponsorKey;
  }


  public Study studyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

  /**
   * Unique study key
   * @return studyKey
   */
  @javax.annotation.Nullable
  public String getStudyKey() {
    return studyKey;
  }

  public void setStudyKey(@javax.annotation.Nullable String studyKey) {
    this.studyKey = studyKey;
  }


  public Study studyId(@javax.annotation.Nullable Integer studyId) {
    this.studyId = studyId;
    return this;
  }

  /**
   * Mednet study ID (internal numeric identifier)
   * @return studyId
   */
  @javax.annotation.Nullable
  public Integer getStudyId() {
    return studyId;
  }

  public void setStudyId(@javax.annotation.Nullable Integer studyId) {
    this.studyId = studyId;
  }


  public Study studyName(@javax.annotation.Nullable String studyName) {
    this.studyName = studyName;
    return this;
  }

  /**
   * Name of the study
   * @return studyName
   */
  @javax.annotation.Nullable
  public String getStudyName() {
    return studyName;
  }

  public void setStudyName(@javax.annotation.Nullable String studyName) {
    this.studyName = studyName;
  }


  public Study studyDescription(@javax.annotation.Nullable String studyDescription) {
    this.studyDescription = studyDescription;
    return this;
  }

  /**
   * Description of the study
   * @return studyDescription
   */
  @javax.annotation.Nullable
  public String getStudyDescription() {
    return studyDescription;
  }

  public void setStudyDescription(@javax.annotation.Nullable String studyDescription) {
    this.studyDescription = studyDescription;
  }


  public Study studyType(@javax.annotation.Nullable String studyType) {
    this.studyType = studyType;
    return this;
  }

  /**
   * Type of study (e.g., STUDY)
   * @return studyType
   */
  @javax.annotation.Nullable
  public String getStudyType() {
    return studyType;
  }

  public void setStudyType(@javax.annotation.Nullable String studyType) {
    this.studyType = studyType;
  }


  public Study dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date when the study record was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Study dateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Date when the study record was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public String getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable String dateModified) {
    this.dateModified = dateModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Study study = (Study) o;
    return Objects.equals(this.sponsorKey, study.sponsorKey) &&
        Objects.equals(this.studyKey, study.studyKey) &&
        Objects.equals(this.studyId, study.studyId) &&
        Objects.equals(this.studyName, study.studyName) &&
        Objects.equals(this.studyDescription, study.studyDescription) &&
        Objects.equals(this.studyType, study.studyType) &&
        Objects.equals(this.dateCreated, study.dateCreated) &&
        Objects.equals(this.dateModified, study.dateModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sponsorKey, studyKey, studyId, studyName, studyDescription, studyType, dateCreated, dateModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Study {\n");
    sb.append("    sponsorKey: ").append(toIndentedString(sponsorKey)).append("\n");
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    studyId: ").append(toIndentedString(studyId)).append("\n");
    sb.append("    studyName: ").append(toIndentedString(studyName)).append("\n");
    sb.append("    studyDescription: ").append(toIndentedString(studyDescription)).append("\n");
    sb.append("    studyType: ").append(toIndentedString(studyType)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("sponsorKey", "studyKey", "studyId", "studyName", "studyDescription", "studyType", "dateCreated", "dateModified"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Study
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Study.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Study is not found in the empty JSON string", Study.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Study.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Study` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sponsorKey") != null && !jsonObj.get("sponsorKey").isJsonNull()) && !jsonObj.get("sponsorKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sponsorKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sponsorKey").toString()));
      }
      if ((jsonObj.get("studyKey") != null && !jsonObj.get("studyKey").isJsonNull()) && !jsonObj.get("studyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyKey").toString()));
      }
      if ((jsonObj.get("studyName") != null && !jsonObj.get("studyName").isJsonNull()) && !jsonObj.get("studyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyName").toString()));
      }
      if ((jsonObj.get("studyDescription") != null && !jsonObj.get("studyDescription").isJsonNull()) && !jsonObj.get("studyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyDescription").toString()));
      }
      if ((jsonObj.get("studyType") != null && !jsonObj.get("studyType").isJsonNull()) && !jsonObj.get("studyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyType").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull()) && !jsonObj.get("dateModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Study.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Study' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Study> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Study.class));

       return (TypeAdapter<T>) new TypeAdapter<Study>() {
           @Override
           public void write(JsonWriter out, Study value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Study read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Study given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Study
   * @throws IOException if the JSON string is invalid with respect to Study
   */
  public static Study fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Study.class);
  }

  /**
   * Convert an instance of Study to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

