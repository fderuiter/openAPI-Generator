/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Job {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  @javax.annotation.Nullable
  private String jobId;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  @javax.annotation.Nullable
  private String batchId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_STARTED = "dateStarted";
  @SerializedName(SERIALIZED_NAME_DATE_STARTED)
  @javax.annotation.Nullable
  private String dateStarted;

  public static final String SERIALIZED_NAME_DATE_FINISHED = "dateFinished";
  @SerializedName(SERIALIZED_NAME_DATE_FINISHED)
  @javax.annotation.Nullable
  private String dateFinished;

  public Job() {
  }

  public Job jobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Unique job identifier
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(@javax.annotation.Nullable String jobId) {
    this.jobId = jobId;
  }


  public Job batchId(@javax.annotation.Nullable String batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * Batch ID associated with the job (useful for linking with record creation requests)
   * @return batchId
   */
  @javax.annotation.Nullable
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(@javax.annotation.Nullable String batchId) {
    this.batchId = batchId;
  }


  public Job state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the job (e.g., completed, pending)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public Job dateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Timestamp when the job was created
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable String dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Job dateStarted(@javax.annotation.Nullable String dateStarted) {
    this.dateStarted = dateStarted;
    return this;
  }

  /**
   * Timestamp when the job started processing
   * @return dateStarted
   */
  @javax.annotation.Nullable
  public String getDateStarted() {
    return dateStarted;
  }

  public void setDateStarted(@javax.annotation.Nullable String dateStarted) {
    this.dateStarted = dateStarted;
  }


  public Job dateFinished(@javax.annotation.Nullable String dateFinished) {
    this.dateFinished = dateFinished;
    return this;
  }

  /**
   * Timestamp when the job finished processing
   * @return dateFinished
   */
  @javax.annotation.Nullable
  public String getDateFinished() {
    return dateFinished;
  }

  public void setDateFinished(@javax.annotation.Nullable String dateFinished) {
    this.dateFinished = dateFinished;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.jobId, job.jobId) &&
        Objects.equals(this.batchId, job.batchId) &&
        Objects.equals(this.state, job.state) &&
        Objects.equals(this.dateCreated, job.dateCreated) &&
        Objects.equals(this.dateStarted, job.dateStarted) &&
        Objects.equals(this.dateFinished, job.dateFinished);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, batchId, state, dateCreated, dateStarted, dateFinished);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateStarted: ").append(toIndentedString(dateStarted)).append("\n");
    sb.append("    dateFinished: ").append(toIndentedString(dateFinished)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("jobId", "batchId", "state", "dateCreated", "dateStarted", "dateFinished"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("batchId") != null && !jsonObj.get("batchId").isJsonNull()) && !jsonObj.get("batchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if ((jsonObj.get("dateStarted") != null && !jsonObj.get("dateStarted").isJsonNull()) && !jsonObj.get("dateStarted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateStarted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateStarted").toString()));
      }
      if ((jsonObj.get("dateFinished") != null && !jsonObj.get("dateFinished").isJsonNull()) && !jsonObj.get("dateFinished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFinished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFinished").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

