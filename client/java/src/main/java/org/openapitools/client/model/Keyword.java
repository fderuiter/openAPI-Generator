/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Keyword
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Keyword {
  public static final String SERIALIZED_NAME_KEYWORD_NAME = "keywordName";
  @SerializedName(SERIALIZED_NAME_KEYWORD_NAME)
  @javax.annotation.Nullable
  private String keywordName;

  public static final String SERIALIZED_NAME_KEYWORD_KEY = "keywordKey";
  @SerializedName(SERIALIZED_NAME_KEYWORD_KEY)
  @javax.annotation.Nullable
  private String keywordKey;

  public static final String SERIALIZED_NAME_KEYWORD_ID = "keywordId";
  @SerializedName(SERIALIZED_NAME_KEYWORD_ID)
  @javax.annotation.Nullable
  private Integer keywordId;

  public static final String SERIALIZED_NAME_DATE_ADDED = "dateAdded";
  @SerializedName(SERIALIZED_NAME_DATE_ADDED)
  @javax.annotation.Nullable
  private String dateAdded;

  public Keyword() {
  }

  public Keyword keywordName(@javax.annotation.Nullable String keywordName) {
    this.keywordName = keywordName;
    return this;
  }

  /**
   * Name of the keyword
   * @return keywordName
   */
  @javax.annotation.Nullable
  public String getKeywordName() {
    return keywordName;
  }

  public void setKeywordName(@javax.annotation.Nullable String keywordName) {
    this.keywordName = keywordName;
  }


  public Keyword keywordKey(@javax.annotation.Nullable String keywordKey) {
    this.keywordKey = keywordKey;
    return this;
  }

  /**
   * Key of the keyword (short code)
   * @return keywordKey
   */
  @javax.annotation.Nullable
  public String getKeywordKey() {
    return keywordKey;
  }

  public void setKeywordKey(@javax.annotation.Nullable String keywordKey) {
    this.keywordKey = keywordKey;
  }


  public Keyword keywordId(@javax.annotation.Nullable Integer keywordId) {
    this.keywordId = keywordId;
    return this;
  }

  /**
   * Internal keyword ID
   * @return keywordId
   */
  @javax.annotation.Nullable
  public Integer getKeywordId() {
    return keywordId;
  }

  public void setKeywordId(@javax.annotation.Nullable Integer keywordId) {
    this.keywordId = keywordId;
  }


  public Keyword dateAdded(@javax.annotation.Nullable String dateAdded) {
    this.dateAdded = dateAdded;
    return this;
  }

  /**
   * Date when this keyword was added
   * @return dateAdded
   */
  @javax.annotation.Nullable
  public String getDateAdded() {
    return dateAdded;
  }

  public void setDateAdded(@javax.annotation.Nullable String dateAdded) {
    this.dateAdded = dateAdded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Keyword keyword = (Keyword) o;
    return Objects.equals(this.keywordName, keyword.keywordName) &&
        Objects.equals(this.keywordKey, keyword.keywordKey) &&
        Objects.equals(this.keywordId, keyword.keywordId) &&
        Objects.equals(this.dateAdded, keyword.dateAdded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keywordName, keywordKey, keywordId, dateAdded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Keyword {\n");
    sb.append("    keywordName: ").append(toIndentedString(keywordName)).append("\n");
    sb.append("    keywordKey: ").append(toIndentedString(keywordKey)).append("\n");
    sb.append("    keywordId: ").append(toIndentedString(keywordId)).append("\n");
    sb.append("    dateAdded: ").append(toIndentedString(dateAdded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("keywordName", "keywordKey", "keywordId", "dateAdded"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Keyword
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Keyword.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Keyword is not found in the empty JSON string", Keyword.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Keyword.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Keyword` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keywordName") != null && !jsonObj.get("keywordName").isJsonNull()) && !jsonObj.get("keywordName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywordName").toString()));
      }
      if ((jsonObj.get("keywordKey") != null && !jsonObj.get("keywordKey").isJsonNull()) && !jsonObj.get("keywordKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywordKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywordKey").toString()));
      }
      if ((jsonObj.get("dateAdded") != null && !jsonObj.get("dateAdded").isJsonNull()) && !jsonObj.get("dateAdded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateAdded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateAdded").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Keyword.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Keyword' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Keyword> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Keyword.class));

       return (TypeAdapter<T>) new TypeAdapter<Keyword>() {
           @Override
           public void write(JsonWriter out, Keyword value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Keyword read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Keyword given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Keyword
   * @throws IOException if the JSON string is invalid with respect to Keyword
   */
  public static Keyword fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Keyword.class);
  }

  /**
   * Convert an instance of Keyword to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

