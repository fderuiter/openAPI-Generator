/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Role
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T20:11:41.614341130Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class Role {
  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  @javax.annotation.Nullable
  private List<Integer> dateCreated = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  @javax.annotation.Nullable
  private List<Integer> dateModified = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE_ID = "roleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  @javax.annotation.Nullable
  private String roleId;

  public static final String SERIALIZED_NAME_COMMUNITY_ID = "communityId";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_ID)
  @javax.annotation.Nullable
  private Integer communityId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private Integer level;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_INACTIVE = "inactive";
  @SerializedName(SERIALIZED_NAME_INACTIVE)
  @javax.annotation.Nullable
  private Boolean inactive;

  public Role() {
  }

  public Role dateCreated(@javax.annotation.Nullable List<Integer> dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  public Role addDateCreatedItem(Integer dateCreatedItem) {
    if (this.dateCreated == null) {
      this.dateCreated = new ArrayList<>();
    }
    this.dateCreated.add(dateCreatedItem);
    return this;
  }

  /**
   * Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public List<Integer> getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(@javax.annotation.Nullable List<Integer> dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Role dateModified(@javax.annotation.Nullable List<Integer> dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  public Role addDateModifiedItem(Integer dateModifiedItem) {
    if (this.dateModified == null) {
      this.dateModified = new ArrayList<>();
    }
    this.dateModified.add(dateModifiedItem);
    return this;
  }

  /**
   * Timestamp when the role assignment was last modified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public List<Integer> getDateModified() {
    return dateModified;
  }

  public void setDateModified(@javax.annotation.Nullable List<Integer> dateModified) {
    this.dateModified = dateModified;
  }


  public Role roleId(@javax.annotation.Nullable String roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * Unique role ID (UUID)
   * @return roleId
   */
  @javax.annotation.Nullable
  public String getRoleId() {
    return roleId;
  }

  public void setRoleId(@javax.annotation.Nullable String roleId) {
    this.roleId = roleId;
  }


  public Role communityId(@javax.annotation.Nullable Integer communityId) {
    this.communityId = communityId;
    return this;
  }

  /**
   * Community ID or level associated with the role
   * @return communityId
   */
  @javax.annotation.Nullable
  public Integer getCommunityId() {
    return communityId;
  }

  public void setCommunityId(@javax.annotation.Nullable Integer communityId) {
    this.communityId = communityId;
  }


  public Role name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the role
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public Role description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the role
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public Role level(@javax.annotation.Nullable Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Role level or hierarchy
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable Integer level) {
    this.level = level;
  }


  public Role type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Role type/category
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public Role inactive(@javax.annotation.Nullable Boolean inactive) {
    this.inactive = inactive;
    return this;
  }

  /**
   * Whether the role is inactive
   * @return inactive
   */
  @javax.annotation.Nullable
  public Boolean getInactive() {
    return inactive;
  }

  public void setInactive(@javax.annotation.Nullable Boolean inactive) {
    this.inactive = inactive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Role role = (Role) o;
    return Objects.equals(this.dateCreated, role.dateCreated) &&
        Objects.equals(this.dateModified, role.dateModified) &&
        Objects.equals(this.roleId, role.roleId) &&
        Objects.equals(this.communityId, role.communityId) &&
        Objects.equals(this.name, role.name) &&
        Objects.equals(this.description, role.description) &&
        Objects.equals(this.level, role.level) &&
        Objects.equals(this.type, role.type) &&
        Objects.equals(this.inactive, role.inactive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, roleId, communityId, name, description, level, type, inactive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Role {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    communityId: ").append(toIndentedString(communityId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    inactive: ").append(toIndentedString(inactive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("dateCreated", "dateModified", "roleId", "communityId", "name", "description", "level", "type", "inactive"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Role
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Role.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Role is not found in the empty JSON string", Role.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Role.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Role` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull() && !jsonObj.get("dateCreated").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be an array in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dateModified") != null && !jsonObj.get("dateModified").isJsonNull() && !jsonObj.get("dateModified").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateModified` to be an array in the JSON string but got `%s`", jsonObj.get("dateModified").toString()));
      }
      if ((jsonObj.get("roleId") != null && !jsonObj.get("roleId").isJsonNull()) && !jsonObj.get("roleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Role.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Role' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Role> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Role.class));

       return (TypeAdapter<T>) new TypeAdapter<Role>() {
           @Override
           public void write(JsonWriter out, Role value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Role read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Role given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Role
   * @throws IOException if the JSON string is invalid with respect to Role
   */
  public static Role fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Role.class);
  }

  /**
   * Convert an instance of Role to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

