# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Coding(BaseModel):
    """
    Coding
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    site_name: Optional[StrictStr] = Field(default=None, description="Name of the site associated with the coded data", alias="siteName")
    site_id: Optional[StrictInt] = Field(default=None, description="Site ID associated with the coded data", alias="siteId")
    subject_id: Optional[StrictInt] = Field(default=None, description="Subject ID associated with the coded data", alias="subjectId")
    subject_key: Optional[StrictStr] = Field(default=None, description="Subject key (display ID) associated with the coded data", alias="subjectKey")
    form_id: Optional[StrictInt] = Field(default=None, description="Form ID where the coded data originates", alias="formId")
    form_name: Optional[StrictStr] = Field(default=None, description="Name of the form where the coded data originates", alias="formName")
    form_key: Optional[StrictStr] = Field(default=None, description="Form key where the coded data originates", alias="formKey")
    revision: Optional[StrictInt] = Field(default=None, description="Revision number of the coding entry")
    record_id: Optional[StrictInt] = Field(default=None, description="Record ID associated with the coded data", alias="recordId")
    variable: Optional[StrictStr] = Field(default=None, description="Variable name (field) that was coded")
    value: Optional[StrictStr] = Field(default=None, description="Original value entered that required coding")
    coding_id: Optional[StrictInt] = Field(default=None, description="Mednet coding ID", alias="codingId")
    code: Optional[StrictStr] = Field(default=None, description="Standardized code assigned (e.g., dictionary term)")
    coded_by: Optional[StrictStr] = Field(default=None, description="Name of the user who performed the coding", alias="codedBy")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for coding or any notes on changes")
    dictionary_name: Optional[StrictStr] = Field(default=None, description="Name of the dictionary used (e.g., MedDRA)", alias="dictionaryName")
    dictionary_version: Optional[StrictStr] = Field(default=None, description="Version of the dictionary used", alias="dictionaryVersion")
    date_coded: Optional[StrictStr] = Field(default=None, description="Date when the coding was performed", alias="dateCoded")
    __properties: ClassVar[List[str]] = ["studyKey", "siteName", "siteId", "subjectId", "subjectKey", "formId", "formName", "formKey", "revision", "recordId", "variable", "value", "codingId", "code", "codedBy", "reason", "dictionaryName", "dictionaryVersion", "dateCoded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Coding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Coding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "siteName": obj.get("siteName"),
            "siteId": obj.get("siteId"),
            "subjectId": obj.get("subjectId"),
            "subjectKey": obj.get("subjectKey"),
            "formId": obj.get("formId"),
            "formName": obj.get("formName"),
            "formKey": obj.get("formKey"),
            "revision": obj.get("revision"),
            "recordId": obj.get("recordId"),
            "variable": obj.get("variable"),
            "value": obj.get("value"),
            "codingId": obj.get("codingId"),
            "code": obj.get("code"),
            "codedBy": obj.get("codedBy"),
            "reason": obj.get("reason"),
            "dictionaryName": obj.get("dictionaryName"),
            "dictionaryVersion": obj.get("dictionaryVersion"),
            "dateCoded": obj.get("dateCoded")
        })
        return _obj


