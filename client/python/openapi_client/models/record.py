# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.keyword import Keyword
from typing import Optional, Set
from typing_extensions import Self

class Record(BaseModel):
    """
    Record
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    interval_id: Optional[StrictInt] = Field(default=None, description="Interval ID (visit definition) that this record is associated with", alias="intervalId")
    form_id: Optional[StrictInt] = Field(default=None, description="Form ID of the form this record instance belongs to", alias="formId")
    form_key: Optional[StrictStr] = Field(default=None, description="Form key of the form for this record instance", alias="formKey")
    site_id: Optional[StrictInt] = Field(default=None, description="Site ID associated with the record", alias="siteId")
    record_id: Optional[StrictInt] = Field(default=None, description="Unique record ID", alias="recordId")
    record_oid: Optional[StrictStr] = Field(default=None, description="Client-assigned record OID", alias="recordOid")
    record_type: Optional[StrictStr] = Field(default=None, description="Type of record (e.g., SUBJECT for subject-related forms)", alias="recordType")
    record_status: Optional[StrictStr] = Field(default=None, description="Current status of the record (e.g., Record Incomplete, Record Complete)", alias="recordStatus")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the record is marked as deleted")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when this record was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when this record was last modified", alias="dateModified")
    subject_id: Optional[StrictInt] = Field(default=None, description="Mednet subject ID that this record is associated with", alias="subjectId")
    subject_oid: Optional[StrictStr] = Field(default=None, description="Client-assigned subject OID for the subject this record is associated with", alias="subjectOid")
    subject_key: Optional[StrictStr] = Field(default=None, description="Subject display ID that this record is associated with", alias="subjectKey")
    visit_id: Optional[StrictInt] = Field(default=None, description="Visit instance ID that this record is associated with (if applicable)", alias="visitId")
    parent_record_id: Optional[StrictInt] = Field(default=None, description="Record ID of the parent record if this record is a subrecord (if applicable)", alias="parentRecordId")
    keywords: Optional[List[Keyword]] = Field(default=None, description="List of keywords associated with the record")
    record_data: Optional[Dict[str, Any]] = Field(default=None, description="Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.", alias="recordData")
    __properties: ClassVar[List[str]] = ["studyKey", "intervalId", "formId", "formKey", "siteId", "recordId", "recordOid", "recordType", "recordStatus", "deleted", "dateCreated", "dateModified", "subjectId", "subjectOid", "subjectKey", "visitId", "parentRecordId", "keywords", "recordData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Record from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item_keywords in self.keywords:
                if _item_keywords:
                    _items.append(_item_keywords.to_dict())
            _dict['keywords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Record from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "intervalId": obj.get("intervalId"),
            "formId": obj.get("formId"),
            "formKey": obj.get("formKey"),
            "siteId": obj.get("siteId"),
            "recordId": obj.get("recordId"),
            "recordOid": obj.get("recordOid"),
            "recordType": obj.get("recordType"),
            "recordStatus": obj.get("recordStatus"),
            "deleted": obj.get("deleted"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "subjectId": obj.get("subjectId"),
            "subjectOid": obj.get("subjectOid"),
            "subjectKey": obj.get("subjectKey"),
            "visitId": obj.get("visitId"),
            "parentRecordId": obj.get("parentRecordId"),
            "keywords": [Keyword.from_dict(_item) for _item in obj["keywords"]] if obj.get("keywords") is not None else None,
            "recordData": obj.get("recordData")
        })
        return _obj


