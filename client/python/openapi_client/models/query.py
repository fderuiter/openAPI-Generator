# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_comment import QueryComment
from typing import Optional, Set
from typing_extensions import Self

class Query(BaseModel):
    """
    Query
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    subject_id: Optional[StrictInt] = Field(default=None, description="Mednet subject ID associated with the query (if applicable)", alias="subjectId")
    subject_oid: Optional[StrictStr] = Field(default=None, description="Client-assigned subject OID (if applicable)", alias="subjectOid")
    annotation_type: Optional[StrictStr] = Field(default=None, description="Category/type of the query (e.g., subject, record, question)", alias="annotationType")
    annotation_id: Optional[StrictInt] = Field(default=None, description="Unique system identifier for the query", alias="annotationId")
    type: Optional[StrictStr] = Field(default=None, description="System text identifier for the query type/location (subject, record, question)")
    description: Optional[StrictStr] = Field(default=None, description="Description of the query (e.g., reason or context)")
    record_id: Optional[StrictInt] = Field(default=None, description="Record ID associated with the query (if applicable)", alias="recordId")
    variable: Optional[StrictStr] = Field(default=None, description="Variable name (field) associated with the query (if applicable)")
    subject_key: Optional[StrictStr] = Field(default=None, description="Subject display ID associated with the query (if applicable)", alias="subjectKey")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when the query was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when the query was last modified", alias="dateModified")
    query_comments: Optional[List[QueryComment]] = Field(default=None, description="History of comments/actions on the query", alias="queryComments")
    __properties: ClassVar[List[str]] = ["studyKey", "subjectId", "subjectOid", "annotationType", "annotationId", "type", "description", "recordId", "variable", "subjectKey", "dateCreated", "dateModified", "queryComments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in query_comments (list)
        _items = []
        if self.query_comments:
            for _item_query_comments in self.query_comments:
                if _item_query_comments:
                    _items.append(_item_query_comments.to_dict())
            _dict['queryComments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "subjectId": obj.get("subjectId"),
            "subjectOid": obj.get("subjectOid"),
            "annotationType": obj.get("annotationType"),
            "annotationId": obj.get("annotationId"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "recordId": obj.get("recordId"),
            "variable": obj.get("variable"),
            "subjectKey": obj.get("subjectKey"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "queryComments": [QueryComment.from_dict(_item) for _item in obj["queryComments"]] if obj.get("queryComments") is not None else None
        })
        return _obj


