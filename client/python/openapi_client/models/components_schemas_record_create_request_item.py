# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ComponentsSchemasRecordCreateRequestItem(BaseModel):
    """
    ComponentsSchemasRecordCreateRequestItem
    """ # noqa: E501
    form_key: StrictStr = Field(description="Form key identifying the eCRF to create or update", alias="formKey")
    form_id: Optional[StrictInt] = Field(default=None, description="Form ID identifying the eCRF to create or update (alternative to formKey)", alias="formId")
    site_name: Optional[StrictStr] = Field(default=None, description="Name of the site where the record should be created (for new subject registration)", alias="siteName")
    site_id: Optional[StrictInt] = Field(default=None, description="Site ID for the record (alternative to siteName)", alias="siteId")
    subject_key: Optional[StrictStr] = Field(default=None, description="Subject identifier (display ID) for which to create or update the record", alias="subjectKey")
    subject_id: Optional[StrictInt] = Field(default=None, description="Subject ID for which to create or update the record (alternative to subjectKey)", alias="subjectId")
    subject_oid: Optional[StrictStr] = Field(default=None, description="Subject OID for which to create or update the record (alternative to subjectKey)", alias="subjectOid")
    interval_name: Optional[StrictStr] = Field(default=None, description="Name of the interval (visit) for a scheduled record update", alias="intervalName")
    interval_id: Optional[StrictInt] = Field(default=None, description="Interval ID for a scheduled record update (alternative to intervalName)", alias="intervalId")
    record_id: Optional[StrictInt] = Field(default=None, description="Record ID for updating an existing unscheduled record (if applicable)", alias="recordId")
    record_oid: Optional[StrictStr] = Field(default=None, description="Record OID for updating an existing unscheduled record (if applicable)", alias="recordOid")
    data: Dict[str, Any] = Field(description="Key-value pairs of field names and values for the record data")
    __properties: ClassVar[List[str]] = ["formKey", "formId", "siteName", "siteId", "subjectKey", "subjectId", "subjectOid", "intervalName", "intervalId", "recordId", "recordOid", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComponentsSchemasRecordCreateRequestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComponentsSchemasRecordCreateRequestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formKey": obj.get("formKey"),
            "formId": obj.get("formId"),
            "siteName": obj.get("siteName"),
            "siteId": obj.get("siteId"),
            "subjectKey": obj.get("subjectKey"),
            "subjectId": obj.get("subjectId"),
            "subjectOid": obj.get("subjectOid"),
            "intervalName": obj.get("intervalName"),
            "intervalId": obj.get("intervalId"),
            "recordId": obj.get("recordId"),
            "recordOid": obj.get("recordOid"),
            "data": obj.get("data")
        })
        return _obj


