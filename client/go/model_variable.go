/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Variable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Variable{}

// Variable struct for Variable
type Variable struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Mednet variable ID
	VariableId *int32 `json:"variableId,omitempty"`
	// Type of the variable (field type), e.g., RADIO, TEXT, etc.
	VariableType *string `json:"variableType,omitempty"`
	// Name of the variable (question text or label)
	VariableName *string `json:"variableName,omitempty"`
	// Sequence of the variable on the form
	Sequence *int32 `json:"sequence,omitempty"`
	// Number of modifications of the variable (via form metadata revisions)
	Revision *int32 `json:"revision,omitempty"`
	// Whether the variable is marked as disabled (deleted)
	Disabled *bool `json:"disabled,omitempty"`
	// Date when this variable was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this variable was last modified
	DateModified *string `json:"dateModified,omitempty"`
	// ID of the form that this variable belongs to
	FormId *int32 `json:"formId,omitempty"`
	// Client-assigned variable OID
	VariableOid *string `json:"variableOid,omitempty"`
	// Whether the variable is marked as deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Form key of the form that this variable belongs to
	FormKey *string `json:"formKey,omitempty"`
	// Name of the form that this variable belongs to
	FormName *string `json:"formName,omitempty"`
	// User-defined identifier (field name) for the variable
	Label *string `json:"label,omitempty"`
	// Whether the variable is flagged as blinded (hidden in certain contexts)
	Blinded *bool `json:"blinded,omitempty"`
}

// NewVariable instantiates a new Variable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariable() *Variable {
	this := Variable{}
	return &this
}

// NewVariableWithDefaults instantiates a new Variable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableWithDefaults() *Variable {
	this := Variable{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Variable) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Variable) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Variable) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetVariableId returns the VariableId field value if set, zero value otherwise.
func (o *Variable) GetVariableId() int32 {
	if o == nil || IsNil(o.VariableId) {
		var ret int32
		return ret
	}
	return *o.VariableId
}

// GetVariableIdOk returns a tuple with the VariableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetVariableIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VariableId) {
		return nil, false
	}
	return o.VariableId, true
}

// HasVariableId returns a boolean if a field has been set.
func (o *Variable) HasVariableId() bool {
	if o != nil && !IsNil(o.VariableId) {
		return true
	}

	return false
}

// SetVariableId gets a reference to the given int32 and assigns it to the VariableId field.
func (o *Variable) SetVariableId(v int32) {
	o.VariableId = &v
}

// GetVariableType returns the VariableType field value if set, zero value otherwise.
func (o *Variable) GetVariableType() string {
	if o == nil || IsNil(o.VariableType) {
		var ret string
		return ret
	}
	return *o.VariableType
}

// GetVariableTypeOk returns a tuple with the VariableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetVariableTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VariableType) {
		return nil, false
	}
	return o.VariableType, true
}

// HasVariableType returns a boolean if a field has been set.
func (o *Variable) HasVariableType() bool {
	if o != nil && !IsNil(o.VariableType) {
		return true
	}

	return false
}

// SetVariableType gets a reference to the given string and assigns it to the VariableType field.
func (o *Variable) SetVariableType(v string) {
	o.VariableType = &v
}

// GetVariableName returns the VariableName field value if set, zero value otherwise.
func (o *Variable) GetVariableName() string {
	if o == nil || IsNil(o.VariableName) {
		var ret string
		return ret
	}
	return *o.VariableName
}

// GetVariableNameOk returns a tuple with the VariableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetVariableNameOk() (*string, bool) {
	if o == nil || IsNil(o.VariableName) {
		return nil, false
	}
	return o.VariableName, true
}

// HasVariableName returns a boolean if a field has been set.
func (o *Variable) HasVariableName() bool {
	if o != nil && !IsNil(o.VariableName) {
		return true
	}

	return false
}

// SetVariableName gets a reference to the given string and assigns it to the VariableName field.
func (o *Variable) SetVariableName(v string) {
	o.VariableName = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *Variable) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *Variable) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *Variable) SetSequence(v int32) {
	o.Sequence = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *Variable) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *Variable) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *Variable) SetRevision(v int32) {
	o.Revision = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Variable) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Variable) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Variable) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Variable) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Variable) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Variable) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Variable) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Variable) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Variable) SetDateModified(v string) {
	o.DateModified = &v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *Variable) GetFormId() int32 {
	if o == nil || IsNil(o.FormId) {
		var ret int32
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetFormIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *Variable) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given int32 and assigns it to the FormId field.
func (o *Variable) SetFormId(v int32) {
	o.FormId = &v
}

// GetVariableOid returns the VariableOid field value if set, zero value otherwise.
func (o *Variable) GetVariableOid() string {
	if o == nil || IsNil(o.VariableOid) {
		var ret string
		return ret
	}
	return *o.VariableOid
}

// GetVariableOidOk returns a tuple with the VariableOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetVariableOidOk() (*string, bool) {
	if o == nil || IsNil(o.VariableOid) {
		return nil, false
	}
	return o.VariableOid, true
}

// HasVariableOid returns a boolean if a field has been set.
func (o *Variable) HasVariableOid() bool {
	if o != nil && !IsNil(o.VariableOid) {
		return true
	}

	return false
}

// SetVariableOid gets a reference to the given string and assigns it to the VariableOid field.
func (o *Variable) SetVariableOid(v string) {
	o.VariableOid = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Variable) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Variable) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Variable) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetFormKey returns the FormKey field value if set, zero value otherwise.
func (o *Variable) GetFormKey() string {
	if o == nil || IsNil(o.FormKey) {
		var ret string
		return ret
	}
	return *o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetFormKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FormKey) {
		return nil, false
	}
	return o.FormKey, true
}

// HasFormKey returns a boolean if a field has been set.
func (o *Variable) HasFormKey() bool {
	if o != nil && !IsNil(o.FormKey) {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given string and assigns it to the FormKey field.
func (o *Variable) SetFormKey(v string) {
	o.FormKey = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *Variable) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *Variable) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *Variable) SetFormName(v string) {
	o.FormName = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Variable) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Variable) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Variable) SetLabel(v string) {
	o.Label = &v
}

// GetBlinded returns the Blinded field value if set, zero value otherwise.
func (o *Variable) GetBlinded() bool {
	if o == nil || IsNil(o.Blinded) {
		var ret bool
		return ret
	}
	return *o.Blinded
}

// GetBlindedOk returns a tuple with the Blinded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Variable) GetBlindedOk() (*bool, bool) {
	if o == nil || IsNil(o.Blinded) {
		return nil, false
	}
	return o.Blinded, true
}

// HasBlinded returns a boolean if a field has been set.
func (o *Variable) HasBlinded() bool {
	if o != nil && !IsNil(o.Blinded) {
		return true
	}

	return false
}

// SetBlinded gets a reference to the given bool and assigns it to the Blinded field.
func (o *Variable) SetBlinded(v bool) {
	o.Blinded = &v
}

func (o Variable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Variable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.VariableId) {
		toSerialize["variableId"] = o.VariableId
	}
	if !IsNil(o.VariableType) {
		toSerialize["variableType"] = o.VariableType
	}
	if !IsNil(o.VariableName) {
		toSerialize["variableName"] = o.VariableName
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.VariableOid) {
		toSerialize["variableOid"] = o.VariableOid
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.FormKey) {
		toSerialize["formKey"] = o.FormKey
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Blinded) {
		toSerialize["blinded"] = o.Blinded
	}
	return toSerialize, nil
}

type NullableVariable struct {
	value *Variable
	isSet bool
}

func (v NullableVariable) Get() *Variable {
	return v.value
}

func (v *NullableVariable) Set(val *Variable) {
	v.value = val
	v.isSet = true
}

func (v NullableVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariable(val *Variable) *NullableVariable {
	return &NullableVariable{value: val, isSet: true}
}

func (v NullableVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


