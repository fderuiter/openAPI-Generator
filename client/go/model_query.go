/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Query type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Query{}

// Query struct for Query
type Query struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Mednet subject ID associated with the query (if applicable)
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Client-assigned subject OID (if applicable)
	SubjectOid *string `json:"subjectOid,omitempty"`
	// Category/type of the query (e.g., subject, record, question)
	AnnotationType *string `json:"annotationType,omitempty"`
	// Unique system identifier for the query
	AnnotationId *int32 `json:"annotationId,omitempty"`
	// System text identifier for the query type/location (subject, record, question)
	Type *string `json:"type,omitempty"`
	// Description of the query (e.g., reason or context)
	Description *string `json:"description,omitempty"`
	// Record ID associated with the query (if applicable)
	RecordId *int32 `json:"recordId,omitempty"`
	// Variable name (field) associated with the query (if applicable)
	Variable *string `json:"variable,omitempty"`
	// Subject display ID associated with the query (if applicable)
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Date when the query was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when the query was last modified
	DateModified *string `json:"dateModified,omitempty"`
	// History of comments/actions on the query
	QueryComments []QueryComment `json:"queryComments,omitempty"`
}

// NewQuery instantiates a new Query object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuery() *Query {
	this := Query{}
	return &this
}

// NewQueryWithDefaults instantiates a new Query object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryWithDefaults() *Query {
	this := Query{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Query) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Query) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Query) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *Query) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *Query) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *Query) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectOid returns the SubjectOid field value if set, zero value otherwise.
func (o *Query) GetSubjectOid() string {
	if o == nil || IsNil(o.SubjectOid) {
		var ret string
		return ret
	}
	return *o.SubjectOid
}

// GetSubjectOidOk returns a tuple with the SubjectOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetSubjectOidOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOid) {
		return nil, false
	}
	return o.SubjectOid, true
}

// HasSubjectOid returns a boolean if a field has been set.
func (o *Query) HasSubjectOid() bool {
	if o != nil && !IsNil(o.SubjectOid) {
		return true
	}

	return false
}

// SetSubjectOid gets a reference to the given string and assigns it to the SubjectOid field.
func (o *Query) SetSubjectOid(v string) {
	o.SubjectOid = &v
}

// GetAnnotationType returns the AnnotationType field value if set, zero value otherwise.
func (o *Query) GetAnnotationType() string {
	if o == nil || IsNil(o.AnnotationType) {
		var ret string
		return ret
	}
	return *o.AnnotationType
}

// GetAnnotationTypeOk returns a tuple with the AnnotationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetAnnotationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AnnotationType) {
		return nil, false
	}
	return o.AnnotationType, true
}

// HasAnnotationType returns a boolean if a field has been set.
func (o *Query) HasAnnotationType() bool {
	if o != nil && !IsNil(o.AnnotationType) {
		return true
	}

	return false
}

// SetAnnotationType gets a reference to the given string and assigns it to the AnnotationType field.
func (o *Query) SetAnnotationType(v string) {
	o.AnnotationType = &v
}

// GetAnnotationId returns the AnnotationId field value if set, zero value otherwise.
func (o *Query) GetAnnotationId() int32 {
	if o == nil || IsNil(o.AnnotationId) {
		var ret int32
		return ret
	}
	return *o.AnnotationId
}

// GetAnnotationIdOk returns a tuple with the AnnotationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetAnnotationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AnnotationId) {
		return nil, false
	}
	return o.AnnotationId, true
}

// HasAnnotationId returns a boolean if a field has been set.
func (o *Query) HasAnnotationId() bool {
	if o != nil && !IsNil(o.AnnotationId) {
		return true
	}

	return false
}

// SetAnnotationId gets a reference to the given int32 and assigns it to the AnnotationId field.
func (o *Query) SetAnnotationId(v int32) {
	o.AnnotationId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Query) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Query) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Query) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Query) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Query) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Query) SetDescription(v string) {
	o.Description = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *Query) GetRecordId() int32 {
	if o == nil || IsNil(o.RecordId) {
		var ret int32
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *Query) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given int32 and assigns it to the RecordId field.
func (o *Query) SetRecordId(v int32) {
	o.RecordId = &v
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *Query) GetVariable() string {
	if o == nil || IsNil(o.Variable) {
		var ret string
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetVariableOk() (*string, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *Query) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given string and assigns it to the Variable field.
func (o *Query) SetVariable(v string) {
	o.Variable = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *Query) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *Query) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *Query) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Query) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Query) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Query) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Query) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Query) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Query) SetDateModified(v string) {
	o.DateModified = &v
}

// GetQueryComments returns the QueryComments field value if set, zero value otherwise.
func (o *Query) GetQueryComments() []QueryComment {
	if o == nil || IsNil(o.QueryComments) {
		var ret []QueryComment
		return ret
	}
	return o.QueryComments
}

// GetQueryCommentsOk returns a tuple with the QueryComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Query) GetQueryCommentsOk() ([]QueryComment, bool) {
	if o == nil || IsNil(o.QueryComments) {
		return nil, false
	}
	return o.QueryComments, true
}

// HasQueryComments returns a boolean if a field has been set.
func (o *Query) HasQueryComments() bool {
	if o != nil && !IsNil(o.QueryComments) {
		return true
	}

	return false
}

// SetQueryComments gets a reference to the given []QueryComment and assigns it to the QueryComments field.
func (o *Query) SetQueryComments(v []QueryComment) {
	o.QueryComments = v
}

func (o Query) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Query) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectOid) {
		toSerialize["subjectOid"] = o.SubjectOid
	}
	if !IsNil(o.AnnotationType) {
		toSerialize["annotationType"] = o.AnnotationType
	}
	if !IsNil(o.AnnotationId) {
		toSerialize["annotationId"] = o.AnnotationId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	if !IsNil(o.QueryComments) {
		toSerialize["queryComments"] = o.QueryComments
	}
	return toSerialize, nil
}

type NullableQuery struct {
	value *Query
	isSet bool
}

func (v NullableQuery) Get() *Query {
	return v.value
}

func (v *NullableQuery) Set(val *Query) {
	v.value = val
	v.isSet = true
}

func (v NullableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuery(val *Query) *NullableQuery {
	return &NullableQuery{value: val, isSet: true}
}

func (v NullableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


