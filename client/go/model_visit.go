/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Visit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Visit{}

// Visit struct for Visit
type Visit struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Unique system identifier for the subject visit instance
	VisitId *int32 `json:"visitId,omitempty"`
	// Unique system identifier of the interval definition for this visit
	IntervalId *int32 `json:"intervalId,omitempty"`
	// Name of the interval (visit) for this visit instance
	IntervalName *string `json:"intervalName,omitempty"`
	// Mednet subject ID of the subject
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Protocol-assigned subject identifier
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Start date of the visit window (in YYYY-MM-DD format)
	StartDate *string `json:"startDate,omitempty"`
	// End date of the visit window (in YYYY-MM-DD format)
	EndDate *string `json:"endDate,omitempty"`
	// Due date of the visit (in YYYY-MM-DD format), if applicable
	DueDate *string `json:"dueDate,omitempty"`
	// Actual date the visit took place (in YYYY-MM-DD format)
	VisitDate *string `json:"visitDate,omitempty"`
	// Name of the form used to capture the actual visit date
	VisitDateForm *string `json:"visitDateForm,omitempty"`
	// Variable name of the field capturing the actual visit date
	VisitDateQuestion *string `json:"visitDateQuestion,omitempty"`
	// Whether the visit instance is marked as deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Date when this visit record was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this visit record was last modified
	DateModified *string `json:"dateModified,omitempty"`
}

// NewVisit instantiates a new Visit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisit() *Visit {
	this := Visit{}
	return &this
}

// NewVisitWithDefaults instantiates a new Visit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisitWithDefaults() *Visit {
	this := Visit{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Visit) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Visit) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Visit) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetVisitId returns the VisitId field value if set, zero value otherwise.
func (o *Visit) GetVisitId() int32 {
	if o == nil || IsNil(o.VisitId) {
		var ret int32
		return ret
	}
	return *o.VisitId
}

// GetVisitIdOk returns a tuple with the VisitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetVisitIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VisitId) {
		return nil, false
	}
	return o.VisitId, true
}

// HasVisitId returns a boolean if a field has been set.
func (o *Visit) HasVisitId() bool {
	if o != nil && !IsNil(o.VisitId) {
		return true
	}

	return false
}

// SetVisitId gets a reference to the given int32 and assigns it to the VisitId field.
func (o *Visit) SetVisitId(v int32) {
	o.VisitId = &v
}

// GetIntervalId returns the IntervalId field value if set, zero value otherwise.
func (o *Visit) GetIntervalId() int32 {
	if o == nil || IsNil(o.IntervalId) {
		var ret int32
		return ret
	}
	return *o.IntervalId
}

// GetIntervalIdOk returns a tuple with the IntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalId) {
		return nil, false
	}
	return o.IntervalId, true
}

// HasIntervalId returns a boolean if a field has been set.
func (o *Visit) HasIntervalId() bool {
	if o != nil && !IsNil(o.IntervalId) {
		return true
	}

	return false
}

// SetIntervalId gets a reference to the given int32 and assigns it to the IntervalId field.
func (o *Visit) SetIntervalId(v int32) {
	o.IntervalId = &v
}

// GetIntervalName returns the IntervalName field value if set, zero value otherwise.
func (o *Visit) GetIntervalName() string {
	if o == nil || IsNil(o.IntervalName) {
		var ret string
		return ret
	}
	return *o.IntervalName
}

// GetIntervalNameOk returns a tuple with the IntervalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetIntervalNameOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalName) {
		return nil, false
	}
	return o.IntervalName, true
}

// HasIntervalName returns a boolean if a field has been set.
func (o *Visit) HasIntervalName() bool {
	if o != nil && !IsNil(o.IntervalName) {
		return true
	}

	return false
}

// SetIntervalName gets a reference to the given string and assigns it to the IntervalName field.
func (o *Visit) SetIntervalName(v string) {
	o.IntervalName = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *Visit) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *Visit) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *Visit) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *Visit) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *Visit) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *Visit) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Visit) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Visit) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Visit) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Visit) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Visit) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Visit) SetEndDate(v string) {
	o.EndDate = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Visit) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Visit) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *Visit) SetDueDate(v string) {
	o.DueDate = &v
}

// GetVisitDate returns the VisitDate field value if set, zero value otherwise.
func (o *Visit) GetVisitDate() string {
	if o == nil || IsNil(o.VisitDate) {
		var ret string
		return ret
	}
	return *o.VisitDate
}

// GetVisitDateOk returns a tuple with the VisitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetVisitDateOk() (*string, bool) {
	if o == nil || IsNil(o.VisitDate) {
		return nil, false
	}
	return o.VisitDate, true
}

// HasVisitDate returns a boolean if a field has been set.
func (o *Visit) HasVisitDate() bool {
	if o != nil && !IsNil(o.VisitDate) {
		return true
	}

	return false
}

// SetVisitDate gets a reference to the given string and assigns it to the VisitDate field.
func (o *Visit) SetVisitDate(v string) {
	o.VisitDate = &v
}

// GetVisitDateForm returns the VisitDateForm field value if set, zero value otherwise.
func (o *Visit) GetVisitDateForm() string {
	if o == nil || IsNil(o.VisitDateForm) {
		var ret string
		return ret
	}
	return *o.VisitDateForm
}

// GetVisitDateFormOk returns a tuple with the VisitDateForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetVisitDateFormOk() (*string, bool) {
	if o == nil || IsNil(o.VisitDateForm) {
		return nil, false
	}
	return o.VisitDateForm, true
}

// HasVisitDateForm returns a boolean if a field has been set.
func (o *Visit) HasVisitDateForm() bool {
	if o != nil && !IsNil(o.VisitDateForm) {
		return true
	}

	return false
}

// SetVisitDateForm gets a reference to the given string and assigns it to the VisitDateForm field.
func (o *Visit) SetVisitDateForm(v string) {
	o.VisitDateForm = &v
}

// GetVisitDateQuestion returns the VisitDateQuestion field value if set, zero value otherwise.
func (o *Visit) GetVisitDateQuestion() string {
	if o == nil || IsNil(o.VisitDateQuestion) {
		var ret string
		return ret
	}
	return *o.VisitDateQuestion
}

// GetVisitDateQuestionOk returns a tuple with the VisitDateQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetVisitDateQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.VisitDateQuestion) {
		return nil, false
	}
	return o.VisitDateQuestion, true
}

// HasVisitDateQuestion returns a boolean if a field has been set.
func (o *Visit) HasVisitDateQuestion() bool {
	if o != nil && !IsNil(o.VisitDateQuestion) {
		return true
	}

	return false
}

// SetVisitDateQuestion gets a reference to the given string and assigns it to the VisitDateQuestion field.
func (o *Visit) SetVisitDateQuestion(v string) {
	o.VisitDateQuestion = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Visit) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Visit) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Visit) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Visit) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Visit) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Visit) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Visit) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Visit) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Visit) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Visit) SetDateModified(v string) {
	o.DateModified = &v
}

func (o Visit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Visit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.VisitId) {
		toSerialize["visitId"] = o.VisitId
	}
	if !IsNil(o.IntervalId) {
		toSerialize["intervalId"] = o.IntervalId
	}
	if !IsNil(o.IntervalName) {
		toSerialize["intervalName"] = o.IntervalName
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.DueDate) {
		toSerialize["dueDate"] = o.DueDate
	}
	if !IsNil(o.VisitDate) {
		toSerialize["visitDate"] = o.VisitDate
	}
	if !IsNil(o.VisitDateForm) {
		toSerialize["visitDateForm"] = o.VisitDateForm
	}
	if !IsNil(o.VisitDateQuestion) {
		toSerialize["visitDateQuestion"] = o.VisitDateQuestion
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	return toSerialize, nil
}

type NullableVisit struct {
	value *Visit
	isSet bool
}

func (v NullableVisit) Get() *Visit {
	return v.value
}

func (v *NullableVisit) Set(val *Visit) {
	v.value = val
	v.isSet = true
}

func (v NullableVisit) IsSet() bool {
	return v.isSet
}

func (v *NullableVisit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisit(val *Visit) *NullableVisit {
	return &NullableVisit{value: val, isSet: true}
}

func (v NullableVisit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


