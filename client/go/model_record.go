/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Record type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Record{}

// Record struct for Record
type Record struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Interval ID (visit definition) that this record is associated with
	IntervalId *int32 `json:"intervalId,omitempty"`
	// Form ID of the form this record instance belongs to
	FormId *int32 `json:"formId,omitempty"`
	// Form key of the form for this record instance
	FormKey *string `json:"formKey,omitempty"`
	// Site ID associated with the record
	SiteId *int32 `json:"siteId,omitempty"`
	// Unique record ID
	RecordId *int32 `json:"recordId,omitempty"`
	// Client-assigned record OID
	RecordOid *string `json:"recordOid,omitempty"`
	// Type of record (e.g., SUBJECT for subject-related forms)
	RecordType *string `json:"recordType,omitempty"`
	// Current status of the record (e.g., Record Incomplete, Record Complete)
	RecordStatus *string `json:"recordStatus,omitempty"`
	// Whether the record is marked as deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Date when this record was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this record was last modified
	DateModified *string `json:"dateModified,omitempty"`
	// Mednet subject ID that this record is associated with
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Client-assigned subject OID for the subject this record is associated with
	SubjectOid *string `json:"subjectOid,omitempty"`
	// Subject display ID that this record is associated with
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Visit instance ID that this record is associated with (if applicable)
	VisitId *int32 `json:"visitId,omitempty"`
	// Record ID of the parent record if this record is a subrecord (if applicable)
	ParentRecordId *int32 `json:"parentRecordId,omitempty"`
	// List of keywords associated with the record
	Keywords []Keyword `json:"keywords,omitempty"`
	// Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
	RecordData map[string]interface{} `json:"recordData,omitempty"`
}

// NewRecord instantiates a new Record object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecord() *Record {
	this := Record{}
	return &this
}

// NewRecordWithDefaults instantiates a new Record object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordWithDefaults() *Record {
	this := Record{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Record) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Record) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Record) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetIntervalId returns the IntervalId field value if set, zero value otherwise.
func (o *Record) GetIntervalId() int32 {
	if o == nil || IsNil(o.IntervalId) {
		var ret int32
		return ret
	}
	return *o.IntervalId
}

// GetIntervalIdOk returns a tuple with the IntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalId) {
		return nil, false
	}
	return o.IntervalId, true
}

// HasIntervalId returns a boolean if a field has been set.
func (o *Record) HasIntervalId() bool {
	if o != nil && !IsNil(o.IntervalId) {
		return true
	}

	return false
}

// SetIntervalId gets a reference to the given int32 and assigns it to the IntervalId field.
func (o *Record) SetIntervalId(v int32) {
	o.IntervalId = &v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *Record) GetFormId() int32 {
	if o == nil || IsNil(o.FormId) {
		var ret int32
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetFormIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *Record) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given int32 and assigns it to the FormId field.
func (o *Record) SetFormId(v int32) {
	o.FormId = &v
}

// GetFormKey returns the FormKey field value if set, zero value otherwise.
func (o *Record) GetFormKey() string {
	if o == nil || IsNil(o.FormKey) {
		var ret string
		return ret
	}
	return *o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetFormKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FormKey) {
		return nil, false
	}
	return o.FormKey, true
}

// HasFormKey returns a boolean if a field has been set.
func (o *Record) HasFormKey() bool {
	if o != nil && !IsNil(o.FormKey) {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given string and assigns it to the FormKey field.
func (o *Record) SetFormKey(v string) {
	o.FormKey = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Record) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Record) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *Record) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *Record) GetRecordId() int32 {
	if o == nil || IsNil(o.RecordId) {
		var ret int32
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *Record) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given int32 and assigns it to the RecordId field.
func (o *Record) SetRecordId(v int32) {
	o.RecordId = &v
}

// GetRecordOid returns the RecordOid field value if set, zero value otherwise.
func (o *Record) GetRecordOid() string {
	if o == nil || IsNil(o.RecordOid) {
		var ret string
		return ret
	}
	return *o.RecordOid
}

// GetRecordOidOk returns a tuple with the RecordOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetRecordOidOk() (*string, bool) {
	if o == nil || IsNil(o.RecordOid) {
		return nil, false
	}
	return o.RecordOid, true
}

// HasRecordOid returns a boolean if a field has been set.
func (o *Record) HasRecordOid() bool {
	if o != nil && !IsNil(o.RecordOid) {
		return true
	}

	return false
}

// SetRecordOid gets a reference to the given string and assigns it to the RecordOid field.
func (o *Record) SetRecordOid(v string) {
	o.RecordOid = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *Record) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *Record) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *Record) SetRecordType(v string) {
	o.RecordType = &v
}

// GetRecordStatus returns the RecordStatus field value if set, zero value otherwise.
func (o *Record) GetRecordStatus() string {
	if o == nil || IsNil(o.RecordStatus) {
		var ret string
		return ret
	}
	return *o.RecordStatus
}

// GetRecordStatusOk returns a tuple with the RecordStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetRecordStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RecordStatus) {
		return nil, false
	}
	return o.RecordStatus, true
}

// HasRecordStatus returns a boolean if a field has been set.
func (o *Record) HasRecordStatus() bool {
	if o != nil && !IsNil(o.RecordStatus) {
		return true
	}

	return false
}

// SetRecordStatus gets a reference to the given string and assigns it to the RecordStatus field.
func (o *Record) SetRecordStatus(v string) {
	o.RecordStatus = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Record) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Record) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Record) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Record) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Record) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Record) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Record) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Record) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Record) SetDateModified(v string) {
	o.DateModified = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *Record) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *Record) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *Record) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectOid returns the SubjectOid field value if set, zero value otherwise.
func (o *Record) GetSubjectOid() string {
	if o == nil || IsNil(o.SubjectOid) {
		var ret string
		return ret
	}
	return *o.SubjectOid
}

// GetSubjectOidOk returns a tuple with the SubjectOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetSubjectOidOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOid) {
		return nil, false
	}
	return o.SubjectOid, true
}

// HasSubjectOid returns a boolean if a field has been set.
func (o *Record) HasSubjectOid() bool {
	if o != nil && !IsNil(o.SubjectOid) {
		return true
	}

	return false
}

// SetSubjectOid gets a reference to the given string and assigns it to the SubjectOid field.
func (o *Record) SetSubjectOid(v string) {
	o.SubjectOid = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *Record) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *Record) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *Record) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetVisitId returns the VisitId field value if set, zero value otherwise.
func (o *Record) GetVisitId() int32 {
	if o == nil || IsNil(o.VisitId) {
		var ret int32
		return ret
	}
	return *o.VisitId
}

// GetVisitIdOk returns a tuple with the VisitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetVisitIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VisitId) {
		return nil, false
	}
	return o.VisitId, true
}

// HasVisitId returns a boolean if a field has been set.
func (o *Record) HasVisitId() bool {
	if o != nil && !IsNil(o.VisitId) {
		return true
	}

	return false
}

// SetVisitId gets a reference to the given int32 and assigns it to the VisitId field.
func (o *Record) SetVisitId(v int32) {
	o.VisitId = &v
}

// GetParentRecordId returns the ParentRecordId field value if set, zero value otherwise.
func (o *Record) GetParentRecordId() int32 {
	if o == nil || IsNil(o.ParentRecordId) {
		var ret int32
		return ret
	}
	return *o.ParentRecordId
}

// GetParentRecordIdOk returns a tuple with the ParentRecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetParentRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentRecordId) {
		return nil, false
	}
	return o.ParentRecordId, true
}

// HasParentRecordId returns a boolean if a field has been set.
func (o *Record) HasParentRecordId() bool {
	if o != nil && !IsNil(o.ParentRecordId) {
		return true
	}

	return false
}

// SetParentRecordId gets a reference to the given int32 and assigns it to the ParentRecordId field.
func (o *Record) SetParentRecordId(v int32) {
	o.ParentRecordId = &v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *Record) GetKeywords() []Keyword {
	if o == nil || IsNil(o.Keywords) {
		var ret []Keyword
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetKeywordsOk() ([]Keyword, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *Record) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []Keyword and assigns it to the Keywords field.
func (o *Record) SetKeywords(v []Keyword) {
	o.Keywords = v
}

// GetRecordData returns the RecordData field value if set, zero value otherwise.
func (o *Record) GetRecordData() map[string]interface{} {
	if o == nil || IsNil(o.RecordData) {
		var ret map[string]interface{}
		return ret
	}
	return o.RecordData
}

// GetRecordDataOk returns a tuple with the RecordData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Record) GetRecordDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RecordData) {
		return map[string]interface{}{}, false
	}
	return o.RecordData, true
}

// HasRecordData returns a boolean if a field has been set.
func (o *Record) HasRecordData() bool {
	if o != nil && !IsNil(o.RecordData) {
		return true
	}

	return false
}

// SetRecordData gets a reference to the given map[string]interface{} and assigns it to the RecordData field.
func (o *Record) SetRecordData(v map[string]interface{}) {
	o.RecordData = v
}

func (o Record) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Record) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.IntervalId) {
		toSerialize["intervalId"] = o.IntervalId
	}
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.FormKey) {
		toSerialize["formKey"] = o.FormKey
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.RecordOid) {
		toSerialize["recordOid"] = o.RecordOid
	}
	if !IsNil(o.RecordType) {
		toSerialize["recordType"] = o.RecordType
	}
	if !IsNil(o.RecordStatus) {
		toSerialize["recordStatus"] = o.RecordStatus
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectOid) {
		toSerialize["subjectOid"] = o.SubjectOid
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.VisitId) {
		toSerialize["visitId"] = o.VisitId
	}
	if !IsNil(o.ParentRecordId) {
		toSerialize["parentRecordId"] = o.ParentRecordId
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	if !IsNil(o.RecordData) {
		toSerialize["recordData"] = o.RecordData
	}
	return toSerialize, nil
}

type NullableRecord struct {
	value *Record
	isSet bool
}

func (v NullableRecord) Get() *Record {
	return v.value
}

func (v *NullableRecord) Set(val *Record) {
	v.value = val
	v.isSet = true
}

func (v NullableRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecord(val *Record) *NullableRecord {
	return &NullableRecord{value: val, isSet: true}
}

func (v NullableRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


