/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Interval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interval{}

// Interval struct for Interval
type Interval struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Unique system identifier for the interval (visit definition)
	IntervalId *int32 `json:"intervalId,omitempty"`
	// Name of the interval (visit) as defined in the study
	IntervalName *string `json:"intervalName,omitempty"`
	// Description of the interval (visit)
	IntervalDescription *string `json:"intervalDescription,omitempty"`
	// Sequence number of the interval in the schedule
	IntervalSequence *int32 `json:"intervalSequence,omitempty"`
	// Identifier for the interval group (if intervals are grouped)
	IntervalGroupId *int32 `json:"intervalGroupId,omitempty"`
	// Name of the interval group
	IntervalGroupName *string `json:"intervalGroupName,omitempty"`
	// Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
	Timeline *string `json:"timeline,omitempty"`
	// Baseline interval used for calculating this intervalâ€™s dates
	DefinedUsingInterval *string `json:"definedUsingInterval,omitempty"`
	// Baseline form (name) from which the calculation date is taken
	WindowCalculationForm *string `json:"windowCalculationForm,omitempty"`
	// Baseline field (variable name) from which the calculation date is taken
	WindowCalculationDate *string `json:"windowCalculationDate,omitempty"`
	// Form used to capture the actual date for this interval
	ActualDateForm *string `json:"actualDateForm,omitempty"`
	// Field (variable name) used to capture the actual date for this interval
	ActualDate *string `json:"actualDate,omitempty"`
	// Number of days from the calculation date when the interval is due
	DueDateWillBeIn *int32 `json:"dueDateWillBeIn,omitempty"`
	// Number of days before the due date that are allowed (negative window)
	NegativeSlack *int32 `json:"negativeSlack,omitempty"`
	// Number of days after the due date that are allowed (positive window)
	PositiveSlack *int32 `json:"positiveSlack,omitempty"`
	// Number of days of grace period for ePRO completion after due date
	EproGracePeriod *int32 `json:"eproGracePeriod,omitempty"`
	// List of forms that are scheduled in this interval
	Forms []ComponentsSchemasIntervalFormsItem `json:"forms,omitempty"`
	// Whether the interval is soft-deleted (disabled)
	Disabled *bool `json:"disabled,omitempty"`
	// Date when this interval was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this interval was last modified
	DateModified *string `json:"dateModified,omitempty"`
}

// NewInterval instantiates a new Interval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterval() *Interval {
	this := Interval{}
	return &this
}

// NewIntervalWithDefaults instantiates a new Interval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntervalWithDefaults() *Interval {
	this := Interval{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Interval) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Interval) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Interval) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetIntervalId returns the IntervalId field value if set, zero value otherwise.
func (o *Interval) GetIntervalId() int32 {
	if o == nil || IsNil(o.IntervalId) {
		var ret int32
		return ret
	}
	return *o.IntervalId
}

// GetIntervalIdOk returns a tuple with the IntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalId) {
		return nil, false
	}
	return o.IntervalId, true
}

// HasIntervalId returns a boolean if a field has been set.
func (o *Interval) HasIntervalId() bool {
	if o != nil && !IsNil(o.IntervalId) {
		return true
	}

	return false
}

// SetIntervalId gets a reference to the given int32 and assigns it to the IntervalId field.
func (o *Interval) SetIntervalId(v int32) {
	o.IntervalId = &v
}

// GetIntervalName returns the IntervalName field value if set, zero value otherwise.
func (o *Interval) GetIntervalName() string {
	if o == nil || IsNil(o.IntervalName) {
		var ret string
		return ret
	}
	return *o.IntervalName
}

// GetIntervalNameOk returns a tuple with the IntervalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalNameOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalName) {
		return nil, false
	}
	return o.IntervalName, true
}

// HasIntervalName returns a boolean if a field has been set.
func (o *Interval) HasIntervalName() bool {
	if o != nil && !IsNil(o.IntervalName) {
		return true
	}

	return false
}

// SetIntervalName gets a reference to the given string and assigns it to the IntervalName field.
func (o *Interval) SetIntervalName(v string) {
	o.IntervalName = &v
}

// GetIntervalDescription returns the IntervalDescription field value if set, zero value otherwise.
func (o *Interval) GetIntervalDescription() string {
	if o == nil || IsNil(o.IntervalDescription) {
		var ret string
		return ret
	}
	return *o.IntervalDescription
}

// GetIntervalDescriptionOk returns a tuple with the IntervalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalDescription) {
		return nil, false
	}
	return o.IntervalDescription, true
}

// HasIntervalDescription returns a boolean if a field has been set.
func (o *Interval) HasIntervalDescription() bool {
	if o != nil && !IsNil(o.IntervalDescription) {
		return true
	}

	return false
}

// SetIntervalDescription gets a reference to the given string and assigns it to the IntervalDescription field.
func (o *Interval) SetIntervalDescription(v string) {
	o.IntervalDescription = &v
}

// GetIntervalSequence returns the IntervalSequence field value if set, zero value otherwise.
func (o *Interval) GetIntervalSequence() int32 {
	if o == nil || IsNil(o.IntervalSequence) {
		var ret int32
		return ret
	}
	return *o.IntervalSequence
}

// GetIntervalSequenceOk returns a tuple with the IntervalSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalSequence) {
		return nil, false
	}
	return o.IntervalSequence, true
}

// HasIntervalSequence returns a boolean if a field has been set.
func (o *Interval) HasIntervalSequence() bool {
	if o != nil && !IsNil(o.IntervalSequence) {
		return true
	}

	return false
}

// SetIntervalSequence gets a reference to the given int32 and assigns it to the IntervalSequence field.
func (o *Interval) SetIntervalSequence(v int32) {
	o.IntervalSequence = &v
}

// GetIntervalGroupId returns the IntervalGroupId field value if set, zero value otherwise.
func (o *Interval) GetIntervalGroupId() int32 {
	if o == nil || IsNil(o.IntervalGroupId) {
		var ret int32
		return ret
	}
	return *o.IntervalGroupId
}

// GetIntervalGroupIdOk returns a tuple with the IntervalGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalGroupId) {
		return nil, false
	}
	return o.IntervalGroupId, true
}

// HasIntervalGroupId returns a boolean if a field has been set.
func (o *Interval) HasIntervalGroupId() bool {
	if o != nil && !IsNil(o.IntervalGroupId) {
		return true
	}

	return false
}

// SetIntervalGroupId gets a reference to the given int32 and assigns it to the IntervalGroupId field.
func (o *Interval) SetIntervalGroupId(v int32) {
	o.IntervalGroupId = &v
}

// GetIntervalGroupName returns the IntervalGroupName field value if set, zero value otherwise.
func (o *Interval) GetIntervalGroupName() string {
	if o == nil || IsNil(o.IntervalGroupName) {
		var ret string
		return ret
	}
	return *o.IntervalGroupName
}

// GetIntervalGroupNameOk returns a tuple with the IntervalGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetIntervalGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.IntervalGroupName) {
		return nil, false
	}
	return o.IntervalGroupName, true
}

// HasIntervalGroupName returns a boolean if a field has been set.
func (o *Interval) HasIntervalGroupName() bool {
	if o != nil && !IsNil(o.IntervalGroupName) {
		return true
	}

	return false
}

// SetIntervalGroupName gets a reference to the given string and assigns it to the IntervalGroupName field.
func (o *Interval) SetIntervalGroupName(v string) {
	o.IntervalGroupName = &v
}

// GetTimeline returns the Timeline field value if set, zero value otherwise.
func (o *Interval) GetTimeline() string {
	if o == nil || IsNil(o.Timeline) {
		var ret string
		return ret
	}
	return *o.Timeline
}

// GetTimelineOk returns a tuple with the Timeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetTimelineOk() (*string, bool) {
	if o == nil || IsNil(o.Timeline) {
		return nil, false
	}
	return o.Timeline, true
}

// HasTimeline returns a boolean if a field has been set.
func (o *Interval) HasTimeline() bool {
	if o != nil && !IsNil(o.Timeline) {
		return true
	}

	return false
}

// SetTimeline gets a reference to the given string and assigns it to the Timeline field.
func (o *Interval) SetTimeline(v string) {
	o.Timeline = &v
}

// GetDefinedUsingInterval returns the DefinedUsingInterval field value if set, zero value otherwise.
func (o *Interval) GetDefinedUsingInterval() string {
	if o == nil || IsNil(o.DefinedUsingInterval) {
		var ret string
		return ret
	}
	return *o.DefinedUsingInterval
}

// GetDefinedUsingIntervalOk returns a tuple with the DefinedUsingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetDefinedUsingIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.DefinedUsingInterval) {
		return nil, false
	}
	return o.DefinedUsingInterval, true
}

// HasDefinedUsingInterval returns a boolean if a field has been set.
func (o *Interval) HasDefinedUsingInterval() bool {
	if o != nil && !IsNil(o.DefinedUsingInterval) {
		return true
	}

	return false
}

// SetDefinedUsingInterval gets a reference to the given string and assigns it to the DefinedUsingInterval field.
func (o *Interval) SetDefinedUsingInterval(v string) {
	o.DefinedUsingInterval = &v
}

// GetWindowCalculationForm returns the WindowCalculationForm field value if set, zero value otherwise.
func (o *Interval) GetWindowCalculationForm() string {
	if o == nil || IsNil(o.WindowCalculationForm) {
		var ret string
		return ret
	}
	return *o.WindowCalculationForm
}

// GetWindowCalculationFormOk returns a tuple with the WindowCalculationForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetWindowCalculationFormOk() (*string, bool) {
	if o == nil || IsNil(o.WindowCalculationForm) {
		return nil, false
	}
	return o.WindowCalculationForm, true
}

// HasWindowCalculationForm returns a boolean if a field has been set.
func (o *Interval) HasWindowCalculationForm() bool {
	if o != nil && !IsNil(o.WindowCalculationForm) {
		return true
	}

	return false
}

// SetWindowCalculationForm gets a reference to the given string and assigns it to the WindowCalculationForm field.
func (o *Interval) SetWindowCalculationForm(v string) {
	o.WindowCalculationForm = &v
}

// GetWindowCalculationDate returns the WindowCalculationDate field value if set, zero value otherwise.
func (o *Interval) GetWindowCalculationDate() string {
	if o == nil || IsNil(o.WindowCalculationDate) {
		var ret string
		return ret
	}
	return *o.WindowCalculationDate
}

// GetWindowCalculationDateOk returns a tuple with the WindowCalculationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetWindowCalculationDateOk() (*string, bool) {
	if o == nil || IsNil(o.WindowCalculationDate) {
		return nil, false
	}
	return o.WindowCalculationDate, true
}

// HasWindowCalculationDate returns a boolean if a field has been set.
func (o *Interval) HasWindowCalculationDate() bool {
	if o != nil && !IsNil(o.WindowCalculationDate) {
		return true
	}

	return false
}

// SetWindowCalculationDate gets a reference to the given string and assigns it to the WindowCalculationDate field.
func (o *Interval) SetWindowCalculationDate(v string) {
	o.WindowCalculationDate = &v
}

// GetActualDateForm returns the ActualDateForm field value if set, zero value otherwise.
func (o *Interval) GetActualDateForm() string {
	if o == nil || IsNil(o.ActualDateForm) {
		var ret string
		return ret
	}
	return *o.ActualDateForm
}

// GetActualDateFormOk returns a tuple with the ActualDateForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetActualDateFormOk() (*string, bool) {
	if o == nil || IsNil(o.ActualDateForm) {
		return nil, false
	}
	return o.ActualDateForm, true
}

// HasActualDateForm returns a boolean if a field has been set.
func (o *Interval) HasActualDateForm() bool {
	if o != nil && !IsNil(o.ActualDateForm) {
		return true
	}

	return false
}

// SetActualDateForm gets a reference to the given string and assigns it to the ActualDateForm field.
func (o *Interval) SetActualDateForm(v string) {
	o.ActualDateForm = &v
}

// GetActualDate returns the ActualDate field value if set, zero value otherwise.
func (o *Interval) GetActualDate() string {
	if o == nil || IsNil(o.ActualDate) {
		var ret string
		return ret
	}
	return *o.ActualDate
}

// GetActualDateOk returns a tuple with the ActualDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetActualDateOk() (*string, bool) {
	if o == nil || IsNil(o.ActualDate) {
		return nil, false
	}
	return o.ActualDate, true
}

// HasActualDate returns a boolean if a field has been set.
func (o *Interval) HasActualDate() bool {
	if o != nil && !IsNil(o.ActualDate) {
		return true
	}

	return false
}

// SetActualDate gets a reference to the given string and assigns it to the ActualDate field.
func (o *Interval) SetActualDate(v string) {
	o.ActualDate = &v
}

// GetDueDateWillBeIn returns the DueDateWillBeIn field value if set, zero value otherwise.
func (o *Interval) GetDueDateWillBeIn() int32 {
	if o == nil || IsNil(o.DueDateWillBeIn) {
		var ret int32
		return ret
	}
	return *o.DueDateWillBeIn
}

// GetDueDateWillBeInOk returns a tuple with the DueDateWillBeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetDueDateWillBeInOk() (*int32, bool) {
	if o == nil || IsNil(o.DueDateWillBeIn) {
		return nil, false
	}
	return o.DueDateWillBeIn, true
}

// HasDueDateWillBeIn returns a boolean if a field has been set.
func (o *Interval) HasDueDateWillBeIn() bool {
	if o != nil && !IsNil(o.DueDateWillBeIn) {
		return true
	}

	return false
}

// SetDueDateWillBeIn gets a reference to the given int32 and assigns it to the DueDateWillBeIn field.
func (o *Interval) SetDueDateWillBeIn(v int32) {
	o.DueDateWillBeIn = &v
}

// GetNegativeSlack returns the NegativeSlack field value if set, zero value otherwise.
func (o *Interval) GetNegativeSlack() int32 {
	if o == nil || IsNil(o.NegativeSlack) {
		var ret int32
		return ret
	}
	return *o.NegativeSlack
}

// GetNegativeSlackOk returns a tuple with the NegativeSlack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetNegativeSlackOk() (*int32, bool) {
	if o == nil || IsNil(o.NegativeSlack) {
		return nil, false
	}
	return o.NegativeSlack, true
}

// HasNegativeSlack returns a boolean if a field has been set.
func (o *Interval) HasNegativeSlack() bool {
	if o != nil && !IsNil(o.NegativeSlack) {
		return true
	}

	return false
}

// SetNegativeSlack gets a reference to the given int32 and assigns it to the NegativeSlack field.
func (o *Interval) SetNegativeSlack(v int32) {
	o.NegativeSlack = &v
}

// GetPositiveSlack returns the PositiveSlack field value if set, zero value otherwise.
func (o *Interval) GetPositiveSlack() int32 {
	if o == nil || IsNil(o.PositiveSlack) {
		var ret int32
		return ret
	}
	return *o.PositiveSlack
}

// GetPositiveSlackOk returns a tuple with the PositiveSlack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetPositiveSlackOk() (*int32, bool) {
	if o == nil || IsNil(o.PositiveSlack) {
		return nil, false
	}
	return o.PositiveSlack, true
}

// HasPositiveSlack returns a boolean if a field has been set.
func (o *Interval) HasPositiveSlack() bool {
	if o != nil && !IsNil(o.PositiveSlack) {
		return true
	}

	return false
}

// SetPositiveSlack gets a reference to the given int32 and assigns it to the PositiveSlack field.
func (o *Interval) SetPositiveSlack(v int32) {
	o.PositiveSlack = &v
}

// GetEproGracePeriod returns the EproGracePeriod field value if set, zero value otherwise.
func (o *Interval) GetEproGracePeriod() int32 {
	if o == nil || IsNil(o.EproGracePeriod) {
		var ret int32
		return ret
	}
	return *o.EproGracePeriod
}

// GetEproGracePeriodOk returns a tuple with the EproGracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetEproGracePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.EproGracePeriod) {
		return nil, false
	}
	return o.EproGracePeriod, true
}

// HasEproGracePeriod returns a boolean if a field has been set.
func (o *Interval) HasEproGracePeriod() bool {
	if o != nil && !IsNil(o.EproGracePeriod) {
		return true
	}

	return false
}

// SetEproGracePeriod gets a reference to the given int32 and assigns it to the EproGracePeriod field.
func (o *Interval) SetEproGracePeriod(v int32) {
	o.EproGracePeriod = &v
}

// GetForms returns the Forms field value if set, zero value otherwise.
func (o *Interval) GetForms() []ComponentsSchemasIntervalFormsItem {
	if o == nil || IsNil(o.Forms) {
		var ret []ComponentsSchemasIntervalFormsItem
		return ret
	}
	return o.Forms
}

// GetFormsOk returns a tuple with the Forms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetFormsOk() ([]ComponentsSchemasIntervalFormsItem, bool) {
	if o == nil || IsNil(o.Forms) {
		return nil, false
	}
	return o.Forms, true
}

// HasForms returns a boolean if a field has been set.
func (o *Interval) HasForms() bool {
	if o != nil && !IsNil(o.Forms) {
		return true
	}

	return false
}

// SetForms gets a reference to the given []ComponentsSchemasIntervalFormsItem and assigns it to the Forms field.
func (o *Interval) SetForms(v []ComponentsSchemasIntervalFormsItem) {
	o.Forms = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Interval) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Interval) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Interval) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Interval) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Interval) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Interval) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Interval) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interval) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Interval) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Interval) SetDateModified(v string) {
	o.DateModified = &v
}

func (o Interval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.IntervalId) {
		toSerialize["intervalId"] = o.IntervalId
	}
	if !IsNil(o.IntervalName) {
		toSerialize["intervalName"] = o.IntervalName
	}
	if !IsNil(o.IntervalDescription) {
		toSerialize["intervalDescription"] = o.IntervalDescription
	}
	if !IsNil(o.IntervalSequence) {
		toSerialize["intervalSequence"] = o.IntervalSequence
	}
	if !IsNil(o.IntervalGroupId) {
		toSerialize["intervalGroupId"] = o.IntervalGroupId
	}
	if !IsNil(o.IntervalGroupName) {
		toSerialize["intervalGroupName"] = o.IntervalGroupName
	}
	if !IsNil(o.Timeline) {
		toSerialize["timeline"] = o.Timeline
	}
	if !IsNil(o.DefinedUsingInterval) {
		toSerialize["definedUsingInterval"] = o.DefinedUsingInterval
	}
	if !IsNil(o.WindowCalculationForm) {
		toSerialize["windowCalculationForm"] = o.WindowCalculationForm
	}
	if !IsNil(o.WindowCalculationDate) {
		toSerialize["windowCalculationDate"] = o.WindowCalculationDate
	}
	if !IsNil(o.ActualDateForm) {
		toSerialize["actualDateForm"] = o.ActualDateForm
	}
	if !IsNil(o.ActualDate) {
		toSerialize["actualDate"] = o.ActualDate
	}
	if !IsNil(o.DueDateWillBeIn) {
		toSerialize["dueDateWillBeIn"] = o.DueDateWillBeIn
	}
	if !IsNil(o.NegativeSlack) {
		toSerialize["negativeSlack"] = o.NegativeSlack
	}
	if !IsNil(o.PositiveSlack) {
		toSerialize["positiveSlack"] = o.PositiveSlack
	}
	if !IsNil(o.EproGracePeriod) {
		toSerialize["eproGracePeriod"] = o.EproGracePeriod
	}
	if !IsNil(o.Forms) {
		toSerialize["forms"] = o.Forms
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	return toSerialize, nil
}

type NullableInterval struct {
	value *Interval
	isSet bool
}

func (v NullableInterval) Get() *Interval {
	return v.value
}

func (v *NullableInterval) Set(val *Interval) {
	v.value = val
	v.isSet = true
}

func (v NullableInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterval(val *Interval) *NullableInterval {
	return &NullableInterval{value: val, isSet: true}
}

func (v NullableInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


