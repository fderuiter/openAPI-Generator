/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecordJobStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordJobStatus{}

// RecordJobStatus struct for RecordJobStatus
type RecordJobStatus struct {
	// Unique job identifier
	JobId *string `json:"jobId,omitempty"`
	// Batch ID used to track the job (identical to jobId in most cases)
	BatchId *string `json:"batchId,omitempty"`
	// Current state of the job (e.g., created, completed)
	State *string `json:"state,omitempty"`
}

// NewRecordJobStatus instantiates a new RecordJobStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordJobStatus() *RecordJobStatus {
	this := RecordJobStatus{}
	return &this
}

// NewRecordJobStatusWithDefaults instantiates a new RecordJobStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordJobStatusWithDefaults() *RecordJobStatus {
	this := RecordJobStatus{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *RecordJobStatus) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordJobStatus) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *RecordJobStatus) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *RecordJobStatus) SetJobId(v string) {
	o.JobId = &v
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *RecordJobStatus) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordJobStatus) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *RecordJobStatus) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *RecordJobStatus) SetBatchId(v string) {
	o.BatchId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RecordJobStatus) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordJobStatus) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RecordJobStatus) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RecordJobStatus) SetState(v string) {
	o.State = &v
}

func (o RecordJobStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordJobStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableRecordJobStatus struct {
	value *RecordJobStatus
	isSet bool
}

func (v NullableRecordJobStatus) Get() *RecordJobStatus {
	return v.value
}

func (v *NullableRecordJobStatus) Set(val *RecordJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordJobStatus(val *RecordJobStatus) *NullableRecordJobStatus {
	return &NullableRecordJobStatus{value: val, isSet: true}
}

func (v NullableRecordJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


