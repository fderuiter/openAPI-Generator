/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecordRevision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordRevision{}

// RecordRevision struct for RecordRevision
type RecordRevision struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Unique system identifier for the record revision
	RecordRevisionId *int32 `json:"recordRevisionId,omitempty"`
	// Unique system identifier of the related record
	RecordId *int32 `json:"recordId,omitempty"`
	// Client-assigned record OID (if any)
	RecordOid *string `json:"recordOid,omitempty"`
	// Revision number of the record (version of the record status)
	RecordRevision *int32 `json:"recordRevision,omitempty"`
	// Revision number of the data within the record
	DataRevision *int32 `json:"dataRevision,omitempty"`
	// Status of the record at this revision (user-defined status label)
	RecordStatus *string `json:"recordStatus,omitempty"`
	// Mednet subject ID related to the record
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Client-assigned subject OID related to the record
	SubjectOid *string `json:"subjectOid,omitempty"`
	// Subject display ID related to the record
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Site ID related to the record
	SiteId *int32 `json:"siteId,omitempty"`
	// Form key of the form that the record belongs to
	FormKey *string `json:"formKey,omitempty"`
	// Interval ID (visit definition) related to the record
	IntervalId *int32 `json:"intervalId,omitempty"`
	// Role name of the user who saved the record revision
	Role *string `json:"role,omitempty"`
	// Username of the user who saved the record revision
	User *string `json:"user,omitempty"`
	// Reason for change, if provided (for audit trail)
	ReasonForChange *string `json:"reasonForChange,omitempty"`
	// Whether the record was deleted in this revision
	Deleted *bool `json:"deleted,omitempty"`
	// Date when this record revision was created
	DateCreated *string `json:"dateCreated,omitempty"`
}

// NewRecordRevision instantiates a new RecordRevision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordRevision() *RecordRevision {
	this := RecordRevision{}
	return &this
}

// NewRecordRevisionWithDefaults instantiates a new RecordRevision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordRevisionWithDefaults() *RecordRevision {
	this := RecordRevision{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *RecordRevision) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *RecordRevision) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *RecordRevision) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetRecordRevisionId returns the RecordRevisionId field value if set, zero value otherwise.
func (o *RecordRevision) GetRecordRevisionId() int32 {
	if o == nil || IsNil(o.RecordRevisionId) {
		var ret int32
		return ret
	}
	return *o.RecordRevisionId
}

// GetRecordRevisionIdOk returns a tuple with the RecordRevisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRecordRevisionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordRevisionId) {
		return nil, false
	}
	return o.RecordRevisionId, true
}

// HasRecordRevisionId returns a boolean if a field has been set.
func (o *RecordRevision) HasRecordRevisionId() bool {
	if o != nil && !IsNil(o.RecordRevisionId) {
		return true
	}

	return false
}

// SetRecordRevisionId gets a reference to the given int32 and assigns it to the RecordRevisionId field.
func (o *RecordRevision) SetRecordRevisionId(v int32) {
	o.RecordRevisionId = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *RecordRevision) GetRecordId() int32 {
	if o == nil || IsNil(o.RecordId) {
		var ret int32
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *RecordRevision) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given int32 and assigns it to the RecordId field.
func (o *RecordRevision) SetRecordId(v int32) {
	o.RecordId = &v
}

// GetRecordOid returns the RecordOid field value if set, zero value otherwise.
func (o *RecordRevision) GetRecordOid() string {
	if o == nil || IsNil(o.RecordOid) {
		var ret string
		return ret
	}
	return *o.RecordOid
}

// GetRecordOidOk returns a tuple with the RecordOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRecordOidOk() (*string, bool) {
	if o == nil || IsNil(o.RecordOid) {
		return nil, false
	}
	return o.RecordOid, true
}

// HasRecordOid returns a boolean if a field has been set.
func (o *RecordRevision) HasRecordOid() bool {
	if o != nil && !IsNil(o.RecordOid) {
		return true
	}

	return false
}

// SetRecordOid gets a reference to the given string and assigns it to the RecordOid field.
func (o *RecordRevision) SetRecordOid(v string) {
	o.RecordOid = &v
}

// GetRecordRevision returns the RecordRevision field value if set, zero value otherwise.
func (o *RecordRevision) GetRecordRevision() int32 {
	if o == nil || IsNil(o.RecordRevision) {
		var ret int32
		return ret
	}
	return *o.RecordRevision
}

// GetRecordRevisionOk returns a tuple with the RecordRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRecordRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordRevision) {
		return nil, false
	}
	return o.RecordRevision, true
}

// HasRecordRevision returns a boolean if a field has been set.
func (o *RecordRevision) HasRecordRevision() bool {
	if o != nil && !IsNil(o.RecordRevision) {
		return true
	}

	return false
}

// SetRecordRevision gets a reference to the given int32 and assigns it to the RecordRevision field.
func (o *RecordRevision) SetRecordRevision(v int32) {
	o.RecordRevision = &v
}

// GetDataRevision returns the DataRevision field value if set, zero value otherwise.
func (o *RecordRevision) GetDataRevision() int32 {
	if o == nil || IsNil(o.DataRevision) {
		var ret int32
		return ret
	}
	return *o.DataRevision
}

// GetDataRevisionOk returns a tuple with the DataRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetDataRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.DataRevision) {
		return nil, false
	}
	return o.DataRevision, true
}

// HasDataRevision returns a boolean if a field has been set.
func (o *RecordRevision) HasDataRevision() bool {
	if o != nil && !IsNil(o.DataRevision) {
		return true
	}

	return false
}

// SetDataRevision gets a reference to the given int32 and assigns it to the DataRevision field.
func (o *RecordRevision) SetDataRevision(v int32) {
	o.DataRevision = &v
}

// GetRecordStatus returns the RecordStatus field value if set, zero value otherwise.
func (o *RecordRevision) GetRecordStatus() string {
	if o == nil || IsNil(o.RecordStatus) {
		var ret string
		return ret
	}
	return *o.RecordStatus
}

// GetRecordStatusOk returns a tuple with the RecordStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRecordStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RecordStatus) {
		return nil, false
	}
	return o.RecordStatus, true
}

// HasRecordStatus returns a boolean if a field has been set.
func (o *RecordRevision) HasRecordStatus() bool {
	if o != nil && !IsNil(o.RecordStatus) {
		return true
	}

	return false
}

// SetRecordStatus gets a reference to the given string and assigns it to the RecordStatus field.
func (o *RecordRevision) SetRecordStatus(v string) {
	o.RecordStatus = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *RecordRevision) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *RecordRevision) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *RecordRevision) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectOid returns the SubjectOid field value if set, zero value otherwise.
func (o *RecordRevision) GetSubjectOid() string {
	if o == nil || IsNil(o.SubjectOid) {
		var ret string
		return ret
	}
	return *o.SubjectOid
}

// GetSubjectOidOk returns a tuple with the SubjectOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetSubjectOidOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOid) {
		return nil, false
	}
	return o.SubjectOid, true
}

// HasSubjectOid returns a boolean if a field has been set.
func (o *RecordRevision) HasSubjectOid() bool {
	if o != nil && !IsNil(o.SubjectOid) {
		return true
	}

	return false
}

// SetSubjectOid gets a reference to the given string and assigns it to the SubjectOid field.
func (o *RecordRevision) SetSubjectOid(v string) {
	o.SubjectOid = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *RecordRevision) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *RecordRevision) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *RecordRevision) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *RecordRevision) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *RecordRevision) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *RecordRevision) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetFormKey returns the FormKey field value if set, zero value otherwise.
func (o *RecordRevision) GetFormKey() string {
	if o == nil || IsNil(o.FormKey) {
		var ret string
		return ret
	}
	return *o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetFormKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FormKey) {
		return nil, false
	}
	return o.FormKey, true
}

// HasFormKey returns a boolean if a field has been set.
func (o *RecordRevision) HasFormKey() bool {
	if o != nil && !IsNil(o.FormKey) {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given string and assigns it to the FormKey field.
func (o *RecordRevision) SetFormKey(v string) {
	o.FormKey = &v
}

// GetIntervalId returns the IntervalId field value if set, zero value otherwise.
func (o *RecordRevision) GetIntervalId() int32 {
	if o == nil || IsNil(o.IntervalId) {
		var ret int32
		return ret
	}
	return *o.IntervalId
}

// GetIntervalIdOk returns a tuple with the IntervalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetIntervalIdOk() (*int32, bool) {
	if o == nil || IsNil(o.IntervalId) {
		return nil, false
	}
	return o.IntervalId, true
}

// HasIntervalId returns a boolean if a field has been set.
func (o *RecordRevision) HasIntervalId() bool {
	if o != nil && !IsNil(o.IntervalId) {
		return true
	}

	return false
}

// SetIntervalId gets a reference to the given int32 and assigns it to the IntervalId field.
func (o *RecordRevision) SetIntervalId(v int32) {
	o.IntervalId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RecordRevision) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RecordRevision) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RecordRevision) SetRole(v string) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RecordRevision) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RecordRevision) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RecordRevision) SetUser(v string) {
	o.User = &v
}

// GetReasonForChange returns the ReasonForChange field value if set, zero value otherwise.
func (o *RecordRevision) GetReasonForChange() string {
	if o == nil || IsNil(o.ReasonForChange) {
		var ret string
		return ret
	}
	return *o.ReasonForChange
}

// GetReasonForChangeOk returns a tuple with the ReasonForChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetReasonForChangeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonForChange) {
		return nil, false
	}
	return o.ReasonForChange, true
}

// HasReasonForChange returns a boolean if a field has been set.
func (o *RecordRevision) HasReasonForChange() bool {
	if o != nil && !IsNil(o.ReasonForChange) {
		return true
	}

	return false
}

// SetReasonForChange gets a reference to the given string and assigns it to the ReasonForChange field.
func (o *RecordRevision) SetReasonForChange(v string) {
	o.ReasonForChange = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *RecordRevision) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *RecordRevision) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *RecordRevision) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *RecordRevision) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordRevision) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *RecordRevision) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *RecordRevision) SetDateCreated(v string) {
	o.DateCreated = &v
}

func (o RecordRevision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordRevision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.RecordRevisionId) {
		toSerialize["recordRevisionId"] = o.RecordRevisionId
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.RecordOid) {
		toSerialize["recordOid"] = o.RecordOid
	}
	if !IsNil(o.RecordRevision) {
		toSerialize["recordRevision"] = o.RecordRevision
	}
	if !IsNil(o.DataRevision) {
		toSerialize["dataRevision"] = o.DataRevision
	}
	if !IsNil(o.RecordStatus) {
		toSerialize["recordStatus"] = o.RecordStatus
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectOid) {
		toSerialize["subjectOid"] = o.SubjectOid
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.FormKey) {
		toSerialize["formKey"] = o.FormKey
	}
	if !IsNil(o.IntervalId) {
		toSerialize["intervalId"] = o.IntervalId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ReasonForChange) {
		toSerialize["reasonForChange"] = o.ReasonForChange
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	return toSerialize, nil
}

type NullableRecordRevision struct {
	value *RecordRevision
	isSet bool
}

func (v NullableRecordRevision) Get() *RecordRevision {
	return v.value
}

func (v *NullableRecordRevision) Set(val *RecordRevision) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordRevision) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordRevision(val *RecordRevision) *NullableRecordRevision {
	return &NullableRecordRevision{value: val, isSet: true}
}

func (v NullableRecordRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


