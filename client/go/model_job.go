/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Job type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Job{}

// Job struct for Job
type Job struct {
	// Unique job identifier
	JobId *string `json:"jobId,omitempty"`
	// Batch ID associated with the job (useful for linking with record creation requests)
	BatchId *string `json:"batchId,omitempty"`
	// State of the job (e.g., completed, pending)
	State *string `json:"state,omitempty"`
	// Timestamp when the job was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Timestamp when the job started processing
	DateStarted *string `json:"dateStarted,omitempty"`
	// Timestamp when the job finished processing
	DateFinished *string `json:"dateFinished,omitempty"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob() *Job {
	this := Job{}
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *Job) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *Job) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *Job) SetJobId(v string) {
	o.JobId = &v
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *Job) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *Job) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *Job) SetBatchId(v string) {
	o.BatchId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Job) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Job) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Job) SetState(v string) {
	o.State = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Job) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Job) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Job) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateStarted returns the DateStarted field value if set, zero value otherwise.
func (o *Job) GetDateStarted() string {
	if o == nil || IsNil(o.DateStarted) {
		var ret string
		return ret
	}
	return *o.DateStarted
}

// GetDateStartedOk returns a tuple with the DateStarted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDateStartedOk() (*string, bool) {
	if o == nil || IsNil(o.DateStarted) {
		return nil, false
	}
	return o.DateStarted, true
}

// HasDateStarted returns a boolean if a field has been set.
func (o *Job) HasDateStarted() bool {
	if o != nil && !IsNil(o.DateStarted) {
		return true
	}

	return false
}

// SetDateStarted gets a reference to the given string and assigns it to the DateStarted field.
func (o *Job) SetDateStarted(v string) {
	o.DateStarted = &v
}

// GetDateFinished returns the DateFinished field value if set, zero value otherwise.
func (o *Job) GetDateFinished() string {
	if o == nil || IsNil(o.DateFinished) {
		var ret string
		return ret
	}
	return *o.DateFinished
}

// GetDateFinishedOk returns a tuple with the DateFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDateFinishedOk() (*string, bool) {
	if o == nil || IsNil(o.DateFinished) {
		return nil, false
	}
	return o.DateFinished, true
}

// HasDateFinished returns a boolean if a field has been set.
func (o *Job) HasDateFinished() bool {
	if o != nil && !IsNil(o.DateFinished) {
		return true
	}

	return false
}

// SetDateFinished gets a reference to the given string and assigns it to the DateFinished field.
func (o *Job) SetDateFinished(v string) {
	o.DateFinished = &v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Job) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateStarted) {
		toSerialize["dateStarted"] = o.DateStarted
	}
	if !IsNil(o.DateFinished) {
		toSerialize["dateFinished"] = o.DateFinished
	}
	return toSerialize, nil
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


