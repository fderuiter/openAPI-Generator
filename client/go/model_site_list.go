/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SiteList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteList{}

// SiteList struct for SiteList
type SiteList struct {
	Metadata *Metadata `json:"metadata,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	Data []Site `json:"data,omitempty"`
}

// NewSiteList instantiates a new SiteList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteList() *SiteList {
	this := SiteList{}
	return &this
}

// NewSiteListWithDefaults instantiates a new SiteList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteListWithDefaults() *SiteList {
	this := SiteList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SiteList) GetMetadata() Metadata {
	if o == nil || IsNil(o.Metadata) {
		var ret Metadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteList) GetMetadataOk() (*Metadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SiteList) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given Metadata and assigns it to the Metadata field.
func (o *SiteList) SetMetadata(v Metadata) {
	o.Metadata = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *SiteList) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteList) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *SiteList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *SiteList) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SiteList) GetData() []Site {
	if o == nil || IsNil(o.Data) {
		var ret []Site
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteList) GetDataOk() ([]Site, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SiteList) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Site and assigns it to the Data field.
func (o *SiteList) SetData(v []Site) {
	o.Data = v
}

func (o SiteList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableSiteList struct {
	value *SiteList
	isSet bool
}

func (v NullableSiteList) Get() *SiteList {
	return v.value
}

func (v *NullableSiteList) Set(val *SiteList) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteList) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteList(val *SiteList) *NullableSiteList {
	return &NullableSiteList{value: val, isSet: true}
}

func (v NullableSiteList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


