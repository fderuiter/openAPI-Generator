/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Subject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subject{}

// Subject struct for Subject
type Subject struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Mednet subject ID (internal numeric ID)
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Client-assigned subject object identifier (OID)
	SubjectOid *string `json:"subjectOid,omitempty"`
	// Protocol-assigned subject identifier (display ID)
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Current status of the subject (e.g., Enrolled)
	SubjectStatus *string `json:"subjectStatus,omitempty"`
	// Mednet site ID the subject is associated with
	SiteId *int32 `json:"siteId,omitempty"`
	// Name of the site the subject is associated with
	SiteName *string `json:"siteName,omitempty"`
	// Whether the subject is marked as deleted
	Deleted *bool `json:"deleted,omitempty"`
	// Subjectâ€™s enrollment start date
	EnrollmentStartDate *string `json:"enrollmentStartDate,omitempty"`
	// Date when this subject record was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this subject record was last modified
	DateModified *string `json:"dateModified,omitempty"`
	// List of keywords associated with the subject
	Keywords []Keyword `json:"keywords,omitempty"`
}

// NewSubject instantiates a new Subject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubject() *Subject {
	this := Subject{}
	return &this
}

// NewSubjectWithDefaults instantiates a new Subject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectWithDefaults() *Subject {
	this := Subject{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Subject) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Subject) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Subject) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *Subject) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *Subject) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *Subject) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectOid returns the SubjectOid field value if set, zero value otherwise.
func (o *Subject) GetSubjectOid() string {
	if o == nil || IsNil(o.SubjectOid) {
		var ret string
		return ret
	}
	return *o.SubjectOid
}

// GetSubjectOidOk returns a tuple with the SubjectOid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSubjectOidOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectOid) {
		return nil, false
	}
	return o.SubjectOid, true
}

// HasSubjectOid returns a boolean if a field has been set.
func (o *Subject) HasSubjectOid() bool {
	if o != nil && !IsNil(o.SubjectOid) {
		return true
	}

	return false
}

// SetSubjectOid gets a reference to the given string and assigns it to the SubjectOid field.
func (o *Subject) SetSubjectOid(v string) {
	o.SubjectOid = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *Subject) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *Subject) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *Subject) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetSubjectStatus returns the SubjectStatus field value if set, zero value otherwise.
func (o *Subject) GetSubjectStatus() string {
	if o == nil || IsNil(o.SubjectStatus) {
		var ret string
		return ret
	}
	return *o.SubjectStatus
}

// GetSubjectStatusOk returns a tuple with the SubjectStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSubjectStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectStatus) {
		return nil, false
	}
	return o.SubjectStatus, true
}

// HasSubjectStatus returns a boolean if a field has been set.
func (o *Subject) HasSubjectStatus() bool {
	if o != nil && !IsNil(o.SubjectStatus) {
		return true
	}

	return false
}

// SetSubjectStatus gets a reference to the given string and assigns it to the SubjectStatus field.
func (o *Subject) SetSubjectStatus(v string) {
	o.SubjectStatus = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Subject) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Subject) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *Subject) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *Subject) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *Subject) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *Subject) SetSiteName(v string) {
	o.SiteName = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Subject) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Subject) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Subject) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetEnrollmentStartDate returns the EnrollmentStartDate field value if set, zero value otherwise.
func (o *Subject) GetEnrollmentStartDate() string {
	if o == nil || IsNil(o.EnrollmentStartDate) {
		var ret string
		return ret
	}
	return *o.EnrollmentStartDate
}

// GetEnrollmentStartDateOk returns a tuple with the EnrollmentStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetEnrollmentStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EnrollmentStartDate) {
		return nil, false
	}
	return o.EnrollmentStartDate, true
}

// HasEnrollmentStartDate returns a boolean if a field has been set.
func (o *Subject) HasEnrollmentStartDate() bool {
	if o != nil && !IsNil(o.EnrollmentStartDate) {
		return true
	}

	return false
}

// SetEnrollmentStartDate gets a reference to the given string and assigns it to the EnrollmentStartDate field.
func (o *Subject) SetEnrollmentStartDate(v string) {
	o.EnrollmentStartDate = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Subject) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Subject) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Subject) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Subject) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Subject) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Subject) SetDateModified(v string) {
	o.DateModified = &v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *Subject) GetKeywords() []Keyword {
	if o == nil || IsNil(o.Keywords) {
		var ret []Keyword
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subject) GetKeywordsOk() ([]Keyword, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *Subject) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []Keyword and assigns it to the Keywords field.
func (o *Subject) SetKeywords(v []Keyword) {
	o.Keywords = v
}

func (o Subject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectOid) {
		toSerialize["subjectOid"] = o.SubjectOid
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.SubjectStatus) {
		toSerialize["subjectStatus"] = o.SubjectStatus
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.EnrollmentStartDate) {
		toSerialize["enrollmentStartDate"] = o.EnrollmentStartDate
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	return toSerialize, nil
}

type NullableSubject struct {
	value *Subject
	isSet bool
}

func (v NullableSubject) Get() *Subject {
	return v.value
}

func (v *NullableSubject) Set(val *Subject) {
	v.value = val
	v.isSet = true
}

func (v NullableSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubject(val *Subject) *NullableSubject {
	return &NullableSubject{value: val, isSet: true}
}

func (v NullableSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


