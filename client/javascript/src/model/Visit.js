/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Visit model module.
 * @module model/Visit
 * @version 1.0.15
 */
class Visit {
    /**
     * Constructs a new <code>Visit</code>.
     * @alias module:model/Visit
     */
    constructor() { 
        
        Visit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Visit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Visit} obj Optional instance to populate.
     * @return {module:model/Visit} The populated <code>Visit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Visit();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('visitId')) {
                obj['visitId'] = ApiClient.convertToType(data['visitId'], 'Number');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('intervalName')) {
                obj['intervalName'] = ApiClient.convertToType(data['intervalName'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('visitDate')) {
                obj['visitDate'] = ApiClient.convertToType(data['visitDate'], 'String');
            }
            if (data.hasOwnProperty('visitDateForm')) {
                obj['visitDateForm'] = ApiClient.convertToType(data['visitDateForm'], 'String');
            }
            if (data.hasOwnProperty('visitDateQuestion')) {
                obj['visitDateQuestion'] = ApiClient.convertToType(data['visitDateQuestion'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Visit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Visit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['intervalName'] && !(typeof data['intervalName'] === 'string' || data['intervalName'] instanceof String)) {
            throw new Error("Expected the field `intervalName` to be a primitive type in the JSON string but got " + data['intervalName']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        // ensure the json data is a string
        if (data['startDate'] && !(typeof data['startDate'] === 'string' || data['startDate'] instanceof String)) {
            throw new Error("Expected the field `startDate` to be a primitive type in the JSON string but got " + data['startDate']);
        }
        // ensure the json data is a string
        if (data['endDate'] && !(typeof data['endDate'] === 'string' || data['endDate'] instanceof String)) {
            throw new Error("Expected the field `endDate` to be a primitive type in the JSON string but got " + data['endDate']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['visitDate'] && !(typeof data['visitDate'] === 'string' || data['visitDate'] instanceof String)) {
            throw new Error("Expected the field `visitDate` to be a primitive type in the JSON string but got " + data['visitDate']);
        }
        // ensure the json data is a string
        if (data['visitDateForm'] && !(typeof data['visitDateForm'] === 'string' || data['visitDateForm'] instanceof String)) {
            throw new Error("Expected the field `visitDateForm` to be a primitive type in the JSON string but got " + data['visitDateForm']);
        }
        // ensure the json data is a string
        if (data['visitDateQuestion'] && !(typeof data['visitDateQuestion'] === 'string' || data['visitDateQuestion'] instanceof String)) {
            throw new Error("Expected the field `visitDateQuestion` to be a primitive type in the JSON string but got " + data['visitDateQuestion']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Visit.prototype['studyKey'] = undefined;

/**
 * Unique system identifier for the subject visit instance
 * @member {Number} visitId
 */
Visit.prototype['visitId'] = undefined;

/**
 * Unique system identifier of the interval definition for this visit
 * @member {Number} intervalId
 */
Visit.prototype['intervalId'] = undefined;

/**
 * Name of the interval (visit) for this visit instance
 * @member {String} intervalName
 */
Visit.prototype['intervalName'] = undefined;

/**
 * Mednet subject ID of the subject
 * @member {Number} subjectId
 */
Visit.prototype['subjectId'] = undefined;

/**
 * Protocol-assigned subject identifier
 * @member {String} subjectKey
 */
Visit.prototype['subjectKey'] = undefined;

/**
 * Start date of the visit window (in YYYY-MM-DD format)
 * @member {String} startDate
 */
Visit.prototype['startDate'] = undefined;

/**
 * End date of the visit window (in YYYY-MM-DD format)
 * @member {String} endDate
 */
Visit.prototype['endDate'] = undefined;

/**
 * Due date of the visit (in YYYY-MM-DD format), if applicable
 * @member {String} dueDate
 */
Visit.prototype['dueDate'] = undefined;

/**
 * Actual date the visit took place (in YYYY-MM-DD format)
 * @member {String} visitDate
 */
Visit.prototype['visitDate'] = undefined;

/**
 * Name of the form used to capture the actual visit date
 * @member {String} visitDateForm
 */
Visit.prototype['visitDateForm'] = undefined;

/**
 * Variable name of the field capturing the actual visit date
 * @member {String} visitDateQuestion
 */
Visit.prototype['visitDateQuestion'] = undefined;

/**
 * Whether the visit instance is marked as deleted
 * @member {Boolean} deleted
 */
Visit.prototype['deleted'] = undefined;

/**
 * Date when this visit record was created
 * @member {String} dateCreated
 */
Visit.prototype['dateCreated'] = undefined;

/**
 * Date when this visit record was last modified
 * @member {String} dateModified
 */
Visit.prototype['dateModified'] = undefined;






export default Visit;

