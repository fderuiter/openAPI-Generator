/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComponentsSchemasMetadataError model module.
 * @module model/ComponentsSchemasMetadataError
 * @version 1.0.15
 */
class ComponentsSchemasMetadataError {
    /**
     * Constructs a new <code>ComponentsSchemasMetadataError</code>.
     * Error details if an error occurred
     * @alias module:model/ComponentsSchemasMetadataError
     * @extends Object
     */
    constructor() { 
        
        ComponentsSchemasMetadataError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComponentsSchemasMetadataError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComponentsSchemasMetadataError} obj Optional instance to populate.
     * @return {module:model/ComponentsSchemasMetadataError} The populated <code>ComponentsSchemasMetadataError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComponentsSchemasMetadataError();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComponentsSchemasMetadataError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComponentsSchemasMetadataError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}



/**
 * Error message describing the issue
 * @member {String} message
 */
ComponentsSchemasMetadataError.prototype['message'] = undefined;






export default ComponentsSchemasMetadataError;

