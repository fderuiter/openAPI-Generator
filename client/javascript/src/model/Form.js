/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Form model module.
 * @module model/Form
 * @version 1.0.15
 */
class Form {
    /**
     * Constructs a new <code>Form</code>.
     * @alias module:model/Form
     */
    constructor() { 
        
        Form.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('formType')) {
                obj['formType'] = ApiClient.convertToType(data['formType'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('embeddedLog')) {
                obj['embeddedLog'] = ApiClient.convertToType(data['embeddedLog'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceOwnership')) {
                obj['enforceOwnership'] = ApiClient.convertToType(data['enforceOwnership'], 'Boolean');
            }
            if (data.hasOwnProperty('userAgreement')) {
                obj['userAgreement'] = ApiClient.convertToType(data['userAgreement'], 'Boolean');
            }
            if (data.hasOwnProperty('subjectRecordReport')) {
                obj['subjectRecordReport'] = ApiClient.convertToType(data['subjectRecordReport'], 'Boolean');
            }
            if (data.hasOwnProperty('unscheduledVisit')) {
                obj['unscheduledVisit'] = ApiClient.convertToType(data['unscheduledVisit'], 'Boolean');
            }
            if (data.hasOwnProperty('otherForms')) {
                obj['otherForms'] = ApiClient.convertToType(data['otherForms'], 'Boolean');
            }
            if (data.hasOwnProperty('eproForm')) {
                obj['eproForm'] = ApiClient.convertToType(data['eproForm'], 'Boolean');
            }
            if (data.hasOwnProperty('allowCopy')) {
                obj['allowCopy'] = ApiClient.convertToType(data['allowCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Form</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Form</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['formName'] && !(typeof data['formName'] === 'string' || data['formName'] instanceof String)) {
            throw new Error("Expected the field `formName` to be a primitive type in the JSON string but got " + data['formName']);
        }
        // ensure the json data is a string
        if (data['formType'] && !(typeof data['formType'] === 'string' || data['formType'] instanceof String)) {
            throw new Error("Expected the field `formType` to be a primitive type in the JSON string but got " + data['formType']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Form.prototype['studyKey'] = undefined;

/**
 * Mednet Form ID
 * @member {Number} formId
 */
Form.prototype['formId'] = undefined;

/**
 * User-defined form key
 * @member {String} formKey
 */
Form.prototype['formKey'] = undefined;

/**
 * Name of the form (eCRF)
 * @member {String} formName
 */
Form.prototype['formName'] = undefined;

/**
 * Type of the form (e.g., Subject or Site)
 * @member {String} formType
 */
Form.prototype['formType'] = undefined;

/**
 * Number of modifications (revisions) of the form metadata
 * @member {Number} revision
 */
Form.prototype['revision'] = undefined;

/**
 * Whether the form has an embedded log
 * @member {Boolean} embeddedLog
 */
Form.prototype['embeddedLog'] = undefined;

/**
 * Whether the form enforces record ownership
 * @member {Boolean} enforceOwnership
 */
Form.prototype['enforceOwnership'] = undefined;

/**
 * Whether the form requires a user agreement
 * @member {Boolean} userAgreement
 */
Form.prototype['userAgreement'] = undefined;

/**
 * Whether the form is marked as a subject record report
 * @member {Boolean} subjectRecordReport
 */
Form.prototype['subjectRecordReport'] = undefined;

/**
 * Whether the form is included in unscheduled visits
 * @member {Boolean} unscheduledVisit
 */
Form.prototype['unscheduledVisit'] = undefined;

/**
 * Whether the form is included in Other Forms category
 * @member {Boolean} otherForms
 */
Form.prototype['otherForms'] = undefined;

/**
 * Whether the form is an ePRO (electronic patient reported outcome) form
 * @member {Boolean} eproForm
 */
Form.prototype['eproForm'] = undefined;

/**
 * Whether the form allows copying of data
 * @member {Boolean} allowCopy
 */
Form.prototype['allowCopy'] = undefined;

/**
 * Whether the form is soft-deleted (disabled)
 * @member {Boolean} disabled
 */
Form.prototype['disabled'] = undefined;

/**
 * Date when this form was created
 * @member {String} dateCreated
 */
Form.prototype['dateCreated'] = undefined;

/**
 * Date when this form was last modified
 * @member {String} dateModified
 */
Form.prototype['dateModified'] = undefined;






export default Form;

