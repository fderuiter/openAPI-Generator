/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryComment from './QueryComment';

/**
 * The Query model module.
 * @module model/Query
 * @version 1.0.15
 */
class Query {
    /**
     * Constructs a new <code>Query</code>.
     * @alias module:model/Query
     */
    constructor() { 
        
        Query.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Query</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Query} obj Optional instance to populate.
     * @return {module:model/Query} The populated <code>Query</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Query();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectOid')) {
                obj['subjectOid'] = ApiClient.convertToType(data['subjectOid'], 'String');
            }
            if (data.hasOwnProperty('annotationType')) {
                obj['annotationType'] = ApiClient.convertToType(data['annotationType'], 'String');
            }
            if (data.hasOwnProperty('annotationId')) {
                obj['annotationId'] = ApiClient.convertToType(data['annotationId'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], 'String');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
            if (data.hasOwnProperty('queryComments')) {
                obj['queryComments'] = ApiClient.convertToType(data['queryComments'], [QueryComment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Query</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Query</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['subjectOid'] && !(typeof data['subjectOid'] === 'string' || data['subjectOid'] instanceof String)) {
            throw new Error("Expected the field `subjectOid` to be a primitive type in the JSON string but got " + data['subjectOid']);
        }
        // ensure the json data is a string
        if (data['annotationType'] && !(typeof data['annotationType'] === 'string' || data['annotationType'] instanceof String)) {
            throw new Error("Expected the field `annotationType` to be a primitive type in the JSON string but got " + data['annotationType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['variable'] && !(typeof data['variable'] === 'string' || data['variable'] instanceof String)) {
            throw new Error("Expected the field `variable` to be a primitive type in the JSON string but got " + data['variable']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }
        if (data['queryComments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryComments'])) {
                throw new Error("Expected the field `queryComments` to be an array in the JSON data but got " + data['queryComments']);
            }
            // validate the optional field `queryComments` (array)
            for (const item of data['queryComments']) {
                QueryComment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Query.prototype['studyKey'] = undefined;

/**
 * Mednet subject ID associated with the query (if applicable)
 * @member {Number} subjectId
 */
Query.prototype['subjectId'] = undefined;

/**
 * Client-assigned subject OID (if applicable)
 * @member {String} subjectOid
 */
Query.prototype['subjectOid'] = undefined;

/**
 * Category/type of the query (e.g., subject, record, question)
 * @member {String} annotationType
 */
Query.prototype['annotationType'] = undefined;

/**
 * Unique system identifier for the query
 * @member {Number} annotationId
 */
Query.prototype['annotationId'] = undefined;

/**
 * System text identifier for the query type/location (subject, record, question)
 * @member {String} type
 */
Query.prototype['type'] = undefined;

/**
 * Description of the query (e.g., reason or context)
 * @member {String} description
 */
Query.prototype['description'] = undefined;

/**
 * Record ID associated with the query (if applicable)
 * @member {Number} recordId
 */
Query.prototype['recordId'] = undefined;

/**
 * Variable name (field) associated with the query (if applicable)
 * @member {String} variable
 */
Query.prototype['variable'] = undefined;

/**
 * Subject display ID associated with the query (if applicable)
 * @member {String} subjectKey
 */
Query.prototype['subjectKey'] = undefined;

/**
 * Date when the query was created
 * @member {String} dateCreated
 */
Query.prototype['dateCreated'] = undefined;

/**
 * Date when the query was last modified
 * @member {String} dateModified
 */
Query.prototype['dateModified'] = undefined;

/**
 * History of comments/actions on the query
 * @member {Array.<module:model/QueryComment>} queryComments
 */
Query.prototype['queryComments'] = undefined;






export default Query;

