/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Variable model module.
 * @module model/Variable
 * @version 1.0.15
 */
class Variable {
    /**
     * Constructs a new <code>Variable</code>.
     * @alias module:model/Variable
     */
    constructor() { 
        
        Variable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Variable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Variable} obj Optional instance to populate.
     * @return {module:model/Variable} The populated <code>Variable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Variable();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('variableId')) {
                obj['variableId'] = ApiClient.convertToType(data['variableId'], 'Number');
            }
            if (data.hasOwnProperty('variableType')) {
                obj['variableType'] = ApiClient.convertToType(data['variableType'], 'String');
            }
            if (data.hasOwnProperty('variableName')) {
                obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('variableOid')) {
                obj['variableOid'] = ApiClient.convertToType(data['variableOid'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('blinded')) {
                obj['blinded'] = ApiClient.convertToType(data['blinded'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Variable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Variable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['variableType'] && !(typeof data['variableType'] === 'string' || data['variableType'] instanceof String)) {
            throw new Error("Expected the field `variableType` to be a primitive type in the JSON string but got " + data['variableType']);
        }
        // ensure the json data is a string
        if (data['variableName'] && !(typeof data['variableName'] === 'string' || data['variableName'] instanceof String)) {
            throw new Error("Expected the field `variableName` to be a primitive type in the JSON string but got " + data['variableName']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }
        // ensure the json data is a string
        if (data['variableOid'] && !(typeof data['variableOid'] === 'string' || data['variableOid'] instanceof String)) {
            throw new Error("Expected the field `variableOid` to be a primitive type in the JSON string but got " + data['variableOid']);
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['formName'] && !(typeof data['formName'] === 'string' || data['formName'] instanceof String)) {
            throw new Error("Expected the field `formName` to be a primitive type in the JSON string but got " + data['formName']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Variable.prototype['studyKey'] = undefined;

/**
 * Mednet variable ID
 * @member {Number} variableId
 */
Variable.prototype['variableId'] = undefined;

/**
 * Type of the variable (field type), e.g., RADIO, TEXT, etc.
 * @member {module:model/Variable.VariableTypeEnum} variableType
 */
Variable.prototype['variableType'] = undefined;

/**
 * Name of the variable (question text or label)
 * @member {String} variableName
 */
Variable.prototype['variableName'] = undefined;

/**
 * Sequence of the variable on the form
 * @member {Number} sequence
 */
Variable.prototype['sequence'] = undefined;

/**
 * Number of modifications of the variable (via form metadata revisions)
 * @member {Number} revision
 */
Variable.prototype['revision'] = undefined;

/**
 * Whether the variable is marked as disabled (deleted)
 * @member {Boolean} disabled
 */
Variable.prototype['disabled'] = undefined;

/**
 * Date when this variable was created
 * @member {String} dateCreated
 */
Variable.prototype['dateCreated'] = undefined;

/**
 * Date when this variable was last modified
 * @member {String} dateModified
 */
Variable.prototype['dateModified'] = undefined;

/**
 * ID of the form that this variable belongs to
 * @member {Number} formId
 */
Variable.prototype['formId'] = undefined;

/**
 * Client-assigned variable OID
 * @member {String} variableOid
 */
Variable.prototype['variableOid'] = undefined;

/**
 * Whether the variable is marked as deleted
 * @member {Boolean} deleted
 */
Variable.prototype['deleted'] = undefined;

/**
 * Form key of the form that this variable belongs to
 * @member {String} formKey
 */
Variable.prototype['formKey'] = undefined;

/**
 * Name of the form that this variable belongs to
 * @member {String} formName
 */
Variable.prototype['formName'] = undefined;

/**
 * User-defined identifier (field name) for the variable
 * @member {String} label
 */
Variable.prototype['label'] = undefined;

/**
 * Whether the variable is flagged as blinded (hidden in certain contexts)
 * @member {Boolean} blinded
 */
Variable.prototype['blinded'] = undefined;





/**
 * Allowed values for the <code>variableType</code> property.
 * @enum {String}
 * @readonly
 */
Variable['VariableTypeEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "TEXTAREA"
     * @const
     */
    "TEXTAREA": "TEXTAREA",

    /**
     * value: "RADIO"
     * @const
     */
    "RADIO": "RADIO",

    /**
     * value: "CHECKBOX"
     * @const
     */
    "CHECKBOX": "CHECKBOX",

    /**
     * value: "DROPDOWN"
     * @const
     */
    "DROPDOWN": "DROPDOWN",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER"
};



export default Variable;

