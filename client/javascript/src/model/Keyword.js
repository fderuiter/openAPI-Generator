/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Keyword model module.
 * @module model/Keyword
 * @version 1.0.15
 */
class Keyword {
    /**
     * Constructs a new <code>Keyword</code>.
     * @alias module:model/Keyword
     */
    constructor() { 
        
        Keyword.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Keyword</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Keyword} obj Optional instance to populate.
     * @return {module:model/Keyword} The populated <code>Keyword</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Keyword();

            if (data.hasOwnProperty('keywordName')) {
                obj['keywordName'] = ApiClient.convertToType(data['keywordName'], 'String');
            }
            if (data.hasOwnProperty('keywordKey')) {
                obj['keywordKey'] = ApiClient.convertToType(data['keywordKey'], 'String');
            }
            if (data.hasOwnProperty('keywordId')) {
                obj['keywordId'] = ApiClient.convertToType(data['keywordId'], 'Number');
            }
            if (data.hasOwnProperty('dateAdded')) {
                obj['dateAdded'] = ApiClient.convertToType(data['dateAdded'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Keyword</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Keyword</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['keywordName'] && !(typeof data['keywordName'] === 'string' || data['keywordName'] instanceof String)) {
            throw new Error("Expected the field `keywordName` to be a primitive type in the JSON string but got " + data['keywordName']);
        }
        // ensure the json data is a string
        if (data['keywordKey'] && !(typeof data['keywordKey'] === 'string' || data['keywordKey'] instanceof String)) {
            throw new Error("Expected the field `keywordKey` to be a primitive type in the JSON string but got " + data['keywordKey']);
        }
        // ensure the json data is a string
        if (data['dateAdded'] && !(typeof data['dateAdded'] === 'string' || data['dateAdded'] instanceof String)) {
            throw new Error("Expected the field `dateAdded` to be a primitive type in the JSON string but got " + data['dateAdded']);
        }

        return true;
    }


}



/**
 * Name of the keyword
 * @member {String} keywordName
 */
Keyword.prototype['keywordName'] = undefined;

/**
 * Key of the keyword (short code)
 * @member {String} keywordKey
 */
Keyword.prototype['keywordKey'] = undefined;

/**
 * Internal keyword ID
 * @member {Number} keywordId
 */
Keyword.prototype['keywordId'] = undefined;

/**
 * Date when this keyword was added
 * @member {String} dateAdded
 */
Keyword.prototype['dateAdded'] = undefined;






export default Keyword;

