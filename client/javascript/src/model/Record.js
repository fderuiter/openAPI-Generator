/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Keyword from './Keyword';

/**
 * The Record model module.
 * @module model/Record
 * @version 1.0.15
 */
class Record {
    /**
     * Constructs a new <code>Record</code>.
     * @alias module:model/Record
     */
    constructor() { 
        
        Record.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Record</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Record} obj Optional instance to populate.
     * @return {module:model/Record} The populated <code>Record</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Record();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('recordOid')) {
                obj['recordOid'] = ApiClient.convertToType(data['recordOid'], 'String');
            }
            if (data.hasOwnProperty('recordType')) {
                obj['recordType'] = ApiClient.convertToType(data['recordType'], 'String');
            }
            if (data.hasOwnProperty('recordStatus')) {
                obj['recordStatus'] = ApiClient.convertToType(data['recordStatus'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectOid')) {
                obj['subjectOid'] = ApiClient.convertToType(data['subjectOid'], 'String');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('visitId')) {
                obj['visitId'] = ApiClient.convertToType(data['visitId'], 'Number');
            }
            if (data.hasOwnProperty('parentRecordId')) {
                obj['parentRecordId'] = ApiClient.convertToType(data['parentRecordId'], 'Number');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], [Keyword]);
            }
            if (data.hasOwnProperty('recordData')) {
                obj['recordData'] = ApiClient.convertToType(data['recordData'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Record</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Record</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['recordOid'] && !(typeof data['recordOid'] === 'string' || data['recordOid'] instanceof String)) {
            throw new Error("Expected the field `recordOid` to be a primitive type in the JSON string but got " + data['recordOid']);
        }
        // ensure the json data is a string
        if (data['recordType'] && !(typeof data['recordType'] === 'string' || data['recordType'] instanceof String)) {
            throw new Error("Expected the field `recordType` to be a primitive type in the JSON string but got " + data['recordType']);
        }
        // ensure the json data is a string
        if (data['recordStatus'] && !(typeof data['recordStatus'] === 'string' || data['recordStatus'] instanceof String)) {
            throw new Error("Expected the field `recordStatus` to be a primitive type in the JSON string but got " + data['recordStatus']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }
        // ensure the json data is a string
        if (data['subjectOid'] && !(typeof data['subjectOid'] === 'string' || data['subjectOid'] instanceof String)) {
            throw new Error("Expected the field `subjectOid` to be a primitive type in the JSON string but got " + data['subjectOid']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        if (data['keywords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keywords'])) {
                throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
            }
            // validate the optional field `keywords` (array)
            for (const item of data['keywords']) {
                Keyword.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Record.prototype['studyKey'] = undefined;

/**
 * Interval ID (visit definition) that this record is associated with
 * @member {Number} intervalId
 */
Record.prototype['intervalId'] = undefined;

/**
 * Form ID of the form this record instance belongs to
 * @member {Number} formId
 */
Record.prototype['formId'] = undefined;

/**
 * Form key of the form for this record instance
 * @member {String} formKey
 */
Record.prototype['formKey'] = undefined;

/**
 * Site ID associated with the record
 * @member {Number} siteId
 */
Record.prototype['siteId'] = undefined;

/**
 * Unique record ID
 * @member {Number} recordId
 */
Record.prototype['recordId'] = undefined;

/**
 * Client-assigned record OID
 * @member {String} recordOid
 */
Record.prototype['recordOid'] = undefined;

/**
 * Type of record (e.g., SUBJECT for subject-related forms)
 * @member {String} recordType
 */
Record.prototype['recordType'] = undefined;

/**
 * Current status of the record (e.g., Record Incomplete, Record Complete)
 * @member {String} recordStatus
 */
Record.prototype['recordStatus'] = undefined;

/**
 * Whether the record is marked as deleted
 * @member {Boolean} deleted
 */
Record.prototype['deleted'] = undefined;

/**
 * Date when this record was created
 * @member {String} dateCreated
 */
Record.prototype['dateCreated'] = undefined;

/**
 * Date when this record was last modified
 * @member {String} dateModified
 */
Record.prototype['dateModified'] = undefined;

/**
 * Mednet subject ID that this record is associated with
 * @member {Number} subjectId
 */
Record.prototype['subjectId'] = undefined;

/**
 * Client-assigned subject OID for the subject this record is associated with
 * @member {String} subjectOid
 */
Record.prototype['subjectOid'] = undefined;

/**
 * Subject display ID that this record is associated with
 * @member {String} subjectKey
 */
Record.prototype['subjectKey'] = undefined;

/**
 * Visit instance ID that this record is associated with (if applicable)
 * @member {Number} visitId
 */
Record.prototype['visitId'] = undefined;

/**
 * Record ID of the parent record if this record is a subrecord (if applicable)
 * @member {Number} parentRecordId
 */
Record.prototype['parentRecordId'] = undefined;

/**
 * List of keywords associated with the record
 * @member {Array.<module:model/Keyword>} keywords
 */
Record.prototype['keywords'] = undefined;

/**
 * Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
 * @member {Object.<String, Object>} recordData
 */
Record.prototype['recordData'] = undefined;






export default Record;

