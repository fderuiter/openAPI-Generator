/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryComment model module.
 * @module model/QueryComment
 * @version 1.0.15
 */
class QueryComment {
    /**
     * Constructs a new <code>QueryComment</code>.
     * @alias module:model/QueryComment
     */
    constructor() { 
        
        QueryComment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryComment} obj Optional instance to populate.
     * @return {module:model/QueryComment} The populated <code>QueryComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryComment();

            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('annotationStatus')) {
                obj['annotationStatus'] = ApiClient.convertToType(data['annotationStatus'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('closed')) {
                obj['closed'] = ApiClient.convertToType(data['closed'], 'Boolean');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryComment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationStatus'] && !(typeof data['annotationStatus'] === 'string' || data['annotationStatus'] instanceof String)) {
            throw new Error("Expected the field `annotationStatus` to be a primitive type in the JSON string but got " + data['annotationStatus']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }

        return true;
    }


}



/**
 * Sequence number of the comment/action in the query history
 * @member {Number} sequence
 */
QueryComment.prototype['sequence'] = undefined;

/**
 * Status of the query after this comment (e.g., Open, Closed)
 * @member {String} annotationStatus
 */
QueryComment.prototype['annotationStatus'] = undefined;

/**
 * Username of the user who made the comment or action
 * @member {String} user
 */
QueryComment.prototype['user'] = undefined;

/**
 * Text of the comment
 * @member {String} comment
 */
QueryComment.prototype['comment'] = undefined;

/**
 * Whether the query was marked closed at this step
 * @member {Boolean} closed
 */
QueryComment.prototype['closed'] = undefined;

/**
 * Date of the comment or action
 * @member {String} date
 */
QueryComment.prototype['date'] = undefined;






export default QueryComment;

