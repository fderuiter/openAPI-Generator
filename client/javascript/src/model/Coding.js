/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Coding model module.
 * @module model/Coding
 * @version 1.0.15
 */
class Coding {
    /**
     * Constructs a new <code>Coding</code>.
     * @alias module:model/Coding
     */
    constructor() { 
        
        Coding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Coding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Coding} obj Optional instance to populate.
     * @return {module:model/Coding} The populated <code>Coding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Coding();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('codingId')) {
                obj['codingId'] = ApiClient.convertToType(data['codingId'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('codedBy')) {
                obj['codedBy'] = ApiClient.convertToType(data['codedBy'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('dictionaryName')) {
                obj['dictionaryName'] = ApiClient.convertToType(data['dictionaryName'], 'String');
            }
            if (data.hasOwnProperty('dictionaryVersion')) {
                obj['dictionaryVersion'] = ApiClient.convertToType(data['dictionaryVersion'], 'String');
            }
            if (data.hasOwnProperty('dateCoded')) {
                obj['dateCoded'] = ApiClient.convertToType(data['dateCoded'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Coding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Coding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['siteName'] && !(typeof data['siteName'] === 'string' || data['siteName'] instanceof String)) {
            throw new Error("Expected the field `siteName` to be a primitive type in the JSON string but got " + data['siteName']);
        }
        // ensure the json data is a string
        if (data['subjectKey'] && !(typeof data['subjectKey'] === 'string' || data['subjectKey'] instanceof String)) {
            throw new Error("Expected the field `subjectKey` to be a primitive type in the JSON string but got " + data['subjectKey']);
        }
        // ensure the json data is a string
        if (data['formName'] && !(typeof data['formName'] === 'string' || data['formName'] instanceof String)) {
            throw new Error("Expected the field `formName` to be a primitive type in the JSON string but got " + data['formName']);
        }
        // ensure the json data is a string
        if (data['formKey'] && !(typeof data['formKey'] === 'string' || data['formKey'] instanceof String)) {
            throw new Error("Expected the field `formKey` to be a primitive type in the JSON string but got " + data['formKey']);
        }
        // ensure the json data is a string
        if (data['variable'] && !(typeof data['variable'] === 'string' || data['variable'] instanceof String)) {
            throw new Error("Expected the field `variable` to be a primitive type in the JSON string but got " + data['variable']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['codedBy'] && !(typeof data['codedBy'] === 'string' || data['codedBy'] instanceof String)) {
            throw new Error("Expected the field `codedBy` to be a primitive type in the JSON string but got " + data['codedBy']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['dictionaryName'] && !(typeof data['dictionaryName'] === 'string' || data['dictionaryName'] instanceof String)) {
            throw new Error("Expected the field `dictionaryName` to be a primitive type in the JSON string but got " + data['dictionaryName']);
        }
        // ensure the json data is a string
        if (data['dictionaryVersion'] && !(typeof data['dictionaryVersion'] === 'string' || data['dictionaryVersion'] instanceof String)) {
            throw new Error("Expected the field `dictionaryVersion` to be a primitive type in the JSON string but got " + data['dictionaryVersion']);
        }
        // ensure the json data is a string
        if (data['dateCoded'] && !(typeof data['dateCoded'] === 'string' || data['dateCoded'] instanceof String)) {
            throw new Error("Expected the field `dateCoded` to be a primitive type in the JSON string but got " + data['dateCoded']);
        }

        return true;
    }


}



/**
 * Unique study key
 * @member {String} studyKey
 */
Coding.prototype['studyKey'] = undefined;

/**
 * Name of the site associated with the coded data
 * @member {String} siteName
 */
Coding.prototype['siteName'] = undefined;

/**
 * Site ID associated with the coded data
 * @member {Number} siteId
 */
Coding.prototype['siteId'] = undefined;

/**
 * Subject ID associated with the coded data
 * @member {Number} subjectId
 */
Coding.prototype['subjectId'] = undefined;

/**
 * Subject key (display ID) associated with the coded data
 * @member {String} subjectKey
 */
Coding.prototype['subjectKey'] = undefined;

/**
 * Form ID where the coded data originates
 * @member {Number} formId
 */
Coding.prototype['formId'] = undefined;

/**
 * Name of the form where the coded data originates
 * @member {String} formName
 */
Coding.prototype['formName'] = undefined;

/**
 * Form key where the coded data originates
 * @member {String} formKey
 */
Coding.prototype['formKey'] = undefined;

/**
 * Revision number of the coding entry
 * @member {Number} revision
 */
Coding.prototype['revision'] = undefined;

/**
 * Record ID associated with the coded data
 * @member {Number} recordId
 */
Coding.prototype['recordId'] = undefined;

/**
 * Variable name (field) that was coded
 * @member {String} variable
 */
Coding.prototype['variable'] = undefined;

/**
 * Original value entered that required coding
 * @member {String} value
 */
Coding.prototype['value'] = undefined;

/**
 * Mednet coding ID
 * @member {Number} codingId
 */
Coding.prototype['codingId'] = undefined;

/**
 * Standardized code assigned (e.g., dictionary term)
 * @member {String} code
 */
Coding.prototype['code'] = undefined;

/**
 * Name of the user who performed the coding
 * @member {String} codedBy
 */
Coding.prototype['codedBy'] = undefined;

/**
 * Reason for coding or any notes on changes
 * @member {String} reason
 */
Coding.prototype['reason'] = undefined;

/**
 * Name of the dictionary used (e.g., MedDRA)
 * @member {String} dictionaryName
 */
Coding.prototype['dictionaryName'] = undefined;

/**
 * Version of the dictionary used
 * @member {String} dictionaryVersion
 */
Coding.prototype['dictionaryVersion'] = undefined;

/**
 * Date when the coding was performed
 * @member {String} dateCoded
 */
Coding.prototype['dateCoded'] = undefined;






export default Coding;

