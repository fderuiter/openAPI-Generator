/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Study model module.
 * @module model/Study
 * @version 1.0.15
 */
class Study {
    /**
     * Constructs a new <code>Study</code>.
     * @alias module:model/Study
     */
    constructor() { 
        
        Study.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Study</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Study} obj Optional instance to populate.
     * @return {module:model/Study} The populated <code>Study</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Study();

            if (data.hasOwnProperty('sponsorKey')) {
                obj['sponsorKey'] = ApiClient.convertToType(data['sponsorKey'], 'String');
            }
            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('studyId')) {
                obj['studyId'] = ApiClient.convertToType(data['studyId'], 'Number');
            }
            if (data.hasOwnProperty('studyName')) {
                obj['studyName'] = ApiClient.convertToType(data['studyName'], 'String');
            }
            if (data.hasOwnProperty('studyDescription')) {
                obj['studyDescription'] = ApiClient.convertToType(data['studyDescription'], 'String');
            }
            if (data.hasOwnProperty('studyType')) {
                obj['studyType'] = ApiClient.convertToType(data['studyType'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Study</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Study</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['sponsorKey'] && !(typeof data['sponsorKey'] === 'string' || data['sponsorKey'] instanceof String)) {
            throw new Error("Expected the field `sponsorKey` to be a primitive type in the JSON string but got " + data['sponsorKey']);
        }
        // ensure the json data is a string
        if (data['studyKey'] && !(typeof data['studyKey'] === 'string' || data['studyKey'] instanceof String)) {
            throw new Error("Expected the field `studyKey` to be a primitive type in the JSON string but got " + data['studyKey']);
        }
        // ensure the json data is a string
        if (data['studyName'] && !(typeof data['studyName'] === 'string' || data['studyName'] instanceof String)) {
            throw new Error("Expected the field `studyName` to be a primitive type in the JSON string but got " + data['studyName']);
        }
        // ensure the json data is a string
        if (data['studyDescription'] && !(typeof data['studyDescription'] === 'string' || data['studyDescription'] instanceof String)) {
            throw new Error("Expected the field `studyDescription` to be a primitive type in the JSON string but got " + data['studyDescription']);
        }
        // ensure the json data is a string
        if (data['studyType'] && !(typeof data['studyType'] === 'string' || data['studyType'] instanceof String)) {
            throw new Error("Expected the field `studyType` to be a primitive type in the JSON string but got " + data['studyType']);
        }
        // ensure the json data is a string
        if (data['dateCreated'] && !(typeof data['dateCreated'] === 'string' || data['dateCreated'] instanceof String)) {
            throw new Error("Expected the field `dateCreated` to be a primitive type in the JSON string but got " + data['dateCreated']);
        }
        // ensure the json data is a string
        if (data['dateModified'] && !(typeof data['dateModified'] === 'string' || data['dateModified'] instanceof String)) {
            throw new Error("Expected the field `dateModified` to be a primitive type in the JSON string but got " + data['dateModified']);
        }

        return true;
    }


}



/**
 * Sponsor key that this study belongs to
 * @member {String} sponsorKey
 */
Study.prototype['sponsorKey'] = undefined;

/**
 * Unique study key
 * @member {String} studyKey
 */
Study.prototype['studyKey'] = undefined;

/**
 * Mednet study ID (internal numeric identifier)
 * @member {Number} studyId
 */
Study.prototype['studyId'] = undefined;

/**
 * Name of the study
 * @member {String} studyName
 */
Study.prototype['studyName'] = undefined;

/**
 * Description of the study
 * @member {String} studyDescription
 */
Study.prototype['studyDescription'] = undefined;

/**
 * Type of study (e.g., STUDY)
 * @member {String} studyType
 */
Study.prototype['studyType'] = undefined;

/**
 * Date when the study record was created
 * @member {String} dateCreated
 */
Study.prototype['dateCreated'] = undefined;

/**
 * Date when the study record was last modified
 * @member {String} dateModified
 */
Study.prototype['dateModified'] = undefined;






export default Study;

