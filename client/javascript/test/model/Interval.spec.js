/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MednetEdcApi);
  }
}(this, function(expect, MednetEdcApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MednetEdcApi.Interval();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Interval', function() {
    it('should create an instance of Interval', function() {
      // uncomment below and update the code to test Interval
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be.a(MednetEdcApi.Interval);
    });

    it('should have the property studyKey (base name: "studyKey")', function() {
      // uncomment below and update the code to test the property studyKey
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalId (base name: "intervalId")', function() {
      // uncomment below and update the code to test the property intervalId
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalName (base name: "intervalName")', function() {
      // uncomment below and update the code to test the property intervalName
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalDescription (base name: "intervalDescription")', function() {
      // uncomment below and update the code to test the property intervalDescription
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalSequence (base name: "intervalSequence")', function() {
      // uncomment below and update the code to test the property intervalSequence
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalGroupId (base name: "intervalGroupId")', function() {
      // uncomment below and update the code to test the property intervalGroupId
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property intervalGroupName (base name: "intervalGroupName")', function() {
      // uncomment below and update the code to test the property intervalGroupName
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property timeline (base name: "timeline")', function() {
      // uncomment below and update the code to test the property timeline
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property definedUsingInterval (base name: "definedUsingInterval")', function() {
      // uncomment below and update the code to test the property definedUsingInterval
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property windowCalculationForm (base name: "windowCalculationForm")', function() {
      // uncomment below and update the code to test the property windowCalculationForm
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property windowCalculationDate (base name: "windowCalculationDate")', function() {
      // uncomment below and update the code to test the property windowCalculationDate
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property actualDateForm (base name: "actualDateForm")', function() {
      // uncomment below and update the code to test the property actualDateForm
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property actualDate (base name: "actualDate")', function() {
      // uncomment below and update the code to test the property actualDate
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property dueDateWillBeIn (base name: "dueDateWillBeIn")', function() {
      // uncomment below and update the code to test the property dueDateWillBeIn
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property negativeSlack (base name: "negativeSlack")', function() {
      // uncomment below and update the code to test the property negativeSlack
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property positiveSlack (base name: "positiveSlack")', function() {
      // uncomment below and update the code to test the property positiveSlack
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property eproGracePeriod (base name: "eproGracePeriod")', function() {
      // uncomment below and update the code to test the property eproGracePeriod
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property forms (base name: "forms")', function() {
      // uncomment below and update the code to test the property forms
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property dateCreated (base name: "dateCreated")', function() {
      // uncomment below and update the code to test the property dateCreated
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

    it('should have the property dateModified (base name: "dateModified")', function() {
      // uncomment below and update the code to test the property dateModified
      //var instance = new MednetEdcApi.Interval();
      //expect(instance).to.be();
    });

  });

}));
