=begin
#Mednet EDC API

#The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.0.15

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Variable
    # Unique study key
    attr_accessor :study_key

    # Mednet variable ID
    attr_accessor :variable_id

    # Type of the variable (field type), e.g., RADIO, TEXT, etc.
    attr_accessor :variable_type

    # Name of the variable (question text or label)
    attr_accessor :variable_name

    # Sequence of the variable on the form
    attr_accessor :sequence

    # Number of modifications of the variable (via form metadata revisions)
    attr_accessor :revision

    # Whether the variable is marked as disabled (deleted)
    attr_accessor :disabled

    # Date when this variable was created
    attr_accessor :date_created

    # Date when this variable was last modified
    attr_accessor :date_modified

    # ID of the form that this variable belongs to
    attr_accessor :form_id

    # Client-assigned variable OID
    attr_accessor :variable_oid

    # Whether the variable is marked as deleted
    attr_accessor :deleted

    # Form key of the form that this variable belongs to
    attr_accessor :form_key

    # Name of the form that this variable belongs to
    attr_accessor :form_name

    # User-defined identifier (field name) for the variable
    attr_accessor :label

    # Whether the variable is flagged as blinded (hidden in certain contexts)
    attr_accessor :blinded

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'study_key' => :'studyKey',
        :'variable_id' => :'variableId',
        :'variable_type' => :'variableType',
        :'variable_name' => :'variableName',
        :'sequence' => :'sequence',
        :'revision' => :'revision',
        :'disabled' => :'disabled',
        :'date_created' => :'dateCreated',
        :'date_modified' => :'dateModified',
        :'form_id' => :'formId',
        :'variable_oid' => :'variableOid',
        :'deleted' => :'deleted',
        :'form_key' => :'formKey',
        :'form_name' => :'formName',
        :'label' => :'label',
        :'blinded' => :'blinded'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'study_key' => :'String',
        :'variable_id' => :'Integer',
        :'variable_type' => :'String',
        :'variable_name' => :'String',
        :'sequence' => :'Integer',
        :'revision' => :'Integer',
        :'disabled' => :'Boolean',
        :'date_created' => :'String',
        :'date_modified' => :'String',
        :'form_id' => :'Integer',
        :'variable_oid' => :'String',
        :'deleted' => :'Boolean',
        :'form_key' => :'String',
        :'form_name' => :'String',
        :'label' => :'String',
        :'blinded' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Variable` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Variable`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'study_key')
        self.study_key = attributes[:'study_key']
      end

      if attributes.key?(:'variable_id')
        self.variable_id = attributes[:'variable_id']
      end

      if attributes.key?(:'variable_type')
        self.variable_type = attributes[:'variable_type']
      end

      if attributes.key?(:'variable_name')
        self.variable_name = attributes[:'variable_name']
      end

      if attributes.key?(:'sequence')
        self.sequence = attributes[:'sequence']
      end

      if attributes.key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end

      if attributes.key?(:'form_id')
        self.form_id = attributes[:'form_id']
      end

      if attributes.key?(:'variable_oid')
        self.variable_oid = attributes[:'variable_oid']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'form_key')
        self.form_key = attributes[:'form_key']
      end

      if attributes.key?(:'form_name')
        self.form_name = attributes[:'form_name']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'blinded')
        self.blinded = attributes[:'blinded']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      variable_type_validator = EnumAttributeValidator.new('String', ["TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"])
      return false unless variable_type_validator.valid?(@variable_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] variable_type Object to be assigned
    def variable_type=(variable_type)
      validator = EnumAttributeValidator.new('String', ["TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"])
      unless validator.valid?(variable_type)
        fail ArgumentError, "invalid value for \"variable_type\", must be one of #{validator.allowable_values}."
      end
      @variable_type = variable_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          study_key == o.study_key &&
          variable_id == o.variable_id &&
          variable_type == o.variable_type &&
          variable_name == o.variable_name &&
          sequence == o.sequence &&
          revision == o.revision &&
          disabled == o.disabled &&
          date_created == o.date_created &&
          date_modified == o.date_modified &&
          form_id == o.form_id &&
          variable_oid == o.variable_oid &&
          deleted == o.deleted &&
          form_key == o.form_key &&
          form_name == o.form_name &&
          label == o.label &&
          blinded == o.blinded
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, variable_id, variable_type, variable_name, sequence, revision, disabled, date_created, date_modified, form_id, variable_oid, deleted, form_key, form_name, label, blinded].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
