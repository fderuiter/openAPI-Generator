=begin
#Mednet EDC API

#The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.0.15

Generated by: https://openapi-generator.tech
Generator version: 7.14.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Coding
    # Unique study key
    attr_accessor :study_key

    # Name of the site associated with the coded data
    attr_accessor :site_name

    # Site ID associated with the coded data
    attr_accessor :site_id

    # Subject ID associated with the coded data
    attr_accessor :subject_id

    # Subject key (display ID) associated with the coded data
    attr_accessor :subject_key

    # Form ID where the coded data originates
    attr_accessor :form_id

    # Name of the form where the coded data originates
    attr_accessor :form_name

    # Form key where the coded data originates
    attr_accessor :form_key

    # Revision number of the coding entry
    attr_accessor :revision

    # Record ID associated with the coded data
    attr_accessor :record_id

    # Variable name (field) that was coded
    attr_accessor :variable

    # Original value entered that required coding
    attr_accessor :value

    # Mednet coding ID
    attr_accessor :coding_id

    # Standardized code assigned (e.g., dictionary term)
    attr_accessor :code

    # Name of the user who performed the coding
    attr_accessor :coded_by

    # Reason for coding or any notes on changes
    attr_accessor :reason

    # Name of the dictionary used (e.g., MedDRA)
    attr_accessor :dictionary_name

    # Version of the dictionary used
    attr_accessor :dictionary_version

    # Date when the coding was performed
    attr_accessor :date_coded

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'study_key' => :'studyKey',
        :'site_name' => :'siteName',
        :'site_id' => :'siteId',
        :'subject_id' => :'subjectId',
        :'subject_key' => :'subjectKey',
        :'form_id' => :'formId',
        :'form_name' => :'formName',
        :'form_key' => :'formKey',
        :'revision' => :'revision',
        :'record_id' => :'recordId',
        :'variable' => :'variable',
        :'value' => :'value',
        :'coding_id' => :'codingId',
        :'code' => :'code',
        :'coded_by' => :'codedBy',
        :'reason' => :'reason',
        :'dictionary_name' => :'dictionaryName',
        :'dictionary_version' => :'dictionaryVersion',
        :'date_coded' => :'dateCoded'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'study_key' => :'String',
        :'site_name' => :'String',
        :'site_id' => :'Integer',
        :'subject_id' => :'Integer',
        :'subject_key' => :'String',
        :'form_id' => :'Integer',
        :'form_name' => :'String',
        :'form_key' => :'String',
        :'revision' => :'Integer',
        :'record_id' => :'Integer',
        :'variable' => :'String',
        :'value' => :'String',
        :'coding_id' => :'Integer',
        :'code' => :'String',
        :'coded_by' => :'String',
        :'reason' => :'String',
        :'dictionary_name' => :'String',
        :'dictionary_version' => :'String',
        :'date_coded' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Coding` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Coding`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'study_key')
        self.study_key = attributes[:'study_key']
      end

      if attributes.key?(:'site_name')
        self.site_name = attributes[:'site_name']
      end

      if attributes.key?(:'site_id')
        self.site_id = attributes[:'site_id']
      end

      if attributes.key?(:'subject_id')
        self.subject_id = attributes[:'subject_id']
      end

      if attributes.key?(:'subject_key')
        self.subject_key = attributes[:'subject_key']
      end

      if attributes.key?(:'form_id')
        self.form_id = attributes[:'form_id']
      end

      if attributes.key?(:'form_name')
        self.form_name = attributes[:'form_name']
      end

      if attributes.key?(:'form_key')
        self.form_key = attributes[:'form_key']
      end

      if attributes.key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.key?(:'record_id')
        self.record_id = attributes[:'record_id']
      end

      if attributes.key?(:'variable')
        self.variable = attributes[:'variable']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'coding_id')
        self.coding_id = attributes[:'coding_id']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'coded_by')
        self.coded_by = attributes[:'coded_by']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'dictionary_name')
        self.dictionary_name = attributes[:'dictionary_name']
      end

      if attributes.key?(:'dictionary_version')
        self.dictionary_version = attributes[:'dictionary_version']
      end

      if attributes.key?(:'date_coded')
        self.date_coded = attributes[:'date_coded']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          study_key == o.study_key &&
          site_name == o.site_name &&
          site_id == o.site_id &&
          subject_id == o.subject_id &&
          subject_key == o.subject_key &&
          form_id == o.form_id &&
          form_name == o.form_name &&
          form_key == o.form_key &&
          revision == o.revision &&
          record_id == o.record_id &&
          variable == o.variable &&
          value == o.value &&
          coding_id == o.coding_id &&
          code == o.code &&
          coded_by == o.coded_by &&
          reason == o.reason &&
          dictionary_name == o.dictionary_name &&
          dictionary_version == o.dictionary_version &&
          date_coded == o.date_coded
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, site_name, site_id, subject_id, subject_key, form_id, form_name, form_key, revision, record_id, variable, value, coding_id, code, coded_by, reason, dictionary_name, dictionary_version, date_coded].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
