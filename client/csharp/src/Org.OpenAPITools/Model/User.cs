// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// User
    /// </summary>
    public partial class User : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="userId">Unique user ID (UUID)</param>
        /// <param name="login">User login name</param>
        /// <param name="firstName">User first name</param>
        /// <param name="lastName">User last name</param>
        /// <param name="email">User email address</param>
        /// <param name="userActiveInStudy">Whether the user is active in the given study</param>
        /// <param name="roles">Roles that the user has in the study</param>
        [JsonConstructor]
        public User(Option<string?> userId = default, Option<string?> login = default, Option<string?> firstName = default, Option<string?> lastName = default, Option<string?> email = default, Option<bool?> userActiveInStudy = default, Option<List<Role>?> roles = default)
        {
            UserIdOption = userId;
            LoginOption = login;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            EmailOption = email;
            UserActiveInStudyOption = userActiveInStudy;
            RolesOption = roles;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// Unique user ID (UUID)
        /// </summary>
        /// <value>Unique user ID (UUID)</value>
        [JsonPropertyName("userId")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Login
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginOption { get; private set; }

        /// <summary>
        /// User login name
        /// </summary>
        /// <value>User login name</value>
        [JsonPropertyName("login")]
        public string? Login { get { return this.LoginOption; } set { this.LoginOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// User first name
        /// </summary>
        /// <value>User first name</value>
        [JsonPropertyName("firstName")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// User last name
        /// </summary>
        /// <value>User last name</value>
        [JsonPropertyName("lastName")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// User email address
        /// </summary>
        /// <value>User email address</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserActiveInStudy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UserActiveInStudyOption { get; private set; }

        /// <summary>
        /// Whether the user is active in the given study
        /// </summary>
        /// <value>Whether the user is active in the given study</value>
        [JsonPropertyName("userActiveInStudy")]
        public bool? UserActiveInStudy { get { return this.UserActiveInStudyOption; } set { this.UserActiveInStudyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Roles
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Role>?> RolesOption { get; private set; }

        /// <summary>
        /// Roles that the user has in the study
        /// </summary>
        /// <value>Roles that the user has in the study</value>
        [JsonPropertyName("roles")]
        public List<Role>? Roles { get { return this.RolesOption; } set { this.RolesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  UserActiveInStudy: ").Append(UserActiveInStudy).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="User" />
    /// </summary>
    public class UserJsonConverter : JsonConverter<User>
    {
        /// <summary>
        /// Deserializes json to <see cref="User" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override User Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<string?> login = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> email = default;
            Option<bool?> userActiveInStudy = default;
            Option<List<Role>?> roles = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "login":
                            login = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "firstName":
                            firstName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastName":
                            lastName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userActiveInStudy":
                            userActiveInStudy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "roles":
                            roles = new Option<List<Role>?>(JsonSerializer.Deserialize<List<Role>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class User.");

            if (login.IsSet && login.Value == null)
                throw new ArgumentNullException(nameof(login), "Property is not nullable for class User.");

            if (firstName.IsSet && firstName.Value == null)
                throw new ArgumentNullException(nameof(firstName), "Property is not nullable for class User.");

            if (lastName.IsSet && lastName.Value == null)
                throw new ArgumentNullException(nameof(lastName), "Property is not nullable for class User.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class User.");

            if (userActiveInStudy.IsSet && userActiveInStudy.Value == null)
                throw new ArgumentNullException(nameof(userActiveInStudy), "Property is not nullable for class User.");

            if (roles.IsSet && roles.Value == null)
                throw new ArgumentNullException(nameof(roles), "Property is not nullable for class User.");

            return new User(userId, login, firstName, lastName, email, userActiveInStudy, roles);
        }

        /// <summary>
        /// Serializes a <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, user, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="User" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="user"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, User user, JsonSerializerOptions jsonSerializerOptions)
        {
            if (user.UserIdOption.IsSet && user.UserId == null)
                throw new ArgumentNullException(nameof(user.UserId), "Property is required for class User.");

            if (user.LoginOption.IsSet && user.Login == null)
                throw new ArgumentNullException(nameof(user.Login), "Property is required for class User.");

            if (user.FirstNameOption.IsSet && user.FirstName == null)
                throw new ArgumentNullException(nameof(user.FirstName), "Property is required for class User.");

            if (user.LastNameOption.IsSet && user.LastName == null)
                throw new ArgumentNullException(nameof(user.LastName), "Property is required for class User.");

            if (user.EmailOption.IsSet && user.Email == null)
                throw new ArgumentNullException(nameof(user.Email), "Property is required for class User.");

            if (user.RolesOption.IsSet && user.Roles == null)
                throw new ArgumentNullException(nameof(user.Roles), "Property is required for class User.");

            if (user.UserIdOption.IsSet)
                writer.WriteString("userId", user.UserId);

            if (user.LoginOption.IsSet)
                writer.WriteString("login", user.Login);

            if (user.FirstNameOption.IsSet)
                writer.WriteString("firstName", user.FirstName);

            if (user.LastNameOption.IsSet)
                writer.WriteString("lastName", user.LastName);

            if (user.EmailOption.IsSet)
                writer.WriteString("email", user.Email);

            if (user.UserActiveInStudyOption.IsSet)
                writer.WriteBoolean("userActiveInStudy", user.UserActiveInStudyOption.Value!.Value);

            if (user.RolesOption.IsSet)
            {
                writer.WritePropertyName("roles");
                JsonSerializer.Serialize(writer, user.Roles, jsonSerializerOptions);
            }
        }
    }
}
