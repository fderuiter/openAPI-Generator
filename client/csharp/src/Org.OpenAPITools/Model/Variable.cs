// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Variable
    /// </summary>
    public partial class Variable : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Variable" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="variableId">Mednet variable ID</param>
        /// <param name="variableType">Type of the variable (field type), e.g., RADIO, TEXT, etc.</param>
        /// <param name="variableName">Name of the variable (question text or label)</param>
        /// <param name="sequence">Sequence of the variable on the form</param>
        /// <param name="revision">Number of modifications of the variable (via form metadata revisions)</param>
        /// <param name="disabled">Whether the variable is marked as disabled (deleted)</param>
        /// <param name="dateCreated">Date when this variable was created</param>
        /// <param name="dateModified">Date when this variable was last modified</param>
        /// <param name="formId">ID of the form that this variable belongs to</param>
        /// <param name="variableOid">Client-assigned variable OID</param>
        /// <param name="deleted">Whether the variable is marked as deleted</param>
        /// <param name="formKey">Form key of the form that this variable belongs to</param>
        /// <param name="formName">Name of the form that this variable belongs to</param>
        /// <param name="label">User-defined identifier (field name) for the variable</param>
        /// <param name="blinded">Whether the variable is flagged as blinded (hidden in certain contexts)</param>
        [JsonConstructor]
        public Variable(Option<string?> studyKey = default, Option<int?> variableId = default, Option<VariableTypeEnum?> variableType = default, Option<string?> variableName = default, Option<int?> sequence = default, Option<int?> revision = default, Option<bool?> disabled = default, Option<string?> dateCreated = default, Option<string?> dateModified = default, Option<int?> formId = default, Option<string?> variableOid = default, Option<bool?> deleted = default, Option<string?> formKey = default, Option<string?> formName = default, Option<string?> label = default, Option<bool?> blinded = default)
        {
            StudyKeyOption = studyKey;
            VariableIdOption = variableId;
            VariableTypeOption = variableType;
            VariableNameOption = variableName;
            SequenceOption = sequence;
            RevisionOption = revision;
            DisabledOption = disabled;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            FormIdOption = formId;
            VariableOidOption = variableOid;
            DeletedOption = deleted;
            FormKeyOption = formKey;
            FormNameOption = formName;
            LabelOption = label;
            BlindedOption = blinded;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of the variable (field type), e.g., RADIO, TEXT, etc.
        /// </summary>
        /// <value>Type of the variable (field type), e.g., RADIO, TEXT, etc.</value>
        public enum VariableTypeEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            TEXT = 1,

            /// <summary>
            /// Enum TEXTAREA for value: TEXTAREA
            /// </summary>
            TEXTAREA = 2,

            /// <summary>
            /// Enum RADIO for value: RADIO
            /// </summary>
            RADIO = 3,

            /// <summary>
            /// Enum CHECKBOX for value: CHECKBOX
            /// </summary>
            CHECKBOX = 4,

            /// <summary>
            /// Enum DROPDOWN for value: DROPDOWN
            /// </summary>
            DROPDOWN = 5,

            /// <summary>
            /// Enum DATE for value: DATE
            /// </summary>
            DATE = 6,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            NUMBER = 7
        }

        /// <summary>
        /// Returns a <see cref="VariableTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static VariableTypeEnum VariableTypeEnumFromString(string value)
        {
            if (value.Equals("TEXT"))
                return VariableTypeEnum.TEXT;

            if (value.Equals("TEXTAREA"))
                return VariableTypeEnum.TEXTAREA;

            if (value.Equals("RADIO"))
                return VariableTypeEnum.RADIO;

            if (value.Equals("CHECKBOX"))
                return VariableTypeEnum.CHECKBOX;

            if (value.Equals("DROPDOWN"))
                return VariableTypeEnum.DROPDOWN;

            if (value.Equals("DATE"))
                return VariableTypeEnum.DATE;

            if (value.Equals("NUMBER"))
                return VariableTypeEnum.NUMBER;

            throw new NotImplementedException($"Could not convert value to type VariableTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="VariableTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VariableTypeEnum? VariableTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TEXT"))
                return VariableTypeEnum.TEXT;

            if (value.Equals("TEXTAREA"))
                return VariableTypeEnum.TEXTAREA;

            if (value.Equals("RADIO"))
                return VariableTypeEnum.RADIO;

            if (value.Equals("CHECKBOX"))
                return VariableTypeEnum.CHECKBOX;

            if (value.Equals("DROPDOWN"))
                return VariableTypeEnum.DROPDOWN;

            if (value.Equals("DATE"))
                return VariableTypeEnum.DATE;

            if (value.Equals("NUMBER"))
                return VariableTypeEnum.NUMBER;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VariableTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string VariableTypeEnumToJsonValue(VariableTypeEnum? value)
        {
            if (value == VariableTypeEnum.TEXT)
                return "TEXT";

            if (value == VariableTypeEnum.TEXTAREA)
                return "TEXTAREA";

            if (value == VariableTypeEnum.RADIO)
                return "RADIO";

            if (value == VariableTypeEnum.CHECKBOX)
                return "CHECKBOX";

            if (value == VariableTypeEnum.DROPDOWN)
                return "DROPDOWN";

            if (value == VariableTypeEnum.DATE)
                return "DATE";

            if (value == VariableTypeEnum.NUMBER)
                return "NUMBER";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of VariableType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<VariableTypeEnum?> VariableTypeOption { get; private set; }

        /// <summary>
        /// Type of the variable (field type), e.g., RADIO, TEXT, etc.
        /// </summary>
        /// <value>Type of the variable (field type), e.g., RADIO, TEXT, etc.</value>
        [JsonPropertyName("variableType")]
        public VariableTypeEnum? VariableType { get { return this.VariableTypeOption; } set { this.VariableTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of VariableId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VariableIdOption { get; private set; }

        /// <summary>
        /// Mednet variable ID
        /// </summary>
        /// <value>Mednet variable ID</value>
        [JsonPropertyName("variableId")]
        public int? VariableId { get { return this.VariableIdOption; } set { this.VariableIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VariableName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VariableNameOption { get; private set; }

        /// <summary>
        /// Name of the variable (question text or label)
        /// </summary>
        /// <value>Name of the variable (question text or label)</value>
        [JsonPropertyName("variableName")]
        public string? VariableName { get { return this.VariableNameOption; } set { this.VariableNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sequence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SequenceOption { get; private set; }

        /// <summary>
        /// Sequence of the variable on the form
        /// </summary>
        /// <value>Sequence of the variable on the form</value>
        [JsonPropertyName("sequence")]
        public int? Sequence { get { return this.SequenceOption; } set { this.SequenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Revision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RevisionOption { get; private set; }

        /// <summary>
        /// Number of modifications of the variable (via form metadata revisions)
        /// </summary>
        /// <value>Number of modifications of the variable (via form metadata revisions)</value>
        [JsonPropertyName("revision")]
        public int? Revision { get { return this.RevisionOption; } set { this.RevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Disabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisabledOption { get; private set; }

        /// <summary>
        /// Whether the variable is marked as disabled (deleted)
        /// </summary>
        /// <value>Whether the variable is marked as disabled (deleted)</value>
        [JsonPropertyName("disabled")]
        public bool? Disabled { get { return this.DisabledOption; } set { this.DisabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this variable was created
        /// </summary>
        /// <value>Date when this variable was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this variable was last modified
        /// </summary>
        /// <value>Date when this variable was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// ID of the form that this variable belongs to
        /// </summary>
        /// <value>ID of the form that this variable belongs to</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of VariableOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VariableOidOption { get; private set; }

        /// <summary>
        /// Client-assigned variable OID
        /// </summary>
        /// <value>Client-assigned variable OID</value>
        [JsonPropertyName("variableOid")]
        public string? VariableOid { get { return this.VariableOidOption; } set { this.VariableOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the variable is marked as deleted
        /// </summary>
        /// <value>Whether the variable is marked as deleted</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// Form key of the form that this variable belongs to
        /// </summary>
        /// <value>Form key of the form that this variable belongs to</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormNameOption { get; private set; }

        /// <summary>
        /// Name of the form that this variable belongs to
        /// </summary>
        /// <value>Name of the form that this variable belongs to</value>
        [JsonPropertyName("formName")]
        public string? FormName { get { return this.FormNameOption; } set { this.FormNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LabelOption { get; private set; }

        /// <summary>
        /// User-defined identifier (field name) for the variable
        /// </summary>
        /// <value>User-defined identifier (field name) for the variable</value>
        [JsonPropertyName("label")]
        public string? Label { get { return this.LabelOption; } set { this.LabelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Blinded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BlindedOption { get; private set; }

        /// <summary>
        /// Whether the variable is flagged as blinded (hidden in certain contexts)
        /// </summary>
        /// <value>Whether the variable is flagged as blinded (hidden in certain contexts)</value>
        [JsonPropertyName("blinded")]
        public bool? Blinded { get { return this.BlindedOption; } set { this.BlindedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Variable {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  VariableId: ").Append(VariableId).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("  VariableName: ").Append(VariableName).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  VariableOid: ").Append(VariableOid).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Blinded: ").Append(Blinded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Variable" />
    /// </summary>
    public class VariableJsonConverter : JsonConverter<Variable>
    {
        /// <summary>
        /// Deserializes json to <see cref="Variable" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Variable Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> variableId = default;
            Option<Variable.VariableTypeEnum?> variableType = default;
            Option<string?> variableName = default;
            Option<int?> sequence = default;
            Option<int?> revision = default;
            Option<bool?> disabled = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;
            Option<int?> formId = default;
            Option<string?> variableOid = default;
            Option<bool?> deleted = default;
            Option<string?> formKey = default;
            Option<string?> formName = default;
            Option<string?> label = default;
            Option<bool?> blinded = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "variableId":
                            variableId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "variableType":
                            string? variableTypeRawValue = utf8JsonReader.GetString();
                            if (variableTypeRawValue != null)
                                variableType = new Option<Variable.VariableTypeEnum?>(Variable.VariableTypeEnumFromStringOrDefault(variableTypeRawValue));
                            break;
                        case "variableName":
                            variableName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sequence":
                            sequence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "revision":
                            revision = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "disabled":
                            disabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "variableOid":
                            variableOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted":
                            deleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formName":
                            formName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "label":
                            label = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "blinded":
                            blinded = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Variable.");

            if (variableId.IsSet && variableId.Value == null)
                throw new ArgumentNullException(nameof(variableId), "Property is not nullable for class Variable.");

            if (variableType.IsSet && variableType.Value == null)
                throw new ArgumentNullException(nameof(variableType), "Property is not nullable for class Variable.");

            if (variableName.IsSet && variableName.Value == null)
                throw new ArgumentNullException(nameof(variableName), "Property is not nullable for class Variable.");

            if (sequence.IsSet && sequence.Value == null)
                throw new ArgumentNullException(nameof(sequence), "Property is not nullable for class Variable.");

            if (revision.IsSet && revision.Value == null)
                throw new ArgumentNullException(nameof(revision), "Property is not nullable for class Variable.");

            if (disabled.IsSet && disabled.Value == null)
                throw new ArgumentNullException(nameof(disabled), "Property is not nullable for class Variable.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Variable.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Variable.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class Variable.");

            if (variableOid.IsSet && variableOid.Value == null)
                throw new ArgumentNullException(nameof(variableOid), "Property is not nullable for class Variable.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class Variable.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class Variable.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class Variable.");

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class Variable.");

            if (blinded.IsSet && blinded.Value == null)
                throw new ArgumentNullException(nameof(blinded), "Property is not nullable for class Variable.");

            return new Variable(studyKey, variableId, variableType, variableName, sequence, revision, disabled, dateCreated, dateModified, formId, variableOid, deleted, formKey, formName, label, blinded);
        }

        /// <summary>
        /// Serializes a <see cref="Variable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="variable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Variable variable, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, variable, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Variable" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="variable"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Variable variable, JsonSerializerOptions jsonSerializerOptions)
        {
            if (variable.StudyKeyOption.IsSet && variable.StudyKey == null)
                throw new ArgumentNullException(nameof(variable.StudyKey), "Property is required for class Variable.");

            if (variable.VariableNameOption.IsSet && variable.VariableName == null)
                throw new ArgumentNullException(nameof(variable.VariableName), "Property is required for class Variable.");

            if (variable.DateCreatedOption.IsSet && variable.DateCreated == null)
                throw new ArgumentNullException(nameof(variable.DateCreated), "Property is required for class Variable.");

            if (variable.DateModifiedOption.IsSet && variable.DateModified == null)
                throw new ArgumentNullException(nameof(variable.DateModified), "Property is required for class Variable.");

            if (variable.VariableOidOption.IsSet && variable.VariableOid == null)
                throw new ArgumentNullException(nameof(variable.VariableOid), "Property is required for class Variable.");

            if (variable.FormKeyOption.IsSet && variable.FormKey == null)
                throw new ArgumentNullException(nameof(variable.FormKey), "Property is required for class Variable.");

            if (variable.FormNameOption.IsSet && variable.FormName == null)
                throw new ArgumentNullException(nameof(variable.FormName), "Property is required for class Variable.");

            if (variable.LabelOption.IsSet && variable.Label == null)
                throw new ArgumentNullException(nameof(variable.Label), "Property is required for class Variable.");

            if (variable.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", variable.StudyKey);

            if (variable.VariableIdOption.IsSet)
                writer.WriteNumber("variableId", variable.VariableIdOption.Value!.Value);

            var variableTypeRawValue = Variable.VariableTypeEnumToJsonValue(variable.VariableTypeOption.Value!.Value);
            writer.WriteString("variableType", variableTypeRawValue);
            if (variable.VariableNameOption.IsSet)
                writer.WriteString("variableName", variable.VariableName);

            if (variable.SequenceOption.IsSet)
                writer.WriteNumber("sequence", variable.SequenceOption.Value!.Value);

            if (variable.RevisionOption.IsSet)
                writer.WriteNumber("revision", variable.RevisionOption.Value!.Value);

            if (variable.DisabledOption.IsSet)
                writer.WriteBoolean("disabled", variable.DisabledOption.Value!.Value);

            if (variable.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", variable.DateCreated);

            if (variable.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", variable.DateModified);

            if (variable.FormIdOption.IsSet)
                writer.WriteNumber("formId", variable.FormIdOption.Value!.Value);

            if (variable.VariableOidOption.IsSet)
                writer.WriteString("variableOid", variable.VariableOid);

            if (variable.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", variable.DeletedOption.Value!.Value);

            if (variable.FormKeyOption.IsSet)
                writer.WriteString("formKey", variable.FormKey);

            if (variable.FormNameOption.IsSet)
                writer.WriteString("formName", variable.FormName);

            if (variable.LabelOption.IsSet)
                writer.WriteString("label", variable.Label);

            if (variable.BlindedOption.IsSet)
                writer.WriteBoolean("blinded", variable.BlindedOption.Value!.Value);
        }
    }
}
