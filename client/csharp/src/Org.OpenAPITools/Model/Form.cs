// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Form
    /// </summary>
    public partial class Form : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Form" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="formId">Mednet Form ID</param>
        /// <param name="formKey">User-defined form key</param>
        /// <param name="formName">Name of the form (eCRF)</param>
        /// <param name="formType">Type of the form (e.g., Subject or Site)</param>
        /// <param name="revision">Number of modifications (revisions) of the form metadata</param>
        /// <param name="embeddedLog">Whether the form has an embedded log</param>
        /// <param name="enforceOwnership">Whether the form enforces record ownership</param>
        /// <param name="userAgreement">Whether the form requires a user agreement</param>
        /// <param name="subjectRecordReport">Whether the form is marked as a subject record report</param>
        /// <param name="unscheduledVisit">Whether the form is included in unscheduled visits</param>
        /// <param name="otherForms">Whether the form is included in Other Forms category</param>
        /// <param name="eproForm">Whether the form is an ePRO (electronic patient reported outcome) form</param>
        /// <param name="allowCopy">Whether the form allows copying of data</param>
        /// <param name="disabled">Whether the form is soft-deleted (disabled)</param>
        /// <param name="dateCreated">Date when this form was created</param>
        /// <param name="dateModified">Date when this form was last modified</param>
        [JsonConstructor]
        public Form(Option<string?> studyKey = default, Option<int?> formId = default, Option<string?> formKey = default, Option<string?> formName = default, Option<string?> formType = default, Option<int?> revision = default, Option<bool?> embeddedLog = default, Option<bool?> enforceOwnership = default, Option<bool?> userAgreement = default, Option<bool?> subjectRecordReport = default, Option<bool?> unscheduledVisit = default, Option<bool?> otherForms = default, Option<bool?> eproForm = default, Option<bool?> allowCopy = default, Option<bool?> disabled = default, Option<string?> dateCreated = default, Option<string?> dateModified = default)
        {
            StudyKeyOption = studyKey;
            FormIdOption = formId;
            FormKeyOption = formKey;
            FormNameOption = formName;
            FormTypeOption = formType;
            RevisionOption = revision;
            EmbeddedLogOption = embeddedLog;
            EnforceOwnershipOption = enforceOwnership;
            UserAgreementOption = userAgreement;
            SubjectRecordReportOption = subjectRecordReport;
            UnscheduledVisitOption = unscheduledVisit;
            OtherFormsOption = otherForms;
            EproFormOption = eproForm;
            AllowCopyOption = allowCopy;
            DisabledOption = disabled;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Mednet Form ID
        /// </summary>
        /// <value>Mednet Form ID</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// User-defined form key
        /// </summary>
        /// <value>User-defined form key</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormNameOption { get; private set; }

        /// <summary>
        /// Name of the form (eCRF)
        /// </summary>
        /// <value>Name of the form (eCRF)</value>
        [JsonPropertyName("formName")]
        public string? FormName { get { return this.FormNameOption; } set { this.FormNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormTypeOption { get; private set; }

        /// <summary>
        /// Type of the form (e.g., Subject or Site)
        /// </summary>
        /// <value>Type of the form (e.g., Subject or Site)</value>
        [JsonPropertyName("formType")]
        public string? FormType { get { return this.FormTypeOption; } set { this.FormTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Revision
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RevisionOption { get; private set; }

        /// <summary>
        /// Number of modifications (revisions) of the form metadata
        /// </summary>
        /// <value>Number of modifications (revisions) of the form metadata</value>
        [JsonPropertyName("revision")]
        public int? Revision { get { return this.RevisionOption; } set { this.RevisionOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddedLog
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmbeddedLogOption { get; private set; }

        /// <summary>
        /// Whether the form has an embedded log
        /// </summary>
        /// <value>Whether the form has an embedded log</value>
        [JsonPropertyName("embeddedLog")]
        public bool? EmbeddedLog { get { return this.EmbeddedLogOption; } set { this.EmbeddedLogOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnforceOwnership
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnforceOwnershipOption { get; private set; }

        /// <summary>
        /// Whether the form enforces record ownership
        /// </summary>
        /// <value>Whether the form enforces record ownership</value>
        [JsonPropertyName("enforceOwnership")]
        public bool? EnforceOwnership { get { return this.EnforceOwnershipOption; } set { this.EnforceOwnershipOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserAgreement
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UserAgreementOption { get; private set; }

        /// <summary>
        /// Whether the form requires a user agreement
        /// </summary>
        /// <value>Whether the form requires a user agreement</value>
        [JsonPropertyName("userAgreement")]
        public bool? UserAgreement { get { return this.UserAgreementOption; } set { this.UserAgreementOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectRecordReport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SubjectRecordReportOption { get; private set; }

        /// <summary>
        /// Whether the form is marked as a subject record report
        /// </summary>
        /// <value>Whether the form is marked as a subject record report</value>
        [JsonPropertyName("subjectRecordReport")]
        public bool? SubjectRecordReport { get { return this.SubjectRecordReportOption; } set { this.SubjectRecordReportOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnscheduledVisit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UnscheduledVisitOption { get; private set; }

        /// <summary>
        /// Whether the form is included in unscheduled visits
        /// </summary>
        /// <value>Whether the form is included in unscheduled visits</value>
        [JsonPropertyName("unscheduledVisit")]
        public bool? UnscheduledVisit { get { return this.UnscheduledVisitOption; } set { this.UnscheduledVisitOption = new(value); } }

        /// <summary>
        /// Used to track the state of OtherForms
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OtherFormsOption { get; private set; }

        /// <summary>
        /// Whether the form is included in Other Forms category
        /// </summary>
        /// <value>Whether the form is included in Other Forms category</value>
        [JsonPropertyName("otherForms")]
        public bool? OtherForms { get { return this.OtherFormsOption; } set { this.OtherFormsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EproForm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EproFormOption { get; private set; }

        /// <summary>
        /// Whether the form is an ePRO (electronic patient reported outcome) form
        /// </summary>
        /// <value>Whether the form is an ePRO (electronic patient reported outcome) form</value>
        [JsonPropertyName("eproForm")]
        public bool? EproForm { get { return this.EproFormOption; } set { this.EproFormOption = new(value); } }

        /// <summary>
        /// Used to track the state of AllowCopy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AllowCopyOption { get; private set; }

        /// <summary>
        /// Whether the form allows copying of data
        /// </summary>
        /// <value>Whether the form allows copying of data</value>
        [JsonPropertyName("allowCopy")]
        public bool? AllowCopy { get { return this.AllowCopyOption; } set { this.AllowCopyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Disabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DisabledOption { get; private set; }

        /// <summary>
        /// Whether the form is soft-deleted (disabled)
        /// </summary>
        /// <value>Whether the form is soft-deleted (disabled)</value>
        [JsonPropertyName("disabled")]
        public bool? Disabled { get { return this.DisabledOption; } set { this.DisabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this form was created
        /// </summary>
        /// <value>Date when this form was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this form was last modified
        /// </summary>
        /// <value>Date when this form was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Form {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("  FormType: ").Append(FormType).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  EmbeddedLog: ").Append(EmbeddedLog).Append("\n");
            sb.Append("  EnforceOwnership: ").Append(EnforceOwnership).Append("\n");
            sb.Append("  UserAgreement: ").Append(UserAgreement).Append("\n");
            sb.Append("  SubjectRecordReport: ").Append(SubjectRecordReport).Append("\n");
            sb.Append("  UnscheduledVisit: ").Append(UnscheduledVisit).Append("\n");
            sb.Append("  OtherForms: ").Append(OtherForms).Append("\n");
            sb.Append("  EproForm: ").Append(EproForm).Append("\n");
            sb.Append("  AllowCopy: ").Append(AllowCopy).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Form" />
    /// </summary>
    public class FormJsonConverter : JsonConverter<Form>
    {
        /// <summary>
        /// Deserializes json to <see cref="Form" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Form Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> formId = default;
            Option<string?> formKey = default;
            Option<string?> formName = default;
            Option<string?> formType = default;
            Option<int?> revision = default;
            Option<bool?> embeddedLog = default;
            Option<bool?> enforceOwnership = default;
            Option<bool?> userAgreement = default;
            Option<bool?> subjectRecordReport = default;
            Option<bool?> unscheduledVisit = default;
            Option<bool?> otherForms = default;
            Option<bool?> eproForm = default;
            Option<bool?> allowCopy = default;
            Option<bool?> disabled = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formName":
                            formName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formType":
                            formType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "revision":
                            revision = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "embeddedLog":
                            embeddedLog = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enforceOwnership":
                            enforceOwnership = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "userAgreement":
                            userAgreement = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subjectRecordReport":
                            subjectRecordReport = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "unscheduledVisit":
                            unscheduledVisit = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "otherForms":
                            otherForms = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "eproForm":
                            eproForm = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "allowCopy":
                            allowCopy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "disabled":
                            disabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Form.");

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class Form.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class Form.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class Form.");

            if (formType.IsSet && formType.Value == null)
                throw new ArgumentNullException(nameof(formType), "Property is not nullable for class Form.");

            if (revision.IsSet && revision.Value == null)
                throw new ArgumentNullException(nameof(revision), "Property is not nullable for class Form.");

            if (embeddedLog.IsSet && embeddedLog.Value == null)
                throw new ArgumentNullException(nameof(embeddedLog), "Property is not nullable for class Form.");

            if (enforceOwnership.IsSet && enforceOwnership.Value == null)
                throw new ArgumentNullException(nameof(enforceOwnership), "Property is not nullable for class Form.");

            if (userAgreement.IsSet && userAgreement.Value == null)
                throw new ArgumentNullException(nameof(userAgreement), "Property is not nullable for class Form.");

            if (subjectRecordReport.IsSet && subjectRecordReport.Value == null)
                throw new ArgumentNullException(nameof(subjectRecordReport), "Property is not nullable for class Form.");

            if (unscheduledVisit.IsSet && unscheduledVisit.Value == null)
                throw new ArgumentNullException(nameof(unscheduledVisit), "Property is not nullable for class Form.");

            if (otherForms.IsSet && otherForms.Value == null)
                throw new ArgumentNullException(nameof(otherForms), "Property is not nullable for class Form.");

            if (eproForm.IsSet && eproForm.Value == null)
                throw new ArgumentNullException(nameof(eproForm), "Property is not nullable for class Form.");

            if (allowCopy.IsSet && allowCopy.Value == null)
                throw new ArgumentNullException(nameof(allowCopy), "Property is not nullable for class Form.");

            if (disabled.IsSet && disabled.Value == null)
                throw new ArgumentNullException(nameof(disabled), "Property is not nullable for class Form.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Form.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Form.");

            return new Form(studyKey, formId, formKey, formName, formType, revision, embeddedLog, enforceOwnership, userAgreement, subjectRecordReport, unscheduledVisit, otherForms, eproForm, allowCopy, disabled, dateCreated, dateModified);
        }

        /// <summary>
        /// Serializes a <see cref="Form" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="form"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Form form, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, form, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Form" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="form"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Form form, JsonSerializerOptions jsonSerializerOptions)
        {
            if (form.StudyKeyOption.IsSet && form.StudyKey == null)
                throw new ArgumentNullException(nameof(form.StudyKey), "Property is required for class Form.");

            if (form.FormKeyOption.IsSet && form.FormKey == null)
                throw new ArgumentNullException(nameof(form.FormKey), "Property is required for class Form.");

            if (form.FormNameOption.IsSet && form.FormName == null)
                throw new ArgumentNullException(nameof(form.FormName), "Property is required for class Form.");

            if (form.FormTypeOption.IsSet && form.FormType == null)
                throw new ArgumentNullException(nameof(form.FormType), "Property is required for class Form.");

            if (form.DateCreatedOption.IsSet && form.DateCreated == null)
                throw new ArgumentNullException(nameof(form.DateCreated), "Property is required for class Form.");

            if (form.DateModifiedOption.IsSet && form.DateModified == null)
                throw new ArgumentNullException(nameof(form.DateModified), "Property is required for class Form.");

            if (form.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", form.StudyKey);

            if (form.FormIdOption.IsSet)
                writer.WriteNumber("formId", form.FormIdOption.Value!.Value);

            if (form.FormKeyOption.IsSet)
                writer.WriteString("formKey", form.FormKey);

            if (form.FormNameOption.IsSet)
                writer.WriteString("formName", form.FormName);

            if (form.FormTypeOption.IsSet)
                writer.WriteString("formType", form.FormType);

            if (form.RevisionOption.IsSet)
                writer.WriteNumber("revision", form.RevisionOption.Value!.Value);

            if (form.EmbeddedLogOption.IsSet)
                writer.WriteBoolean("embeddedLog", form.EmbeddedLogOption.Value!.Value);

            if (form.EnforceOwnershipOption.IsSet)
                writer.WriteBoolean("enforceOwnership", form.EnforceOwnershipOption.Value!.Value);

            if (form.UserAgreementOption.IsSet)
                writer.WriteBoolean("userAgreement", form.UserAgreementOption.Value!.Value);

            if (form.SubjectRecordReportOption.IsSet)
                writer.WriteBoolean("subjectRecordReport", form.SubjectRecordReportOption.Value!.Value);

            if (form.UnscheduledVisitOption.IsSet)
                writer.WriteBoolean("unscheduledVisit", form.UnscheduledVisitOption.Value!.Value);

            if (form.OtherFormsOption.IsSet)
                writer.WriteBoolean("otherForms", form.OtherFormsOption.Value!.Value);

            if (form.EproFormOption.IsSet)
                writer.WriteBoolean("eproForm", form.EproFormOption.Value!.Value);

            if (form.AllowCopyOption.IsSet)
                writer.WriteBoolean("allowCopy", form.AllowCopyOption.Value!.Value);

            if (form.DisabledOption.IsSet)
                writer.WriteBoolean("disabled", form.DisabledOption.Value!.Value);

            if (form.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", form.DateCreated);

            if (form.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", form.DateModified);
        }
    }
}
