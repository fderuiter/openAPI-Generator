// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Role
    /// </summary>
    public partial class Role : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Role" /> class.
        /// </summary>
        /// <param name="dateCreated">Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])</param>
        /// <param name="dateModified">Timestamp when the role assignment was last modified</param>
        /// <param name="roleId">Unique role ID (UUID)</param>
        /// <param name="communityId">Community ID or level associated with the role</param>
        /// <param name="name">Name of the role</param>
        /// <param name="description">Description of the role</param>
        /// <param name="level">Role level or hierarchy</param>
        /// <param name="type">Role type/category</param>
        /// <param name="inactive">Whether the role is inactive</param>
        [JsonConstructor]
        public Role(Option<List<int>?> dateCreated = default, Option<List<int>?> dateModified = default, Option<string?> roleId = default, Option<int?> communityId = default, Option<string?> name = default, Option<string?> description = default, Option<int?> level = default, Option<string?> type = default, Option<bool?> inactive = default)
        {
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            RoleIdOption = roleId;
            CommunityIdOption = communityId;
            NameOption = name;
            DescriptionOption = description;
            LevelOption = level;
            TypeOption = type;
            InactiveOption = inactive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
        /// </summary>
        /// <value>Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])</value>
        [JsonPropertyName("dateCreated")]
        public List<int>? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Timestamp when the role assignment was last modified
        /// </summary>
        /// <value>Timestamp when the role assignment was last modified</value>
        [JsonPropertyName("dateModified")]
        public List<int>? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of RoleId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleIdOption { get; private set; }

        /// <summary>
        /// Unique role ID (UUID)
        /// </summary>
        /// <value>Unique role ID (UUID)</value>
        [JsonPropertyName("roleId")]
        public string? RoleId { get { return this.RoleIdOption; } set { this.RoleIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommunityId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CommunityIdOption { get; private set; }

        /// <summary>
        /// Community ID or level associated with the role
        /// </summary>
        /// <value>Community ID or level associated with the role</value>
        [JsonPropertyName("communityId")]
        public int? CommunityId { get { return this.CommunityIdOption; } set { this.CommunityIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Name of the role
        /// </summary>
        /// <value>Name of the role</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the role
        /// </summary>
        /// <value>Description of the role</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LevelOption { get; private set; }

        /// <summary>
        /// Role level or hierarchy
        /// </summary>
        /// <value>Role level or hierarchy</value>
        [JsonPropertyName("level")]
        public int? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Role type/category
        /// </summary>
        /// <value>Role type/category</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Inactive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InactiveOption { get; private set; }

        /// <summary>
        /// Whether the role is inactive
        /// </summary>
        /// <value>Whether the role is inactive</value>
        [JsonPropertyName("inactive")]
        public bool? Inactive { get { return this.InactiveOption; } set { this.InactiveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Role {\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  CommunityId: ").Append(CommunityId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Inactive: ").Append(Inactive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Role" />
    /// </summary>
    public class RoleJsonConverter : JsonConverter<Role>
    {
        /// <summary>
        /// Deserializes json to <see cref="Role" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Role Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<int>?> dateCreated = default;
            Option<List<int>?> dateModified = default;
            Option<string?> roleId = default;
            Option<int?> communityId = default;
            Option<string?> name = default;
            Option<string?> description = default;
            Option<int?> level = default;
            Option<string?> type = default;
            Option<bool?> inactive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dateCreated":
                            dateCreated = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dateModified":
                            dateModified = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "roleId":
                            roleId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "communityId":
                            communityId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "level":
                            level = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inactive":
                            inactive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Role.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Role.");

            if (roleId.IsSet && roleId.Value == null)
                throw new ArgumentNullException(nameof(roleId), "Property is not nullable for class Role.");

            if (communityId.IsSet && communityId.Value == null)
                throw new ArgumentNullException(nameof(communityId), "Property is not nullable for class Role.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Role.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Role.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class Role.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Role.");

            if (inactive.IsSet && inactive.Value == null)
                throw new ArgumentNullException(nameof(inactive), "Property is not nullable for class Role.");

            return new Role(dateCreated, dateModified, roleId, communityId, name, description, level, type, inactive);
        }

        /// <summary>
        /// Serializes a <see cref="Role" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="role"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Role role, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, role, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Role" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="role"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Role role, JsonSerializerOptions jsonSerializerOptions)
        {
            if (role.DateCreatedOption.IsSet && role.DateCreated == null)
                throw new ArgumentNullException(nameof(role.DateCreated), "Property is required for class Role.");

            if (role.DateModifiedOption.IsSet && role.DateModified == null)
                throw new ArgumentNullException(nameof(role.DateModified), "Property is required for class Role.");

            if (role.RoleIdOption.IsSet && role.RoleId == null)
                throw new ArgumentNullException(nameof(role.RoleId), "Property is required for class Role.");

            if (role.NameOption.IsSet && role.Name == null)
                throw new ArgumentNullException(nameof(role.Name), "Property is required for class Role.");

            if (role.DescriptionOption.IsSet && role.Description == null)
                throw new ArgumentNullException(nameof(role.Description), "Property is required for class Role.");

            if (role.TypeOption.IsSet && role.Type == null)
                throw new ArgumentNullException(nameof(role.Type), "Property is required for class Role.");

            if (role.DateCreatedOption.IsSet)
            {
                writer.WritePropertyName("dateCreated");
                JsonSerializer.Serialize(writer, role.DateCreated, jsonSerializerOptions);
            }
            if (role.DateModifiedOption.IsSet)
            {
                writer.WritePropertyName("dateModified");
                JsonSerializer.Serialize(writer, role.DateModified, jsonSerializerOptions);
            }
            if (role.RoleIdOption.IsSet)
                writer.WriteString("roleId", role.RoleId);

            if (role.CommunityIdOption.IsSet)
                writer.WriteNumber("communityId", role.CommunityIdOption.Value!.Value);

            if (role.NameOption.IsSet)
                writer.WriteString("name", role.Name);

            if (role.DescriptionOption.IsSet)
                writer.WriteString("description", role.Description);

            if (role.LevelOption.IsSet)
                writer.WriteNumber("level", role.LevelOption.Value!.Value);

            if (role.TypeOption.IsSet)
                writer.WriteString("type", role.Type);

            if (role.InactiveOption.IsSet)
                writer.WriteBoolean("inactive", role.InactiveOption.Value!.Value);
        }
    }
}
