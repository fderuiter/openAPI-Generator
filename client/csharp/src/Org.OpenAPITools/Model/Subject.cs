// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Subject
    /// </summary>
    public partial class Subject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subject" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="subjectId">Mednet subject ID (internal numeric ID)</param>
        /// <param name="subjectOid">Client-assigned subject object identifier (OID)</param>
        /// <param name="subjectKey">Protocol-assigned subject identifier (display ID)</param>
        /// <param name="subjectStatus">Current status of the subject (e.g., Enrolled)</param>
        /// <param name="siteId">Mednet site ID the subject is associated with</param>
        /// <param name="siteName">Name of the site the subject is associated with</param>
        /// <param name="deleted">Whether the subject is marked as deleted</param>
        /// <param name="enrollmentStartDate">Subject’s enrollment start date</param>
        /// <param name="dateCreated">Date when this subject record was created</param>
        /// <param name="dateModified">Date when this subject record was last modified</param>
        /// <param name="keywords">List of keywords associated with the subject</param>
        [JsonConstructor]
        public Subject(Option<string?> studyKey = default, Option<int?> subjectId = default, Option<string?> subjectOid = default, Option<string?> subjectKey = default, Option<string?> subjectStatus = default, Option<int?> siteId = default, Option<string?> siteName = default, Option<bool?> deleted = default, Option<string?> enrollmentStartDate = default, Option<string?> dateCreated = default, Option<string?> dateModified = default, Option<List<Keyword>?> keywords = default)
        {
            StudyKeyOption = studyKey;
            SubjectIdOption = subjectId;
            SubjectOidOption = subjectOid;
            SubjectKeyOption = subjectKey;
            SubjectStatusOption = subjectStatus;
            SiteIdOption = siteId;
            SiteNameOption = siteName;
            DeletedOption = deleted;
            EnrollmentStartDateOption = enrollmentStartDate;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            KeywordsOption = keywords;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Mednet subject ID (internal numeric ID)
        /// </summary>
        /// <value>Mednet subject ID (internal numeric ID)</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOidOption { get; private set; }

        /// <summary>
        /// Client-assigned subject object identifier (OID)
        /// </summary>
        /// <value>Client-assigned subject object identifier (OID)</value>
        [JsonPropertyName("subjectOid")]
        public string? SubjectOid { get { return this.SubjectOidOption; } set { this.SubjectOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Protocol-assigned subject identifier (display ID)
        /// </summary>
        /// <value>Protocol-assigned subject identifier (display ID)</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectStatus
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectStatusOption { get; private set; }

        /// <summary>
        /// Current status of the subject (e.g., Enrolled)
        /// </summary>
        /// <value>Current status of the subject (e.g., Enrolled)</value>
        [JsonPropertyName("subjectStatus")]
        public string? SubjectStatus { get { return this.SubjectStatusOption; } set { this.SubjectStatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SiteIdOption { get; private set; }

        /// <summary>
        /// Mednet site ID the subject is associated with
        /// </summary>
        /// <value>Mednet site ID the subject is associated with</value>
        [JsonPropertyName("siteId")]
        public int? SiteId { get { return this.SiteIdOption; } set { this.SiteIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiteName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SiteNameOption { get; private set; }

        /// <summary>
        /// Name of the site the subject is associated with
        /// </summary>
        /// <value>Name of the site the subject is associated with</value>
        [JsonPropertyName("siteName")]
        public string? SiteName { get { return this.SiteNameOption; } set { this.SiteNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Deleted
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedOption { get; private set; }

        /// <summary>
        /// Whether the subject is marked as deleted
        /// </summary>
        /// <value>Whether the subject is marked as deleted</value>
        [JsonPropertyName("deleted")]
        public bool? Deleted { get { return this.DeletedOption; } set { this.DeletedOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnrollmentStartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnrollmentStartDateOption { get; private set; }

        /// <summary>
        /// Subject’s enrollment start date
        /// </summary>
        /// <value>Subject’s enrollment start date</value>
        [JsonPropertyName("enrollmentStartDate")]
        public string? EnrollmentStartDate { get { return this.EnrollmentStartDateOption; } set { this.EnrollmentStartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when this subject record was created
        /// </summary>
        /// <value>Date when this subject record was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when this subject record was last modified
        /// </summary>
        /// <value>Date when this subject record was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Keywords
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Keyword>?> KeywordsOption { get; private set; }

        /// <summary>
        /// List of keywords associated with the subject
        /// </summary>
        /// <value>List of keywords associated with the subject</value>
        [JsonPropertyName("keywords")]
        public List<Keyword>? Keywords { get { return this.KeywordsOption; } set { this.KeywordsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subject {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectOid: ").Append(SubjectOid).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  SubjectStatus: ").Append(SubjectStatus).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  EnrollmentStartDate: ").Append(EnrollmentStartDate).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Subject" />
    /// </summary>
    public class SubjectJsonConverter : JsonConverter<Subject>
    {
        /// <summary>
        /// Deserializes json to <see cref="Subject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Subject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> subjectId = default;
            Option<string?> subjectOid = default;
            Option<string?> subjectKey = default;
            Option<string?> subjectStatus = default;
            Option<int?> siteId = default;
            Option<string?> siteName = default;
            Option<bool?> deleted = default;
            Option<string?> enrollmentStartDate = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;
            Option<List<Keyword>?> keywords = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectOid":
                            subjectOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectStatus":
                            subjectStatus = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "siteId":
                            siteId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "siteName":
                            siteName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deleted":
                            deleted = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enrollmentStartDate":
                            enrollmentStartDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "keywords":
                            keywords = new Option<List<Keyword>?>(JsonSerializer.Deserialize<List<Keyword>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Subject.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class Subject.");

            if (subjectOid.IsSet && subjectOid.Value == null)
                throw new ArgumentNullException(nameof(subjectOid), "Property is not nullable for class Subject.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class Subject.");

            if (subjectStatus.IsSet && subjectStatus.Value == null)
                throw new ArgumentNullException(nameof(subjectStatus), "Property is not nullable for class Subject.");

            if (siteId.IsSet && siteId.Value == null)
                throw new ArgumentNullException(nameof(siteId), "Property is not nullable for class Subject.");

            if (siteName.IsSet && siteName.Value == null)
                throw new ArgumentNullException(nameof(siteName), "Property is not nullable for class Subject.");

            if (deleted.IsSet && deleted.Value == null)
                throw new ArgumentNullException(nameof(deleted), "Property is not nullable for class Subject.");

            if (enrollmentStartDate.IsSet && enrollmentStartDate.Value == null)
                throw new ArgumentNullException(nameof(enrollmentStartDate), "Property is not nullable for class Subject.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Subject.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Subject.");

            if (keywords.IsSet && keywords.Value == null)
                throw new ArgumentNullException(nameof(keywords), "Property is not nullable for class Subject.");

            return new Subject(studyKey, subjectId, subjectOid, subjectKey, subjectStatus, siteId, siteName, deleted, enrollmentStartDate, dateCreated, dateModified, keywords);
        }

        /// <summary>
        /// Serializes a <see cref="Subject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Subject subject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Subject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Subject subject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subject.StudyKeyOption.IsSet && subject.StudyKey == null)
                throw new ArgumentNullException(nameof(subject.StudyKey), "Property is required for class Subject.");

            if (subject.SubjectOidOption.IsSet && subject.SubjectOid == null)
                throw new ArgumentNullException(nameof(subject.SubjectOid), "Property is required for class Subject.");

            if (subject.SubjectKeyOption.IsSet && subject.SubjectKey == null)
                throw new ArgumentNullException(nameof(subject.SubjectKey), "Property is required for class Subject.");

            if (subject.SubjectStatusOption.IsSet && subject.SubjectStatus == null)
                throw new ArgumentNullException(nameof(subject.SubjectStatus), "Property is required for class Subject.");

            if (subject.SiteNameOption.IsSet && subject.SiteName == null)
                throw new ArgumentNullException(nameof(subject.SiteName), "Property is required for class Subject.");

            if (subject.EnrollmentStartDateOption.IsSet && subject.EnrollmentStartDate == null)
                throw new ArgumentNullException(nameof(subject.EnrollmentStartDate), "Property is required for class Subject.");

            if (subject.DateCreatedOption.IsSet && subject.DateCreated == null)
                throw new ArgumentNullException(nameof(subject.DateCreated), "Property is required for class Subject.");

            if (subject.DateModifiedOption.IsSet && subject.DateModified == null)
                throw new ArgumentNullException(nameof(subject.DateModified), "Property is required for class Subject.");

            if (subject.KeywordsOption.IsSet && subject.Keywords == null)
                throw new ArgumentNullException(nameof(subject.Keywords), "Property is required for class Subject.");

            if (subject.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", subject.StudyKey);

            if (subject.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", subject.SubjectIdOption.Value!.Value);

            if (subject.SubjectOidOption.IsSet)
                writer.WriteString("subjectOid", subject.SubjectOid);

            if (subject.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", subject.SubjectKey);

            if (subject.SubjectStatusOption.IsSet)
                writer.WriteString("subjectStatus", subject.SubjectStatus);

            if (subject.SiteIdOption.IsSet)
                writer.WriteNumber("siteId", subject.SiteIdOption.Value!.Value);

            if (subject.SiteNameOption.IsSet)
                writer.WriteString("siteName", subject.SiteName);

            if (subject.DeletedOption.IsSet)
                writer.WriteBoolean("deleted", subject.DeletedOption.Value!.Value);

            if (subject.EnrollmentStartDateOption.IsSet)
                writer.WriteString("enrollmentStartDate", subject.EnrollmentStartDate);

            if (subject.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", subject.DateCreated);

            if (subject.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", subject.DateModified);

            if (subject.KeywordsOption.IsSet)
            {
                writer.WritePropertyName("keywords");
                JsonSerializer.Serialize(writer, subject.Keywords, jsonSerializerOptions);
            }
        }
    }
}
