// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Query
    /// </summary>
    public partial class Query : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="subjectId">Mednet subject ID associated with the query (if applicable)</param>
        /// <param name="subjectOid">Client-assigned subject OID (if applicable)</param>
        /// <param name="annotationType">Category/type of the query (e.g., subject, record, question)</param>
        /// <param name="annotationId">Unique system identifier for the query</param>
        /// <param name="type">System text identifier for the query type/location (subject, record, question)</param>
        /// <param name="description">Description of the query (e.g., reason or context)</param>
        /// <param name="recordId">Record ID associated with the query (if applicable)</param>
        /// <param name="variable">Variable name (field) associated with the query (if applicable)</param>
        /// <param name="subjectKey">Subject display ID associated with the query (if applicable)</param>
        /// <param name="dateCreated">Date when the query was created</param>
        /// <param name="dateModified">Date when the query was last modified</param>
        /// <param name="queryComments">History of comments/actions on the query</param>
        [JsonConstructor]
        public Query(Option<string?> studyKey = default, Option<int?> subjectId = default, Option<string?> subjectOid = default, Option<string?> annotationType = default, Option<int?> annotationId = default, Option<string?> type = default, Option<string?> description = default, Option<int?> recordId = default, Option<string?> variable = default, Option<string?> subjectKey = default, Option<string?> dateCreated = default, Option<string?> dateModified = default, Option<List<QueryComment>?> queryComments = default)
        {
            StudyKeyOption = studyKey;
            SubjectIdOption = subjectId;
            SubjectOidOption = subjectOid;
            AnnotationTypeOption = annotationType;
            AnnotationIdOption = annotationId;
            TypeOption = type;
            DescriptionOption = description;
            RecordIdOption = recordId;
            VariableOption = variable;
            SubjectKeyOption = subjectKey;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            QueryCommentsOption = queryComments;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SubjectIdOption { get; private set; }

        /// <summary>
        /// Mednet subject ID associated with the query (if applicable)
        /// </summary>
        /// <value>Mednet subject ID associated with the query (if applicable)</value>
        [JsonPropertyName("subjectId")]
        public int? SubjectId { get { return this.SubjectIdOption; } set { this.SubjectIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectOid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOidOption { get; private set; }

        /// <summary>
        /// Client-assigned subject OID (if applicable)
        /// </summary>
        /// <value>Client-assigned subject OID (if applicable)</value>
        [JsonPropertyName("subjectOid")]
        public string? SubjectOid { get { return this.SubjectOidOption; } set { this.SubjectOidOption = new(value); } }

        /// <summary>
        /// Used to track the state of AnnotationType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AnnotationTypeOption { get; private set; }

        /// <summary>
        /// Category/type of the query (e.g., subject, record, question)
        /// </summary>
        /// <value>Category/type of the query (e.g., subject, record, question)</value>
        [JsonPropertyName("annotationType")]
        public string? AnnotationType { get { return this.AnnotationTypeOption; } set { this.AnnotationTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AnnotationId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AnnotationIdOption { get; private set; }

        /// <summary>
        /// Unique system identifier for the query
        /// </summary>
        /// <value>Unique system identifier for the query</value>
        [JsonPropertyName("annotationId")]
        public int? AnnotationId { get { return this.AnnotationIdOption; } set { this.AnnotationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// System text identifier for the query type/location (subject, record, question)
        /// </summary>
        /// <value>System text identifier for the query type/location (subject, record, question)</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Description of the query (e.g., reason or context)
        /// </summary>
        /// <value>Description of the query (e.g., reason or context)</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of RecordId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RecordIdOption { get; private set; }

        /// <summary>
        /// Record ID associated with the query (if applicable)
        /// </summary>
        /// <value>Record ID associated with the query (if applicable)</value>
        [JsonPropertyName("recordId")]
        public int? RecordId { get { return this.RecordIdOption; } set { this.RecordIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Variable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VariableOption { get; private set; }

        /// <summary>
        /// Variable name (field) associated with the query (if applicable)
        /// </summary>
        /// <value>Variable name (field) associated with the query (if applicable)</value>
        [JsonPropertyName("variable")]
        public string? Variable { get { return this.VariableOption; } set { this.VariableOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubjectKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectKeyOption { get; private set; }

        /// <summary>
        /// Subject display ID associated with the query (if applicable)
        /// </summary>
        /// <value>Subject display ID associated with the query (if applicable)</value>
        [JsonPropertyName("subjectKey")]
        public string? SubjectKey { get { return this.SubjectKeyOption; } set { this.SubjectKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when the query was created
        /// </summary>
        /// <value>Date when the query was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when the query was last modified
        /// </summary>
        /// <value>Date when the query was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryComments
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<QueryComment>?> QueryCommentsOption { get; private set; }

        /// <summary>
        /// History of comments/actions on the query
        /// </summary>
        /// <value>History of comments/actions on the query</value>
        [JsonPropertyName("queryComments")]
        public List<QueryComment>? QueryComments { get { return this.QueryCommentsOption; } set { this.QueryCommentsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SubjectOid: ").Append(SubjectOid).Append("\n");
            sb.Append("  AnnotationType: ").Append(AnnotationType).Append("\n");
            sb.Append("  AnnotationId: ").Append(AnnotationId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  SubjectKey: ").Append(SubjectKey).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  QueryComments: ").Append(QueryComments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Query" />
    /// </summary>
    public class QueryJsonConverter : JsonConverter<Query>
    {
        /// <summary>
        /// Deserializes json to <see cref="Query" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Query Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> studyKey = default;
            Option<int?> subjectId = default;
            Option<string?> subjectOid = default;
            Option<string?> annotationType = default;
            Option<int?> annotationId = default;
            Option<string?> type = default;
            Option<string?> description = default;
            Option<int?> recordId = default;
            Option<string?> variable = default;
            Option<string?> subjectKey = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;
            Option<List<QueryComment>?> queryComments = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectId":
                            subjectId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "subjectOid":
                            subjectOid = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "annotationType":
                            annotationType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "annotationId":
                            annotationId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recordId":
                            recordId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "variable":
                            variable = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subjectKey":
                            subjectKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "queryComments":
                            queryComments = new Option<List<QueryComment>?>(JsonSerializer.Deserialize<List<QueryComment>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Query.");

            if (subjectId.IsSet && subjectId.Value == null)
                throw new ArgumentNullException(nameof(subjectId), "Property is not nullable for class Query.");

            if (subjectOid.IsSet && subjectOid.Value == null)
                throw new ArgumentNullException(nameof(subjectOid), "Property is not nullable for class Query.");

            if (annotationType.IsSet && annotationType.Value == null)
                throw new ArgumentNullException(nameof(annotationType), "Property is not nullable for class Query.");

            if (annotationId.IsSet && annotationId.Value == null)
                throw new ArgumentNullException(nameof(annotationId), "Property is not nullable for class Query.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Query.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Query.");

            if (recordId.IsSet && recordId.Value == null)
                throw new ArgumentNullException(nameof(recordId), "Property is not nullable for class Query.");

            if (variable.IsSet && variable.Value == null)
                throw new ArgumentNullException(nameof(variable), "Property is not nullable for class Query.");

            if (subjectKey.IsSet && subjectKey.Value == null)
                throw new ArgumentNullException(nameof(subjectKey), "Property is not nullable for class Query.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Query.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Query.");

            if (queryComments.IsSet && queryComments.Value == null)
                throw new ArgumentNullException(nameof(queryComments), "Property is not nullable for class Query.");

            return new Query(studyKey, subjectId, subjectOid, annotationType, annotationId, type, description, recordId, variable, subjectKey, dateCreated, dateModified, queryComments);
        }

        /// <summary>
        /// Serializes a <see cref="Query" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="query"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Query query, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, query, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Query" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="query"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Query query, JsonSerializerOptions jsonSerializerOptions)
        {
            if (query.StudyKeyOption.IsSet && query.StudyKey == null)
                throw new ArgumentNullException(nameof(query.StudyKey), "Property is required for class Query.");

            if (query.SubjectOidOption.IsSet && query.SubjectOid == null)
                throw new ArgumentNullException(nameof(query.SubjectOid), "Property is required for class Query.");

            if (query.AnnotationTypeOption.IsSet && query.AnnotationType == null)
                throw new ArgumentNullException(nameof(query.AnnotationType), "Property is required for class Query.");

            if (query.TypeOption.IsSet && query.Type == null)
                throw new ArgumentNullException(nameof(query.Type), "Property is required for class Query.");

            if (query.DescriptionOption.IsSet && query.Description == null)
                throw new ArgumentNullException(nameof(query.Description), "Property is required for class Query.");

            if (query.VariableOption.IsSet && query.Variable == null)
                throw new ArgumentNullException(nameof(query.Variable), "Property is required for class Query.");

            if (query.SubjectKeyOption.IsSet && query.SubjectKey == null)
                throw new ArgumentNullException(nameof(query.SubjectKey), "Property is required for class Query.");

            if (query.DateCreatedOption.IsSet && query.DateCreated == null)
                throw new ArgumentNullException(nameof(query.DateCreated), "Property is required for class Query.");

            if (query.DateModifiedOption.IsSet && query.DateModified == null)
                throw new ArgumentNullException(nameof(query.DateModified), "Property is required for class Query.");

            if (query.QueryCommentsOption.IsSet && query.QueryComments == null)
                throw new ArgumentNullException(nameof(query.QueryComments), "Property is required for class Query.");

            if (query.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", query.StudyKey);

            if (query.SubjectIdOption.IsSet)
                writer.WriteNumber("subjectId", query.SubjectIdOption.Value!.Value);

            if (query.SubjectOidOption.IsSet)
                writer.WriteString("subjectOid", query.SubjectOid);

            if (query.AnnotationTypeOption.IsSet)
                writer.WriteString("annotationType", query.AnnotationType);

            if (query.AnnotationIdOption.IsSet)
                writer.WriteNumber("annotationId", query.AnnotationIdOption.Value!.Value);

            if (query.TypeOption.IsSet)
                writer.WriteString("type", query.Type);

            if (query.DescriptionOption.IsSet)
                writer.WriteString("description", query.Description);

            if (query.RecordIdOption.IsSet)
                writer.WriteNumber("recordId", query.RecordIdOption.Value!.Value);

            if (query.VariableOption.IsSet)
                writer.WriteString("variable", query.Variable);

            if (query.SubjectKeyOption.IsSet)
                writer.WriteString("subjectKey", query.SubjectKey);

            if (query.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", query.DateCreated);

            if (query.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", query.DateModified);

            if (query.QueryCommentsOption.IsSet)
            {
                writer.WritePropertyName("queryComments");
                JsonSerializer.Serialize(writer, query.QueryComments, jsonSerializerOptions);
            }
        }
    }
}
