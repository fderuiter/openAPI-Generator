// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Study
    /// </summary>
    public partial class Study : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Study" /> class.
        /// </summary>
        /// <param name="sponsorKey">Sponsor key that this study belongs to</param>
        /// <param name="studyKey">Unique study key</param>
        /// <param name="studyId">Mednet study ID (internal numeric identifier)</param>
        /// <param name="studyName">Name of the study</param>
        /// <param name="studyDescription">Description of the study</param>
        /// <param name="studyType">Type of study (e.g., STUDY)</param>
        /// <param name="dateCreated">Date when the study record was created</param>
        /// <param name="dateModified">Date when the study record was last modified</param>
        [JsonConstructor]
        public Study(Option<string?> sponsorKey = default, Option<string?> studyKey = default, Option<int?> studyId = default, Option<string?> studyName = default, Option<string?> studyDescription = default, Option<string?> studyType = default, Option<string?> dateCreated = default, Option<string?> dateModified = default)
        {
            SponsorKeyOption = sponsorKey;
            StudyKeyOption = studyKey;
            StudyIdOption = studyId;
            StudyNameOption = studyName;
            StudyDescriptionOption = studyDescription;
            StudyTypeOption = studyType;
            DateCreatedOption = dateCreated;
            DateModifiedOption = dateModified;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SponsorKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SponsorKeyOption { get; private set; }

        /// <summary>
        /// Sponsor key that this study belongs to
        /// </summary>
        /// <value>Sponsor key that this study belongs to</value>
        [JsonPropertyName("sponsorKey")]
        public string? SponsorKey { get { return this.SponsorKeyOption; } set { this.SponsorKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyKeyOption { get; private set; }

        /// <summary>
        /// Unique study key
        /// </summary>
        /// <value>Unique study key</value>
        [JsonPropertyName("studyKey")]
        public string? StudyKey { get { return this.StudyKeyOption; } set { this.StudyKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> StudyIdOption { get; private set; }

        /// <summary>
        /// Mednet study ID (internal numeric identifier)
        /// </summary>
        /// <value>Mednet study ID (internal numeric identifier)</value>
        [JsonPropertyName("studyId")]
        public int? StudyId { get { return this.StudyIdOption; } set { this.StudyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyNameOption { get; private set; }

        /// <summary>
        /// Name of the study
        /// </summary>
        /// <value>Name of the study</value>
        [JsonPropertyName("studyName")]
        public string? StudyName { get { return this.StudyNameOption; } set { this.StudyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyDescriptionOption { get; private set; }

        /// <summary>
        /// Description of the study
        /// </summary>
        /// <value>Description of the study</value>
        [JsonPropertyName("studyDescription")]
        public string? StudyDescription { get { return this.StudyDescriptionOption; } set { this.StudyDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of StudyType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StudyTypeOption { get; private set; }

        /// <summary>
        /// Type of study (e.g., STUDY)
        /// </summary>
        /// <value>Type of study (e.g., STUDY)</value>
        [JsonPropertyName("studyType")]
        public string? StudyType { get { return this.StudyTypeOption; } set { this.StudyTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateCreated
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateCreatedOption { get; private set; }

        /// <summary>
        /// Date when the study record was created
        /// </summary>
        /// <value>Date when the study record was created</value>
        [JsonPropertyName("dateCreated")]
        public string? DateCreated { get { return this.DateCreatedOption; } set { this.DateCreatedOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateModified
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateModifiedOption { get; private set; }

        /// <summary>
        /// Date when the study record was last modified
        /// </summary>
        /// <value>Date when the study record was last modified</value>
        [JsonPropertyName("dateModified")]
        public string? DateModified { get { return this.DateModifiedOption; } set { this.DateModifiedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Study {\n");
            sb.Append("  SponsorKey: ").Append(SponsorKey).Append("\n");
            sb.Append("  StudyKey: ").Append(StudyKey).Append("\n");
            sb.Append("  StudyId: ").Append(StudyId).Append("\n");
            sb.Append("  StudyName: ").Append(StudyName).Append("\n");
            sb.Append("  StudyDescription: ").Append(StudyDescription).Append("\n");
            sb.Append("  StudyType: ").Append(StudyType).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Study" />
    /// </summary>
    public class StudyJsonConverter : JsonConverter<Study>
    {
        /// <summary>
        /// Deserializes json to <see cref="Study" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Study Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> sponsorKey = default;
            Option<string?> studyKey = default;
            Option<int?> studyId = default;
            Option<string?> studyName = default;
            Option<string?> studyDescription = default;
            Option<string?> studyType = default;
            Option<string?> dateCreated = default;
            Option<string?> dateModified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sponsorKey":
                            sponsorKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studyKey":
                            studyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studyId":
                            studyId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "studyName":
                            studyName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studyDescription":
                            studyDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "studyType":
                            studyType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateCreated":
                            dateCreated = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dateModified":
                            dateModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (sponsorKey.IsSet && sponsorKey.Value == null)
                throw new ArgumentNullException(nameof(sponsorKey), "Property is not nullable for class Study.");

            if (studyKey.IsSet && studyKey.Value == null)
                throw new ArgumentNullException(nameof(studyKey), "Property is not nullable for class Study.");

            if (studyId.IsSet && studyId.Value == null)
                throw new ArgumentNullException(nameof(studyId), "Property is not nullable for class Study.");

            if (studyName.IsSet && studyName.Value == null)
                throw new ArgumentNullException(nameof(studyName), "Property is not nullable for class Study.");

            if (studyDescription.IsSet && studyDescription.Value == null)
                throw new ArgumentNullException(nameof(studyDescription), "Property is not nullable for class Study.");

            if (studyType.IsSet && studyType.Value == null)
                throw new ArgumentNullException(nameof(studyType), "Property is not nullable for class Study.");

            if (dateCreated.IsSet && dateCreated.Value == null)
                throw new ArgumentNullException(nameof(dateCreated), "Property is not nullable for class Study.");

            if (dateModified.IsSet && dateModified.Value == null)
                throw new ArgumentNullException(nameof(dateModified), "Property is not nullable for class Study.");

            return new Study(sponsorKey, studyKey, studyId, studyName, studyDescription, studyType, dateCreated, dateModified);
        }

        /// <summary>
        /// Serializes a <see cref="Study" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="study"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Study study, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, study, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Study" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="study"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Study study, JsonSerializerOptions jsonSerializerOptions)
        {
            if (study.SponsorKeyOption.IsSet && study.SponsorKey == null)
                throw new ArgumentNullException(nameof(study.SponsorKey), "Property is required for class Study.");

            if (study.StudyKeyOption.IsSet && study.StudyKey == null)
                throw new ArgumentNullException(nameof(study.StudyKey), "Property is required for class Study.");

            if (study.StudyNameOption.IsSet && study.StudyName == null)
                throw new ArgumentNullException(nameof(study.StudyName), "Property is required for class Study.");

            if (study.StudyDescriptionOption.IsSet && study.StudyDescription == null)
                throw new ArgumentNullException(nameof(study.StudyDescription), "Property is required for class Study.");

            if (study.StudyTypeOption.IsSet && study.StudyType == null)
                throw new ArgumentNullException(nameof(study.StudyType), "Property is required for class Study.");

            if (study.DateCreatedOption.IsSet && study.DateCreated == null)
                throw new ArgumentNullException(nameof(study.DateCreated), "Property is required for class Study.");

            if (study.DateModifiedOption.IsSet && study.DateModified == null)
                throw new ArgumentNullException(nameof(study.DateModified), "Property is required for class Study.");

            if (study.SponsorKeyOption.IsSet)
                writer.WriteString("sponsorKey", study.SponsorKey);

            if (study.StudyKeyOption.IsSet)
                writer.WriteString("studyKey", study.StudyKey);

            if (study.StudyIdOption.IsSet)
                writer.WriteNumber("studyId", study.StudyIdOption.Value!.Value);

            if (study.StudyNameOption.IsSet)
                writer.WriteString("studyName", study.StudyName);

            if (study.StudyDescriptionOption.IsSet)
                writer.WriteString("studyDescription", study.StudyDescription);

            if (study.StudyTypeOption.IsSet)
                writer.WriteString("studyType", study.StudyType);

            if (study.DateCreatedOption.IsSet)
                writer.WriteString("dateCreated", study.DateCreated);

            if (study.DateModifiedOption.IsSet)
                writer.WriteString("dateModified", study.DateModified);
        }
    }
}
