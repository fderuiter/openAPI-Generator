// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComponentsSchemasIntervalFormsItem
    /// </summary>
    public partial class ComponentsSchemasIntervalFormsItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsSchemasIntervalFormsItem" /> class.
        /// </summary>
        /// <param name="formId">Form ID scheduled in the interval</param>
        /// <param name="formKey">Form key scheduled in the interval</param>
        /// <param name="formName">Form name scheduled in the interval</param>
        [JsonConstructor]
        public ComponentsSchemasIntervalFormsItem(Option<int?> formId = default, Option<string?> formKey = default, Option<string?> formName = default)
        {
            FormIdOption = formId;
            FormKeyOption = formKey;
            FormNameOption = formName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FormId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FormIdOption { get; private set; }

        /// <summary>
        /// Form ID scheduled in the interval
        /// </summary>
        /// <value>Form ID scheduled in the interval</value>
        [JsonPropertyName("formId")]
        public int? FormId { get { return this.FormIdOption; } set { this.FormIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormKeyOption { get; private set; }

        /// <summary>
        /// Form key scheduled in the interval
        /// </summary>
        /// <value>Form key scheduled in the interval</value>
        [JsonPropertyName("formKey")]
        public string? FormKey { get { return this.FormKeyOption; } set { this.FormKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormNameOption { get; private set; }

        /// <summary>
        /// Form name scheduled in the interval
        /// </summary>
        /// <value>Form name scheduled in the interval</value>
        [JsonPropertyName("formName")]
        public string? FormName { get { return this.FormNameOption; } set { this.FormNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComponentsSchemasIntervalFormsItem {\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  FormKey: ").Append(FormKey).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComponentsSchemasIntervalFormsItem" />
    /// </summary>
    public class ComponentsSchemasIntervalFormsItemJsonConverter : JsonConverter<ComponentsSchemasIntervalFormsItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ComponentsSchemasIntervalFormsItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ComponentsSchemasIntervalFormsItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> formId = default;
            Option<string?> formKey = default;
            Option<string?> formName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "formId":
                            formId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "formKey":
                            formKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formName":
                            formName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (formId.IsSet && formId.Value == null)
                throw new ArgumentNullException(nameof(formId), "Property is not nullable for class ComponentsSchemasIntervalFormsItem.");

            if (formKey.IsSet && formKey.Value == null)
                throw new ArgumentNullException(nameof(formKey), "Property is not nullable for class ComponentsSchemasIntervalFormsItem.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class ComponentsSchemasIntervalFormsItem.");

            return new ComponentsSchemasIntervalFormsItem(formId, formKey, formName);
        }

        /// <summary>
        /// Serializes a <see cref="ComponentsSchemasIntervalFormsItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="componentsSchemasIntervalFormsItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ComponentsSchemasIntervalFormsItem componentsSchemasIntervalFormsItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, componentsSchemasIntervalFormsItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ComponentsSchemasIntervalFormsItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="componentsSchemasIntervalFormsItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ComponentsSchemasIntervalFormsItem componentsSchemasIntervalFormsItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (componentsSchemasIntervalFormsItem.FormKeyOption.IsSet && componentsSchemasIntervalFormsItem.FormKey == null)
                throw new ArgumentNullException(nameof(componentsSchemasIntervalFormsItem.FormKey), "Property is required for class ComponentsSchemasIntervalFormsItem.");

            if (componentsSchemasIntervalFormsItem.FormNameOption.IsSet && componentsSchemasIntervalFormsItem.FormName == null)
                throw new ArgumentNullException(nameof(componentsSchemasIntervalFormsItem.FormName), "Property is required for class ComponentsSchemasIntervalFormsItem.");

            if (componentsSchemasIntervalFormsItem.FormIdOption.IsSet)
                writer.WriteNumber("formId", componentsSchemasIntervalFormsItem.FormIdOption.Value!.Value);

            if (componentsSchemasIntervalFormsItem.FormKeyOption.IsSet)
                writer.WriteString("formKey", componentsSchemasIntervalFormsItem.FormKey);

            if (componentsSchemasIntervalFormsItem.FormNameOption.IsSet)
                writer.WriteString("formName", componentsSchemasIntervalFormsItem.FormName);
        }
    }
}
