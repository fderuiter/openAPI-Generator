// <auto-generated>
/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Sort
    /// </summary>
    public partial class Sort : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sort" /> class.
        /// </summary>
        /// <param name="property">Name of the property by which the result is sorted</param>
        /// <param name="direction">Sort direction (ASC or DESC)</param>
        [JsonConstructor]
        public Sort(Option<string?> property = default, Option<DirectionEnum?> direction = default)
        {
            PropertyOption = property;
            DirectionOption = direction;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Sort direction (ASC or DESC)
        /// </summary>
        /// <value>Sort direction (ASC or DESC)</value>
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static DirectionEnum DirectionEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return DirectionEnum.ASC;

            if (value.Equals("DESC"))
                return DirectionEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type DirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="DirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DirectionEnum? DirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return DirectionEnum.ASC;

            if (value.Equals("DESC"))
                return DirectionEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string DirectionEnumToJsonValue(DirectionEnum? value)
        {
            if (value == DirectionEnum.ASC)
                return "ASC";

            if (value == DirectionEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Direction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DirectionEnum?> DirectionOption { get; private set; }

        /// <summary>
        /// Sort direction (ASC or DESC)
        /// </summary>
        /// <value>Sort direction (ASC or DESC)</value>
        [JsonPropertyName("direction")]
        public DirectionEnum? Direction { get { return this.DirectionOption; } set { this.DirectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Property
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PropertyOption { get; private set; }

        /// <summary>
        /// Name of the property by which the result is sorted
        /// </summary>
        /// <value>Name of the property by which the result is sorted</value>
        [JsonPropertyName("property")]
        public string? Property { get { return this.PropertyOption; } set { this.PropertyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sort {\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Sort" />
    /// </summary>
    public class SortJsonConverter : JsonConverter<Sort>
    {
        /// <summary>
        /// Deserializes json to <see cref="Sort" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Sort Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> property = default;
            Option<Sort.DirectionEnum?> direction = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "property":
                            property = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "direction":
                            string? directionRawValue = utf8JsonReader.GetString();
                            if (directionRawValue != null)
                                direction = new Option<Sort.DirectionEnum?>(Sort.DirectionEnumFromStringOrDefault(directionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (property.IsSet && property.Value == null)
                throw new ArgumentNullException(nameof(property), "Property is not nullable for class Sort.");

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction), "Property is not nullable for class Sort.");

            return new Sort(property, direction);
        }

        /// <summary>
        /// Serializes a <see cref="Sort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Sort sort, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sort, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Sort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Sort sort, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sort.PropertyOption.IsSet && sort.Property == null)
                throw new ArgumentNullException(nameof(sort.Property), "Property is required for class Sort.");

            if (sort.PropertyOption.IsSet)
                writer.WriteString("property", sort.Property);

            var directionRawValue = Sort.DirectionEnumToJsonValue(sort.DirectionOption.Value!.Value);
            writer.WriteString("direction", directionRawValue);
        }
    }
}
