/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new CodingJsonConverter());
            _jsonOptions.Converters.Add(new CodingListJsonConverter());
            _jsonOptions.Converters.Add(new ComponentsSchemasIntervalFormsItemJsonConverter());
            _jsonOptions.Converters.Add(new ComponentsSchemasMetadataErrorJsonConverter());
            _jsonOptions.Converters.Add(new ComponentsSchemasRecordCreateRequestItemJsonConverter());
            _jsonOptions.Converters.Add(new FormJsonConverter());
            _jsonOptions.Converters.Add(new FormListJsonConverter());
            _jsonOptions.Converters.Add(new InlineObjectJsonConverter());
            _jsonOptions.Converters.Add(new InlineObject1JsonConverter());
            _jsonOptions.Converters.Add(new InlineObject2JsonConverter());
            _jsonOptions.Converters.Add(new InlineObject3JsonConverter());
            _jsonOptions.Converters.Add(new InlineObject4JsonConverter());
            _jsonOptions.Converters.Add(new InlineObject5JsonConverter());
            _jsonOptions.Converters.Add(new IntervalJsonConverter());
            _jsonOptions.Converters.Add(new IntervalListJsonConverter());
            _jsonOptions.Converters.Add(new JobJsonConverter());
            _jsonOptions.Converters.Add(new KeywordJsonConverter());
            _jsonOptions.Converters.Add(new MetadataJsonConverter());
            _jsonOptions.Converters.Add(new PaginationJsonConverter());
            _jsonOptions.Converters.Add(new QueryJsonConverter());
            _jsonOptions.Converters.Add(new QueryCommentJsonConverter());
            _jsonOptions.Converters.Add(new QueryListJsonConverter());
            _jsonOptions.Converters.Add(new RecordJsonConverter());
            _jsonOptions.Converters.Add(new RecordJobStatusJsonConverter());
            _jsonOptions.Converters.Add(new RecordListJsonConverter());
            _jsonOptions.Converters.Add(new RecordRevisionJsonConverter());
            _jsonOptions.Converters.Add(new RecordRevisionListJsonConverter());
            _jsonOptions.Converters.Add(new RoleJsonConverter());
            _jsonOptions.Converters.Add(new SiteJsonConverter());
            _jsonOptions.Converters.Add(new SiteListJsonConverter());
            _jsonOptions.Converters.Add(new SortJsonConverter());
            _jsonOptions.Converters.Add(new StudyJsonConverter());
            _jsonOptions.Converters.Add(new StudyListJsonConverter());
            _jsonOptions.Converters.Add(new SubjectJsonConverter());
            _jsonOptions.Converters.Add(new SubjectListJsonConverter());
            _jsonOptions.Converters.Add(new UserJsonConverter());
            _jsonOptions.Converters.Add(new UserListJsonConverter());
            _jsonOptions.Converters.Add(new VariableJsonConverter());
            _jsonOptions.Converters.Add(new VariableListJsonConverter());
            _jsonOptions.Converters.Add(new VisitJsonConverter());
            _jsonOptions.Converters.Add(new VisitListJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AdministrationApiEvents>();
            _services.AddSingleton<CodingsApiEvents>();
            _services.AddSingleton<FormsApiEvents>();
            _services.AddSingleton<IntervalsApiEvents>();
            _services.AddSingleton<JobsApiEvents>();
            _services.AddSingleton<QueriesApiEvents>();
            _services.AddSingleton<RecordRevisionsApiEvents>();
            _services.AddSingleton<RecordsApiEvents>();
            _services.AddSingleton<SitesApiEvents>();
            _services.AddSingleton<StudiesApiEvents>();
            _services.AddSingleton<SubjectsApiEvents>();
            _services.AddSingleton<VariablesApiEvents>();
            _services.AddSingleton<VisitsApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IAdministrationApi, AdministrationApi>(client));
            builders.Add(_services.AddHttpClient<ICodingsApi, CodingsApi>(client));
            builders.Add(_services.AddHttpClient<IFormsApi, FormsApi>(client));
            builders.Add(_services.AddHttpClient<IIntervalsApi, IntervalsApi>(client));
            builders.Add(_services.AddHttpClient<IJobsApi, JobsApi>(client));
            builders.Add(_services.AddHttpClient<IQueriesApi, QueriesApi>(client));
            builders.Add(_services.AddHttpClient<IRecordRevisionsApi, RecordRevisionsApi>(client));
            builders.Add(_services.AddHttpClient<IRecordsApi, RecordsApi>(client));
            builders.Add(_services.AddHttpClient<ISitesApi, SitesApi>(client));
            builders.Add(_services.AddHttpClient<IStudiesApi, StudiesApi>(client));
            builders.Add(_services.AddHttpClient<ISubjectsApi, SubjectsApi>(client));
            builders.Add(_services.AddHttpClient<IVariablesApi, VariablesApi>(client));
            builders.Add(_services.AddHttpClient<IVisitsApi, VisitsApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
