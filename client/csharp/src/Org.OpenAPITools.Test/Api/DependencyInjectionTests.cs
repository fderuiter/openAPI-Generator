/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_imn_security_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken2);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken1);

                ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_imn_security_key, timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(apiKeyToken2);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_imn_security_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken2);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    ApiKeyToken apiKeyToken1 = new("<token>", ClientUtils.ApiKeyHeader.X_api_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken1);

                    ApiKeyToken apiKeyToken2 = new("<token>", ClientUtils.ApiKeyHeader.X_imn_security_key, timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(apiKeyToken2);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var administrationApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAdministrationApi>();
            Assert.True(administrationApi.HttpClient.BaseAddress != null);

            var codingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICodingsApi>();
            Assert.True(codingsApi.HttpClient.BaseAddress != null);

            var formsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFormsApi>();
            Assert.True(formsApi.HttpClient.BaseAddress != null);

            var intervalsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIntervalsApi>();
            Assert.True(intervalsApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var queriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IQueriesApi>();
            Assert.True(queriesApi.HttpClient.BaseAddress != null);

            var recordRevisionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRecordRevisionsApi>();
            Assert.True(recordRevisionsApi.HttpClient.BaseAddress != null);

            var recordsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRecordsApi>();
            Assert.True(recordsApi.HttpClient.BaseAddress != null);

            var sitesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISitesApi>();
            Assert.True(sitesApi.HttpClient.BaseAddress != null);

            var studiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IStudiesApi>();
            Assert.True(studiesApi.HttpClient.BaseAddress != null);

            var subjectsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISubjectsApi>();
            Assert.True(subjectsApi.HttpClient.BaseAddress != null);

            var variablesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVariablesApi>();
            Assert.True(variablesApi.HttpClient.BaseAddress != null);

            var visitsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IVisitsApi>();
            Assert.True(visitsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var administrationApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAdministrationApi>();
            Assert.True(administrationApi.HttpClient.BaseAddress != null);

            var codingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICodingsApi>();
            Assert.True(codingsApi.HttpClient.BaseAddress != null);

            var formsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFormsApi>();
            Assert.True(formsApi.HttpClient.BaseAddress != null);

            var intervalsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIntervalsApi>();
            Assert.True(intervalsApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var queriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IQueriesApi>();
            Assert.True(queriesApi.HttpClient.BaseAddress != null);

            var recordRevisionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRecordRevisionsApi>();
            Assert.True(recordRevisionsApi.HttpClient.BaseAddress != null);

            var recordsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRecordsApi>();
            Assert.True(recordsApi.HttpClient.BaseAddress != null);

            var sitesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISitesApi>();
            Assert.True(sitesApi.HttpClient.BaseAddress != null);

            var studiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IStudiesApi>();
            Assert.True(studiesApi.HttpClient.BaseAddress != null);

            var subjectsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISubjectsApi>();
            Assert.True(subjectsApi.HttpClient.BaseAddress != null);

            var variablesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVariablesApi>();
            Assert.True(variablesApi.HttpClient.BaseAddress != null);

            var visitsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IVisitsApi>();
            Assert.True(visitsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var administrationApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAdministrationApi>();
            Assert.True(administrationApi.HttpClient.BaseAddress != null);
            
            var codingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICodingsApi>();
            Assert.True(codingsApi.HttpClient.BaseAddress != null);
            
            var formsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFormsApi>();
            Assert.True(formsApi.HttpClient.BaseAddress != null);
            
            var intervalsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIntervalsApi>();
            Assert.True(intervalsApi.HttpClient.BaseAddress != null);
            
            var jobsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);
            
            var queriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IQueriesApi>();
            Assert.True(queriesApi.HttpClient.BaseAddress != null);
            
            var recordRevisionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRecordRevisionsApi>();
            Assert.True(recordRevisionsApi.HttpClient.BaseAddress != null);
            
            var recordsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRecordsApi>();
            Assert.True(recordsApi.HttpClient.BaseAddress != null);
            
            var sitesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISitesApi>();
            Assert.True(sitesApi.HttpClient.BaseAddress != null);
            
            var studiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IStudiesApi>();
            Assert.True(studiesApi.HttpClient.BaseAddress != null);
            
            var subjectsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISubjectsApi>();
            Assert.True(subjectsApi.HttpClient.BaseAddress != null);
            
            var variablesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVariablesApi>();
            Assert.True(variablesApi.HttpClient.BaseAddress != null);
            
            var visitsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IVisitsApi>();
            Assert.True(visitsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var administrationApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAdministrationApi>();
            Assert.True(administrationApi.HttpClient.BaseAddress != null);

            var codingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICodingsApi>();
            Assert.True(codingsApi.HttpClient.BaseAddress != null);

            var formsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFormsApi>();
            Assert.True(formsApi.HttpClient.BaseAddress != null);

            var intervalsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIntervalsApi>();
            Assert.True(intervalsApi.HttpClient.BaseAddress != null);

            var jobsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IJobsApi>();
            Assert.True(jobsApi.HttpClient.BaseAddress != null);

            var queriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IQueriesApi>();
            Assert.True(queriesApi.HttpClient.BaseAddress != null);

            var recordRevisionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRecordRevisionsApi>();
            Assert.True(recordRevisionsApi.HttpClient.BaseAddress != null);

            var recordsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRecordsApi>();
            Assert.True(recordsApi.HttpClient.BaseAddress != null);

            var sitesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISitesApi>();
            Assert.True(sitesApi.HttpClient.BaseAddress != null);

            var studiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IStudiesApi>();
            Assert.True(studiesApi.HttpClient.BaseAddress != null);

            var subjectsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISubjectsApi>();
            Assert.True(subjectsApi.HttpClient.BaseAddress != null);

            var variablesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVariablesApi>();
            Assert.True(variablesApi.HttpClient.BaseAddress != null);

            var visitsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IVisitsApi>();
            Assert.True(visitsApi.HttpClient.BaseAddress != null);
        }
    }
}
