/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RecordsApi
    /// </summary>
    public sealed class RecordsApiTests : ApiTestsBase
    {
        private readonly IRecordsApi _instance;

        public RecordsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRecordsApi>();
        }

        /// <summary>
        /// Test CreateRecords
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateRecordsAsyncTest()
        {
            string studyKey = default!;
            List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem = default!;
            var response = await _instance.CreateRecordsAsync(studyKey, componentsSchemasRecordCreateRequestItem);
            var model = response.Accepted();
            Assert.IsType<RecordJobStatus>(model);
        }

        /// <summary>
        /// Test ListRecords
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListRecordsAsyncTest()
        {
            string studyKey = default!;
            Client.Option<int> page = default!;
            Client.Option<int> size = default!;
            Client.Option<string> sort = default!;
            Client.Option<string> filter = default!;
            Client.Option<string> recordDataFilter = default!;
            var response = await _instance.ListRecordsAsync(studyKey, page, size, sort, filter, recordDataFilter);
            var model = response.Ok();
            Assert.IsType<RecordList>(model);
        }
    }
}
