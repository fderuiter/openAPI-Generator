/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`create_records`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateRecordsError {
    Status400(models::InlineObject),
    Status401(models::InlineObject1),
    Status403(models::InlineObject2),
    Status404(models::InlineObject3),
    Status429(models::InlineObject4),
    Status500(models::InlineObject5),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_records`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListRecordsError {
    Status400(models::InlineObject),
    Status401(models::InlineObject1),
    Status403(models::InlineObject2),
    Status404(models::InlineObject3),
    Status500(models::InlineObject5),
    UnknownValue(serde_json::Value),
}


pub async fn create_records(configuration: &configuration::Configuration, study_key: &str, components_schemas_record_create_request_item: Vec<models::ComponentsSchemasRecordCreateRequestItem>) -> Result<models::RecordJobStatus, Error<CreateRecordsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_study_key = study_key;
    let p_components_schemas_record_create_request_item = components_schemas_record_create_request_item;

    let uri_str = format!("{}/studies/{studyKey}/records", configuration.base_path, studyKey=crate::apis::urlencode(p_study_key));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-imn-security-key", value);
    };
    req_builder = req_builder.json(&p_components_schemas_record_create_request_item);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RecordJobStatus`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RecordJobStatus`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CreateRecordsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn list_records(configuration: &configuration::Configuration, study_key: &str, page: Option<i32>, size: Option<i32>, sort: Option<&str>, filter: Option<&str>, record_data_filter: Option<&str>) -> Result<models::RecordList, Error<ListRecordsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_study_key = study_key;
    let p_page = page;
    let p_size = size;
    let p_sort = sort;
    let p_filter = filter;
    let p_record_data_filter = record_data_filter;

    let uri_str = format!("{}/studies/{studyKey}/records", configuration.base_path, studyKey=crate::apis::urlencode(p_study_key));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_size {
        req_builder = req_builder.query(&[("size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_record_data_filter {
        req_builder = req_builder.query(&[("recordDataFilter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-imn-security-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RecordList`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RecordList`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ListRecordsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

