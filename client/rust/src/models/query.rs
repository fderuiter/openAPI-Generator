/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Query {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Mednet subject ID associated with the query (if applicable)
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Client-assigned subject OID (if applicable)
    #[serde(rename = "subjectOid", skip_serializing_if = "Option::is_none")]
    pub subject_oid: Option<String>,
    /// Category/type of the query (e.g., subject, record, question)
    #[serde(rename = "annotationType", skip_serializing_if = "Option::is_none")]
    pub annotation_type: Option<String>,
    /// Unique system identifier for the query
    #[serde(rename = "annotationId", skip_serializing_if = "Option::is_none")]
    pub annotation_id: Option<i32>,
    /// System text identifier for the query type/location (subject, record, question)
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// Description of the query (e.g., reason or context)
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Record ID associated with the query (if applicable)
    #[serde(rename = "recordId", skip_serializing_if = "Option::is_none")]
    pub record_id: Option<i32>,
    /// Variable name (field) associated with the query (if applicable)
    #[serde(rename = "variable", skip_serializing_if = "Option::is_none")]
    pub variable: Option<String>,
    /// Subject display ID associated with the query (if applicable)
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Date when the query was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when the query was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// History of comments/actions on the query
    #[serde(rename = "queryComments", skip_serializing_if = "Option::is_none")]
    pub query_comments: Option<Vec<models::QueryComment>>,
}

impl Query {
    pub fn new() -> Query {
        Query {
            study_key: None,
            subject_id: None,
            subject_oid: None,
            annotation_type: None,
            annotation_id: None,
            r#type: None,
            description: None,
            record_id: None,
            variable: None,
            subject_key: None,
            date_created: None,
            date_modified: None,
            query_comments: None,
        }
    }
}

