/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Record {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Interval ID (visit definition) that this record is associated with
    #[serde(rename = "intervalId", skip_serializing_if = "Option::is_none")]
    pub interval_id: Option<i32>,
    /// Form ID of the form this record instance belongs to
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// Form key of the form for this record instance
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// Site ID associated with the record
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Unique record ID
    #[serde(rename = "recordId", skip_serializing_if = "Option::is_none")]
    pub record_id: Option<i32>,
    /// Client-assigned record OID
    #[serde(rename = "recordOid", skip_serializing_if = "Option::is_none")]
    pub record_oid: Option<String>,
    /// Type of record (e.g., SUBJECT for subject-related forms)
    #[serde(rename = "recordType", skip_serializing_if = "Option::is_none")]
    pub record_type: Option<String>,
    /// Current status of the record (e.g., Record Incomplete, Record Complete)
    #[serde(rename = "recordStatus", skip_serializing_if = "Option::is_none")]
    pub record_status: Option<String>,
    /// Whether the record is marked as deleted
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Date when this record was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this record was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// Mednet subject ID that this record is associated with
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Client-assigned subject OID for the subject this record is associated with
    #[serde(rename = "subjectOid", skip_serializing_if = "Option::is_none")]
    pub subject_oid: Option<String>,
    /// Subject display ID that this record is associated with
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Visit instance ID that this record is associated with (if applicable)
    #[serde(rename = "visitId", skip_serializing_if = "Option::is_none")]
    pub visit_id: Option<i32>,
    /// Record ID of the parent record if this record is a subrecord (if applicable)
    #[serde(rename = "parentRecordId", skip_serializing_if = "Option::is_none")]
    pub parent_record_id: Option<i32>,
    /// List of keywords associated with the record
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<models::Keyword>>,
    /// Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
    #[serde(rename = "recordData", skip_serializing_if = "Option::is_none")]
    pub record_data: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl Record {
    pub fn new() -> Record {
        Record {
            study_key: None,
            interval_id: None,
            form_id: None,
            form_key: None,
            site_id: None,
            record_id: None,
            record_oid: None,
            record_type: None,
            record_status: None,
            deleted: None,
            date_created: None,
            date_modified: None,
            subject_id: None,
            subject_oid: None,
            subject_key: None,
            visit_id: None,
            parent_record_id: None,
            keywords: None,
            record_data: None,
        }
    }
}

