/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Visit {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Unique system identifier for the subject visit instance
    #[serde(rename = "visitId", skip_serializing_if = "Option::is_none")]
    pub visit_id: Option<i32>,
    /// Unique system identifier of the interval definition for this visit
    #[serde(rename = "intervalId", skip_serializing_if = "Option::is_none")]
    pub interval_id: Option<i32>,
    /// Name of the interval (visit) for this visit instance
    #[serde(rename = "intervalName", skip_serializing_if = "Option::is_none")]
    pub interval_name: Option<String>,
    /// Mednet subject ID of the subject
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Protocol-assigned subject identifier
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Start date of the visit window (in YYYY-MM-DD format)
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// End date of the visit window (in YYYY-MM-DD format)
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// Due date of the visit (in YYYY-MM-DD format), if applicable
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    /// Actual date the visit took place (in YYYY-MM-DD format)
    #[serde(rename = "visitDate", skip_serializing_if = "Option::is_none")]
    pub visit_date: Option<String>,
    /// Name of the form used to capture the actual visit date
    #[serde(rename = "visitDateForm", skip_serializing_if = "Option::is_none")]
    pub visit_date_form: Option<String>,
    /// Variable name of the field capturing the actual visit date
    #[serde(rename = "visitDateQuestion", skip_serializing_if = "Option::is_none")]
    pub visit_date_question: Option<String>,
    /// Whether the visit instance is marked as deleted
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Date when this visit record was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this visit record was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
}

impl Visit {
    pub fn new() -> Visit {
        Visit {
            study_key: None,
            visit_id: None,
            interval_id: None,
            interval_name: None,
            subject_id: None,
            subject_key: None,
            start_date: None,
            end_date: None,
            due_date: None,
            visit_date: None,
            visit_date_form: None,
            visit_date_question: None,
            deleted: None,
            date_created: None,
            date_modified: None,
        }
    }
}

