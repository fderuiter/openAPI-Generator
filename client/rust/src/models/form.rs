/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Form {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Mednet Form ID
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// User-defined form key
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// Name of the form (eCRF)
    #[serde(rename = "formName", skip_serializing_if = "Option::is_none")]
    pub form_name: Option<String>,
    /// Type of the form (e.g., Subject or Site)
    #[serde(rename = "formType", skip_serializing_if = "Option::is_none")]
    pub form_type: Option<String>,
    /// Number of modifications (revisions) of the form metadata
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    /// Whether the form has an embedded log
    #[serde(rename = "embeddedLog", skip_serializing_if = "Option::is_none")]
    pub embedded_log: Option<bool>,
    /// Whether the form enforces record ownership
    #[serde(rename = "enforceOwnership", skip_serializing_if = "Option::is_none")]
    pub enforce_ownership: Option<bool>,
    /// Whether the form requires a user agreement
    #[serde(rename = "userAgreement", skip_serializing_if = "Option::is_none")]
    pub user_agreement: Option<bool>,
    /// Whether the form is marked as a subject record report
    #[serde(rename = "subjectRecordReport", skip_serializing_if = "Option::is_none")]
    pub subject_record_report: Option<bool>,
    /// Whether the form is included in unscheduled visits
    #[serde(rename = "unscheduledVisit", skip_serializing_if = "Option::is_none")]
    pub unscheduled_visit: Option<bool>,
    /// Whether the form is included in Other Forms category
    #[serde(rename = "otherForms", skip_serializing_if = "Option::is_none")]
    pub other_forms: Option<bool>,
    /// Whether the form is an ePRO (electronic patient reported outcome) form
    #[serde(rename = "eproForm", skip_serializing_if = "Option::is_none")]
    pub epro_form: Option<bool>,
    /// Whether the form allows copying of data
    #[serde(rename = "allowCopy", skip_serializing_if = "Option::is_none")]
    pub allow_copy: Option<bool>,
    /// Whether the form is soft-deleted (disabled)
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Date when this form was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this form was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
}

impl Form {
    pub fn new() -> Form {
        Form {
            study_key: None,
            form_id: None,
            form_key: None,
            form_name: None,
            form_type: None,
            revision: None,
            embedded_log: None,
            enforce_ownership: None,
            user_agreement: None,
            subject_record_report: None,
            unscheduled_visit: None,
            other_forms: None,
            epro_form: None,
            allow_copy: None,
            disabled: None,
            date_created: None,
            date_modified: None,
        }
    }
}

