/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Variable {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Mednet variable ID
    #[serde(rename = "variableId", skip_serializing_if = "Option::is_none")]
    pub variable_id: Option<i32>,
    /// Type of the variable (field type), e.g., RADIO, TEXT, etc.
    #[serde(rename = "variableType", skip_serializing_if = "Option::is_none")]
    pub variable_type: Option<VariableType>,
    /// Name of the variable (question text or label)
    #[serde(rename = "variableName", skip_serializing_if = "Option::is_none")]
    pub variable_name: Option<String>,
    /// Sequence of the variable on the form
    #[serde(rename = "sequence", skip_serializing_if = "Option::is_none")]
    pub sequence: Option<i32>,
    /// Number of modifications of the variable (via form metadata revisions)
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    /// Whether the variable is marked as disabled (deleted)
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Date when this variable was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this variable was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// ID of the form that this variable belongs to
    #[serde(rename = "formId", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// Client-assigned variable OID
    #[serde(rename = "variableOid", skip_serializing_if = "Option::is_none")]
    pub variable_oid: Option<String>,
    /// Whether the variable is marked as deleted
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Form key of the form that this variable belongs to
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// Name of the form that this variable belongs to
    #[serde(rename = "formName", skip_serializing_if = "Option::is_none")]
    pub form_name: Option<String>,
    /// User-defined identifier (field name) for the variable
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Whether the variable is flagged as blinded (hidden in certain contexts)
    #[serde(rename = "blinded", skip_serializing_if = "Option::is_none")]
    pub blinded: Option<bool>,
}

impl Variable {
    pub fn new() -> Variable {
        Variable {
            study_key: None,
            variable_id: None,
            variable_type: None,
            variable_name: None,
            sequence: None,
            revision: None,
            disabled: None,
            date_created: None,
            date_modified: None,
            form_id: None,
            variable_oid: None,
            deleted: None,
            form_key: None,
            form_name: None,
            label: None,
            blinded: None,
        }
    }
}
/// Type of the variable (field type), e.g., RADIO, TEXT, etc.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VariableType {
    #[serde(rename = "TEXT")]
    Text,
    #[serde(rename = "TEXTAREA")]
    Textarea,
    #[serde(rename = "RADIO")]
    Radio,
    #[serde(rename = "CHECKBOX")]
    Checkbox,
    #[serde(rename = "DROPDOWN")]
    Dropdown,
    #[serde(rename = "DATE")]
    Date,
    #[serde(rename = "NUMBER")]
    Number,
}

impl Default for VariableType {
    fn default() -> VariableType {
        Self::Text
    }
}

