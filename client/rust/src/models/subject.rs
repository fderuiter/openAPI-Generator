/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subject {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Mednet subject ID (internal numeric ID)
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Client-assigned subject object identifier (OID)
    #[serde(rename = "subjectOid", skip_serializing_if = "Option::is_none")]
    pub subject_oid: Option<String>,
    /// Protocol-assigned subject identifier (display ID)
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Current status of the subject (e.g., Enrolled)
    #[serde(rename = "subjectStatus", skip_serializing_if = "Option::is_none")]
    pub subject_status: Option<String>,
    /// Mednet site ID the subject is associated with
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Name of the site the subject is associated with
    #[serde(rename = "siteName", skip_serializing_if = "Option::is_none")]
    pub site_name: Option<String>,
    /// Whether the subject is marked as deleted
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Subjectâ€™s enrollment start date
    #[serde(rename = "enrollmentStartDate", skip_serializing_if = "Option::is_none")]
    pub enrollment_start_date: Option<String>,
    /// Date when this subject record was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    /// Date when this subject record was last modified
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    /// List of keywords associated with the subject
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<Vec<models::Keyword>>,
}

impl Subject {
    pub fn new() -> Subject {
        Subject {
            study_key: None,
            subject_id: None,
            subject_oid: None,
            subject_key: None,
            subject_status: None,
            site_id: None,
            site_name: None,
            deleted: None,
            enrollment_start_date: None,
            date_created: None,
            date_modified: None,
            keywords: None,
        }
    }
}

