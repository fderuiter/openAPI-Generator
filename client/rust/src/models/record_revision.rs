/*
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.0.15
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecordRevision {
    /// Unique study key
    #[serde(rename = "studyKey", skip_serializing_if = "Option::is_none")]
    pub study_key: Option<String>,
    /// Unique system identifier for the record revision
    #[serde(rename = "recordRevisionId", skip_serializing_if = "Option::is_none")]
    pub record_revision_id: Option<i32>,
    /// Unique system identifier of the related record
    #[serde(rename = "recordId", skip_serializing_if = "Option::is_none")]
    pub record_id: Option<i32>,
    /// Client-assigned record OID (if any)
    #[serde(rename = "recordOid", skip_serializing_if = "Option::is_none")]
    pub record_oid: Option<String>,
    /// Revision number of the record (version of the record status)
    #[serde(rename = "recordRevision", skip_serializing_if = "Option::is_none")]
    pub record_revision: Option<i32>,
    /// Revision number of the data within the record
    #[serde(rename = "dataRevision", skip_serializing_if = "Option::is_none")]
    pub data_revision: Option<i32>,
    /// Status of the record at this revision (user-defined status label)
    #[serde(rename = "recordStatus", skip_serializing_if = "Option::is_none")]
    pub record_status: Option<String>,
    /// Mednet subject ID related to the record
    #[serde(rename = "subjectId", skip_serializing_if = "Option::is_none")]
    pub subject_id: Option<i32>,
    /// Client-assigned subject OID related to the record
    #[serde(rename = "subjectOid", skip_serializing_if = "Option::is_none")]
    pub subject_oid: Option<String>,
    /// Subject display ID related to the record
    #[serde(rename = "subjectKey", skip_serializing_if = "Option::is_none")]
    pub subject_key: Option<String>,
    /// Site ID related to the record
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i32>,
    /// Form key of the form that the record belongs to
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// Interval ID (visit definition) related to the record
    #[serde(rename = "intervalId", skip_serializing_if = "Option::is_none")]
    pub interval_id: Option<i32>,
    /// Role name of the user who saved the record revision
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Username of the user who saved the record revision
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// Reason for change, if provided (for audit trail)
    #[serde(rename = "reasonForChange", skip_serializing_if = "Option::is_none")]
    pub reason_for_change: Option<String>,
    /// Whether the record was deleted in this revision
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Date when this record revision was created
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
}

impl RecordRevision {
    pub fn new() -> RecordRevision {
        RecordRevision {
            study_key: None,
            record_revision_id: None,
            record_id: None,
            record_oid: None,
            record_revision: None,
            data_revision: None,
            record_status: None,
            subject_id: None,
            subject_oid: None,
            subject_key: None,
            site_id: None,
            form_key: None,
            interval_id: None,
            role: None,
            user: None,
            reason_for_change: None,
            deleted: None,
            date_created: None,
        }
    }
}

