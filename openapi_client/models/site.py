# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Site(BaseModel):
    """
    Site
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    site_id: Optional[StrictInt] = Field(default=None, description="Unique site ID", alias="siteId")
    site_name: Optional[StrictStr] = Field(default=None, description="Name of the site", alias="siteName")
    site_enrollment_status: Optional[StrictStr] = Field(default=None, description="Enrollment status of the site", alias="siteEnrollmentStatus")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when this site was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when this site was last modified", alias="dateModified")
    __properties: ClassVar[List[str]] = ["studyKey", "siteId", "siteName", "siteEnrollmentStatus", "dateCreated", "dateModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Site from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Site from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "siteId": obj.get("siteId"),
            "siteName": obj.get("siteName"),
            "siteEnrollmentStatus": obj.get("siteEnrollmentStatus"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified")
        })
        return _obj


