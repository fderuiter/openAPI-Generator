# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Variable(BaseModel):
    """
    Variable
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    variable_id: Optional[StrictInt] = Field(default=None, description="Mednet variable ID", alias="variableId")
    variable_type: Optional[StrictStr] = Field(default=None, description="Type of the variable (field type), e.g., RADIO, TEXT, etc.", alias="variableType")
    variable_name: Optional[StrictStr] = Field(default=None, description="Name of the variable (question text or label)", alias="variableName")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence of the variable on the form")
    revision: Optional[StrictInt] = Field(default=None, description="Number of modifications of the variable (via form metadata revisions)")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the variable is marked as disabled (deleted)")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when this variable was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when this variable was last modified", alias="dateModified")
    form_id: Optional[StrictInt] = Field(default=None, description="ID of the form that this variable belongs to", alias="formId")
    variable_oid: Optional[StrictStr] = Field(default=None, description="Client-assigned variable OID", alias="variableOid")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the variable is marked as deleted")
    form_key: Optional[StrictStr] = Field(default=None, description="Form key of the form that this variable belongs to", alias="formKey")
    form_name: Optional[StrictStr] = Field(default=None, description="Name of the form that this variable belongs to", alias="formName")
    label: Optional[StrictStr] = Field(default=None, description="User-defined identifier (field name) for the variable")
    blinded: Optional[StrictBool] = Field(default=None, description="Whether the variable is flagged as blinded (hidden in certain contexts)")
    __properties: ClassVar[List[str]] = ["studyKey", "variableId", "variableType", "variableName", "sequence", "revision", "disabled", "dateCreated", "dateModified", "formId", "variableOid", "deleted", "formKey", "formName", "label", "blinded"]

    @field_validator('variable_type')
    def variable_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT', 'TEXTAREA', 'RADIO', 'CHECKBOX', 'DROPDOWN', 'DATE', 'NUMBER']):
            raise ValueError("must be one of enum values ('TEXT', 'TEXTAREA', 'RADIO', 'CHECKBOX', 'DROPDOWN', 'DATE', 'NUMBER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Variable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Variable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "variableId": obj.get("variableId"),
            "variableType": obj.get("variableType"),
            "variableName": obj.get("variableName"),
            "sequence": obj.get("sequence"),
            "revision": obj.get("revision"),
            "disabled": obj.get("disabled"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "formId": obj.get("formId"),
            "variableOid": obj.get("variableOid"),
            "deleted": obj.get("deleted"),
            "formKey": obj.get("formKey"),
            "formName": obj.get("formName"),
            "label": obj.get("label"),
            "blinded": obj.get("blinded")
        })
        return _obj


