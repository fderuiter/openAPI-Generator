# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Role(BaseModel):
    """
    Role
    """ # noqa: E501
    date_created: Optional[List[StrictInt]] = Field(default=None, description="Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])", alias="dateCreated")
    date_modified: Optional[List[StrictInt]] = Field(default=None, description="Timestamp when the role assignment was last modified", alias="dateModified")
    role_id: Optional[StrictStr] = Field(default=None, description="Unique role ID (UUID)", alias="roleId")
    community_id: Optional[StrictInt] = Field(default=None, description="Community ID or level associated with the role", alias="communityId")
    name: Optional[StrictStr] = Field(default=None, description="Name of the role")
    description: Optional[StrictStr] = Field(default=None, description="Description of the role")
    level: Optional[StrictInt] = Field(default=None, description="Role level or hierarchy")
    type: Optional[StrictStr] = Field(default=None, description="Role type/category")
    inactive: Optional[StrictBool] = Field(default=None, description="Whether the role is inactive")
    __properties: ClassVar[List[str]] = ["dateCreated", "dateModified", "roleId", "communityId", "name", "description", "level", "type", "inactive"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "roleId": obj.get("roleId"),
            "communityId": obj.get("communityId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "level": obj.get("level"),
            "type": obj.get("type"),
            "inactive": obj.get("inactive")
        })
        return _obj


