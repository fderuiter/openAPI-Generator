# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Form(BaseModel):
    """
    Form
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    form_id: Optional[StrictInt] = Field(default=None, description="Mednet Form ID", alias="formId")
    form_key: Optional[StrictStr] = Field(default=None, description="User-defined form key", alias="formKey")
    form_name: Optional[StrictStr] = Field(default=None, description="Name of the form (eCRF)", alias="formName")
    form_type: Optional[StrictStr] = Field(default=None, description="Type of the form (e.g., Subject or Site)", alias="formType")
    revision: Optional[StrictInt] = Field(default=None, description="Number of modifications (revisions) of the form metadata")
    embedded_log: Optional[StrictBool] = Field(default=None, description="Whether the form has an embedded log", alias="embeddedLog")
    enforce_ownership: Optional[StrictBool] = Field(default=None, description="Whether the form enforces record ownership", alias="enforceOwnership")
    user_agreement: Optional[StrictBool] = Field(default=None, description="Whether the form requires a user agreement", alias="userAgreement")
    subject_record_report: Optional[StrictBool] = Field(default=None, description="Whether the form is marked as a subject record report", alias="subjectRecordReport")
    unscheduled_visit: Optional[StrictBool] = Field(default=None, description="Whether the form is included in unscheduled visits", alias="unscheduledVisit")
    other_forms: Optional[StrictBool] = Field(default=None, description="Whether the form is included in Other Forms category", alias="otherForms")
    epro_form: Optional[StrictBool] = Field(default=None, description="Whether the form is an ePRO (electronic patient reported outcome) form", alias="eproForm")
    allow_copy: Optional[StrictBool] = Field(default=None, description="Whether the form allows copying of data", alias="allowCopy")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the form is soft-deleted (disabled)")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when this form was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when this form was last modified", alias="dateModified")
    __properties: ClassVar[List[str]] = ["studyKey", "formId", "formKey", "formName", "formType", "revision", "embeddedLog", "enforceOwnership", "userAgreement", "subjectRecordReport", "unscheduledVisit", "otherForms", "eproForm", "allowCopy", "disabled", "dateCreated", "dateModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Form from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Form from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "formId": obj.get("formId"),
            "formKey": obj.get("formKey"),
            "formName": obj.get("formName"),
            "formType": obj.get("formType"),
            "revision": obj.get("revision"),
            "embeddedLog": obj.get("embeddedLog"),
            "enforceOwnership": obj.get("enforceOwnership"),
            "userAgreement": obj.get("userAgreement"),
            "subjectRecordReport": obj.get("subjectRecordReport"),
            "unscheduledVisit": obj.get("unscheduledVisit"),
            "otherForms": obj.get("otherForms"),
            "eproForm": obj.get("eproForm"),
            "allowCopy": obj.get("allowCopy"),
            "disabled": obj.get("disabled"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified")
        })
        return _obj


