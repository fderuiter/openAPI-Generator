# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.0.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Visit(BaseModel):
    """
    Visit
    """ # noqa: E501
    study_key: Optional[StrictStr] = Field(default=None, description="Unique study key", alias="studyKey")
    visit_id: Optional[StrictInt] = Field(default=None, description="Unique system identifier for the subject visit instance", alias="visitId")
    interval_id: Optional[StrictInt] = Field(default=None, description="Unique system identifier of the interval definition for this visit", alias="intervalId")
    interval_name: Optional[StrictStr] = Field(default=None, description="Name of the interval (visit) for this visit instance", alias="intervalName")
    subject_id: Optional[StrictInt] = Field(default=None, description="Mednet subject ID of the subject", alias="subjectId")
    subject_key: Optional[StrictStr] = Field(default=None, description="Protocol-assigned subject identifier", alias="subjectKey")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date of the visit window (in YYYY-MM-DD format)", alias="startDate")
    end_date: Optional[StrictStr] = Field(default=None, description="End date of the visit window (in YYYY-MM-DD format)", alias="endDate")
    due_date: Optional[StrictStr] = Field(default=None, description="Due date of the visit (in YYYY-MM-DD format), if applicable", alias="dueDate")
    visit_date: Optional[StrictStr] = Field(default=None, description="Actual date the visit took place (in YYYY-MM-DD format)", alias="visitDate")
    visit_date_form: Optional[StrictStr] = Field(default=None, description="Name of the form used to capture the actual visit date", alias="visitDateForm")
    visit_date_question: Optional[StrictStr] = Field(default=None, description="Variable name of the field capturing the actual visit date", alias="visitDateQuestion")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the visit instance is marked as deleted")
    date_created: Optional[StrictStr] = Field(default=None, description="Date when this visit record was created", alias="dateCreated")
    date_modified: Optional[StrictStr] = Field(default=None, description="Date when this visit record was last modified", alias="dateModified")
    __properties: ClassVar[List[str]] = ["studyKey", "visitId", "intervalId", "intervalName", "subjectId", "subjectKey", "startDate", "endDate", "dueDate", "visitDate", "visitDateForm", "visitDateQuestion", "deleted", "dateCreated", "dateModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Visit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Visit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyKey": obj.get("studyKey"),
            "visitId": obj.get("visitId"),
            "intervalId": obj.get("intervalId"),
            "intervalName": obj.get("intervalName"),
            "subjectId": obj.get("subjectId"),
            "subjectKey": obj.get("subjectKey"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "dueDate": obj.get("dueDate"),
            "visitDate": obj.get("visitDate"),
            "visitDateForm": obj.get("visitDateForm"),
            "visitDateQuestion": obj.get("visitDateQuestion"),
            "deleted": obj.get("deleted"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified")
        })
        return _obj


