/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Coding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Coding{}

// Coding struct for Coding
type Coding struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Name of the site associated with the coded data
	SiteName *string `json:"siteName,omitempty"`
	// Site ID associated with the coded data
	SiteId *int32 `json:"siteId,omitempty"`
	// Subject ID associated with the coded data
	SubjectId *int32 `json:"subjectId,omitempty"`
	// Subject key (display ID) associated with the coded data
	SubjectKey *string `json:"subjectKey,omitempty"`
	// Form ID where the coded data originates
	FormId *int32 `json:"formId,omitempty"`
	// Name of the form where the coded data originates
	FormName *string `json:"formName,omitempty"`
	// Form key where the coded data originates
	FormKey *string `json:"formKey,omitempty"`
	// Revision number of the coding entry
	Revision *int32 `json:"revision,omitempty"`
	// Record ID associated with the coded data
	RecordId *int32 `json:"recordId,omitempty"`
	// Variable name (field) that was coded
	Variable *string `json:"variable,omitempty"`
	// Original value entered that required coding
	Value *string `json:"value,omitempty"`
	// Mednet coding ID
	CodingId *int32 `json:"codingId,omitempty"`
	// Standardized code assigned (e.g., dictionary term)
	Code *string `json:"code,omitempty"`
	// Name of the user who performed the coding
	CodedBy *string `json:"codedBy,omitempty"`
	// Reason for coding or any notes on changes
	Reason *string `json:"reason,omitempty"`
	// Name of the dictionary used (e.g., MedDRA)
	DictionaryName *string `json:"dictionaryName,omitempty"`
	// Version of the dictionary used
	DictionaryVersion *string `json:"dictionaryVersion,omitempty"`
	// Date when the coding was performed
	DateCoded *string `json:"dateCoded,omitempty"`
}

// NewCoding instantiates a new Coding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoding() *Coding {
	this := Coding{}
	return &this
}

// NewCodingWithDefaults instantiates a new Coding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingWithDefaults() *Coding {
	this := Coding{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Coding) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Coding) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Coding) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetSiteName returns the SiteName field value if set, zero value otherwise.
func (o *Coding) GetSiteName() string {
	if o == nil || IsNil(o.SiteName) {
		var ret string
		return ret
	}
	return *o.SiteName
}

// GetSiteNameOk returns a tuple with the SiteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSiteNameOk() (*string, bool) {
	if o == nil || IsNil(o.SiteName) {
		return nil, false
	}
	return o.SiteName, true
}

// HasSiteName returns a boolean if a field has been set.
func (o *Coding) HasSiteName() bool {
	if o != nil && !IsNil(o.SiteName) {
		return true
	}

	return false
}

// SetSiteName gets a reference to the given string and assigns it to the SiteName field.
func (o *Coding) SetSiteName(v string) {
	o.SiteName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *Coding) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *Coding) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *Coding) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetSubjectId returns the SubjectId field value if set, zero value otherwise.
func (o *Coding) GetSubjectId() int32 {
	if o == nil || IsNil(o.SubjectId) {
		var ret int32
		return ret
	}
	return *o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSubjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectId) {
		return nil, false
	}
	return o.SubjectId, true
}

// HasSubjectId returns a boolean if a field has been set.
func (o *Coding) HasSubjectId() bool {
	if o != nil && !IsNil(o.SubjectId) {
		return true
	}

	return false
}

// SetSubjectId gets a reference to the given int32 and assigns it to the SubjectId field.
func (o *Coding) SetSubjectId(v int32) {
	o.SubjectId = &v
}

// GetSubjectKey returns the SubjectKey field value if set, zero value otherwise.
func (o *Coding) GetSubjectKey() string {
	if o == nil || IsNil(o.SubjectKey) {
		var ret string
		return ret
	}
	return *o.SubjectKey
}

// GetSubjectKeyOk returns a tuple with the SubjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSubjectKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectKey) {
		return nil, false
	}
	return o.SubjectKey, true
}

// HasSubjectKey returns a boolean if a field has been set.
func (o *Coding) HasSubjectKey() bool {
	if o != nil && !IsNil(o.SubjectKey) {
		return true
	}

	return false
}

// SetSubjectKey gets a reference to the given string and assigns it to the SubjectKey field.
func (o *Coding) SetSubjectKey(v string) {
	o.SubjectKey = &v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *Coding) GetFormId() int32 {
	if o == nil || IsNil(o.FormId) {
		var ret int32
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetFormIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *Coding) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given int32 and assigns it to the FormId field.
func (o *Coding) SetFormId(v int32) {
	o.FormId = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *Coding) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *Coding) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *Coding) SetFormName(v string) {
	o.FormName = &v
}

// GetFormKey returns the FormKey field value if set, zero value otherwise.
func (o *Coding) GetFormKey() string {
	if o == nil || IsNil(o.FormKey) {
		var ret string
		return ret
	}
	return *o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetFormKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FormKey) {
		return nil, false
	}
	return o.FormKey, true
}

// HasFormKey returns a boolean if a field has been set.
func (o *Coding) HasFormKey() bool {
	if o != nil && !IsNil(o.FormKey) {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given string and assigns it to the FormKey field.
func (o *Coding) SetFormKey(v string) {
	o.FormKey = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *Coding) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *Coding) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *Coding) SetRevision(v int32) {
	o.Revision = &v
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *Coding) GetRecordId() int32 {
	if o == nil || IsNil(o.RecordId) {
		var ret int32
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetRecordIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *Coding) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given int32 and assigns it to the RecordId field.
func (o *Coding) SetRecordId(v int32) {
	o.RecordId = &v
}

// GetVariable returns the Variable field value if set, zero value otherwise.
func (o *Coding) GetVariable() string {
	if o == nil || IsNil(o.Variable) {
		var ret string
		return ret
	}
	return *o.Variable
}

// GetVariableOk returns a tuple with the Variable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetVariableOk() (*string, bool) {
	if o == nil || IsNil(o.Variable) {
		return nil, false
	}
	return o.Variable, true
}

// HasVariable returns a boolean if a field has been set.
func (o *Coding) HasVariable() bool {
	if o != nil && !IsNil(o.Variable) {
		return true
	}

	return false
}

// SetVariable gets a reference to the given string and assigns it to the Variable field.
func (o *Coding) SetVariable(v string) {
	o.Variable = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Coding) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Coding) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Coding) SetValue(v string) {
	o.Value = &v
}

// GetCodingId returns the CodingId field value if set, zero value otherwise.
func (o *Coding) GetCodingId() int32 {
	if o == nil || IsNil(o.CodingId) {
		var ret int32
		return ret
	}
	return *o.CodingId
}

// GetCodingIdOk returns a tuple with the CodingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetCodingIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CodingId) {
		return nil, false
	}
	return o.CodingId, true
}

// HasCodingId returns a boolean if a field has been set.
func (o *Coding) HasCodingId() bool {
	if o != nil && !IsNil(o.CodingId) {
		return true
	}

	return false
}

// SetCodingId gets a reference to the given int32 and assigns it to the CodingId field.
func (o *Coding) SetCodingId(v int32) {
	o.CodingId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Coding) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Coding) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Coding) SetCode(v string) {
	o.Code = &v
}

// GetCodedBy returns the CodedBy field value if set, zero value otherwise.
func (o *Coding) GetCodedBy() string {
	if o == nil || IsNil(o.CodedBy) {
		var ret string
		return ret
	}
	return *o.CodedBy
}

// GetCodedByOk returns a tuple with the CodedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetCodedByOk() (*string, bool) {
	if o == nil || IsNil(o.CodedBy) {
		return nil, false
	}
	return o.CodedBy, true
}

// HasCodedBy returns a boolean if a field has been set.
func (o *Coding) HasCodedBy() bool {
	if o != nil && !IsNil(o.CodedBy) {
		return true
	}

	return false
}

// SetCodedBy gets a reference to the given string and assigns it to the CodedBy field.
func (o *Coding) SetCodedBy(v string) {
	o.CodedBy = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Coding) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Coding) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Coding) SetReason(v string) {
	o.Reason = &v
}

// GetDictionaryName returns the DictionaryName field value if set, zero value otherwise.
func (o *Coding) GetDictionaryName() string {
	if o == nil || IsNil(o.DictionaryName) {
		var ret string
		return ret
	}
	return *o.DictionaryName
}

// GetDictionaryNameOk returns a tuple with the DictionaryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetDictionaryNameOk() (*string, bool) {
	if o == nil || IsNil(o.DictionaryName) {
		return nil, false
	}
	return o.DictionaryName, true
}

// HasDictionaryName returns a boolean if a field has been set.
func (o *Coding) HasDictionaryName() bool {
	if o != nil && !IsNil(o.DictionaryName) {
		return true
	}

	return false
}

// SetDictionaryName gets a reference to the given string and assigns it to the DictionaryName field.
func (o *Coding) SetDictionaryName(v string) {
	o.DictionaryName = &v
}

// GetDictionaryVersion returns the DictionaryVersion field value if set, zero value otherwise.
func (o *Coding) GetDictionaryVersion() string {
	if o == nil || IsNil(o.DictionaryVersion) {
		var ret string
		return ret
	}
	return *o.DictionaryVersion
}

// GetDictionaryVersionOk returns a tuple with the DictionaryVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetDictionaryVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DictionaryVersion) {
		return nil, false
	}
	return o.DictionaryVersion, true
}

// HasDictionaryVersion returns a boolean if a field has been set.
func (o *Coding) HasDictionaryVersion() bool {
	if o != nil && !IsNil(o.DictionaryVersion) {
		return true
	}

	return false
}

// SetDictionaryVersion gets a reference to the given string and assigns it to the DictionaryVersion field.
func (o *Coding) SetDictionaryVersion(v string) {
	o.DictionaryVersion = &v
}

// GetDateCoded returns the DateCoded field value if set, zero value otherwise.
func (o *Coding) GetDateCoded() string {
	if o == nil || IsNil(o.DateCoded) {
		var ret string
		return ret
	}
	return *o.DateCoded
}

// GetDateCodedOk returns a tuple with the DateCoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetDateCodedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCoded) {
		return nil, false
	}
	return o.DateCoded, true
}

// HasDateCoded returns a boolean if a field has been set.
func (o *Coding) HasDateCoded() bool {
	if o != nil && !IsNil(o.DateCoded) {
		return true
	}

	return false
}

// SetDateCoded gets a reference to the given string and assigns it to the DateCoded field.
func (o *Coding) SetDateCoded(v string) {
	o.DateCoded = &v
}

func (o Coding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Coding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.SiteName) {
		toSerialize["siteName"] = o.SiteName
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.SubjectId) {
		toSerialize["subjectId"] = o.SubjectId
	}
	if !IsNil(o.SubjectKey) {
		toSerialize["subjectKey"] = o.SubjectKey
	}
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.FormKey) {
		toSerialize["formKey"] = o.FormKey
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.RecordId) {
		toSerialize["recordId"] = o.RecordId
	}
	if !IsNil(o.Variable) {
		toSerialize["variable"] = o.Variable
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.CodingId) {
		toSerialize["codingId"] = o.CodingId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CodedBy) {
		toSerialize["codedBy"] = o.CodedBy
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.DictionaryName) {
		toSerialize["dictionaryName"] = o.DictionaryName
	}
	if !IsNil(o.DictionaryVersion) {
		toSerialize["dictionaryVersion"] = o.DictionaryVersion
	}
	if !IsNil(o.DateCoded) {
		toSerialize["dateCoded"] = o.DateCoded
	}
	return toSerialize, nil
}

type NullableCoding struct {
	value *Coding
	isSet bool
}

func (v NullableCoding) Get() *Coding {
	return v.value
}

func (v *NullableCoding) Set(val *Coding) {
	v.value = val
	v.isSet = true
}

func (v NullableCoding) IsSet() bool {
	return v.isSet
}

func (v *NullableCoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoding(val *Coding) *NullableCoding {
	return &NullableCoding{value: val, isSet: true}
}

func (v NullableCoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


