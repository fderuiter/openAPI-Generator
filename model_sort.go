/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Sort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sort{}

// Sort struct for Sort
type Sort struct {
	// Name of the property by which the result is sorted
	Property *string `json:"property,omitempty"`
	// Sort direction (ASC or DESC)
	Direction *string `json:"direction,omitempty"`
}

// NewSort instantiates a new Sort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSort() *Sort {
	this := Sort{}
	return &this
}

// NewSortWithDefaults instantiates a new Sort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortWithDefaults() *Sort {
	this := Sort{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *Sort) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sort) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *Sort) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *Sort) SetProperty(v string) {
	o.Property = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *Sort) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sort) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *Sort) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *Sort) SetDirection(v string) {
	o.Direction = &v
}

func (o Sort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	return toSerialize, nil
}

type NullableSort struct {
	value *Sort
	isSet bool
}

func (v NullableSort) Get() *Sort {
	return v.value
}

func (v *NullableSort) Set(val *Sort) {
	v.value = val
	v.isSet = true
}

func (v NullableSort) IsSet() bool {
	return v.isSet
}

func (v *NullableSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSort(val *Sort) *NullableSort {
	return &NullableSort{value: val, isSet: true}
}

func (v NullableSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


