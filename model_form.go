/*
Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

API version: 1.0.15
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Form type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Form{}

// Form struct for Form
type Form struct {
	// Unique study key
	StudyKey *string `json:"studyKey,omitempty"`
	// Mednet Form ID
	FormId *int32 `json:"formId,omitempty"`
	// User-defined form key
	FormKey *string `json:"formKey,omitempty"`
	// Name of the form (eCRF)
	FormName *string `json:"formName,omitempty"`
	// Type of the form (e.g., Subject or Site)
	FormType *string `json:"formType,omitempty"`
	// Number of modifications (revisions) of the form metadata
	Revision *int32 `json:"revision,omitempty"`
	// Whether the form has an embedded log
	EmbeddedLog *bool `json:"embeddedLog,omitempty"`
	// Whether the form enforces record ownership
	EnforceOwnership *bool `json:"enforceOwnership,omitempty"`
	// Whether the form requires a user agreement
	UserAgreement *bool `json:"userAgreement,omitempty"`
	// Whether the form is marked as a subject record report
	SubjectRecordReport *bool `json:"subjectRecordReport,omitempty"`
	// Whether the form is included in unscheduled visits
	UnscheduledVisit *bool `json:"unscheduledVisit,omitempty"`
	// Whether the form is included in Other Forms category
	OtherForms *bool `json:"otherForms,omitempty"`
	// Whether the form is an ePRO (electronic patient reported outcome) form
	EproForm *bool `json:"eproForm,omitempty"`
	// Whether the form allows copying of data
	AllowCopy *bool `json:"allowCopy,omitempty"`
	// Whether the form is soft-deleted (disabled)
	Disabled *bool `json:"disabled,omitempty"`
	// Date when this form was created
	DateCreated *string `json:"dateCreated,omitempty"`
	// Date when this form was last modified
	DateModified *string `json:"dateModified,omitempty"`
}

// NewForm instantiates a new Form object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForm() *Form {
	this := Form{}
	return &this
}

// NewFormWithDefaults instantiates a new Form object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormWithDefaults() *Form {
	this := Form{}
	return &this
}

// GetStudyKey returns the StudyKey field value if set, zero value otherwise.
func (o *Form) GetStudyKey() string {
	if o == nil || IsNil(o.StudyKey) {
		var ret string
		return ret
	}
	return *o.StudyKey
}

// GetStudyKeyOk returns a tuple with the StudyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetStudyKeyOk() (*string, bool) {
	if o == nil || IsNil(o.StudyKey) {
		return nil, false
	}
	return o.StudyKey, true
}

// HasStudyKey returns a boolean if a field has been set.
func (o *Form) HasStudyKey() bool {
	if o != nil && !IsNil(o.StudyKey) {
		return true
	}

	return false
}

// SetStudyKey gets a reference to the given string and assigns it to the StudyKey field.
func (o *Form) SetStudyKey(v string) {
	o.StudyKey = &v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *Form) GetFormId() int32 {
	if o == nil || IsNil(o.FormId) {
		var ret int32
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetFormIdOk() (*int32, bool) {
	if o == nil || IsNil(o.FormId) {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *Form) HasFormId() bool {
	if o != nil && !IsNil(o.FormId) {
		return true
	}

	return false
}

// SetFormId gets a reference to the given int32 and assigns it to the FormId field.
func (o *Form) SetFormId(v int32) {
	o.FormId = &v
}

// GetFormKey returns the FormKey field value if set, zero value otherwise.
func (o *Form) GetFormKey() string {
	if o == nil || IsNil(o.FormKey) {
		var ret string
		return ret
	}
	return *o.FormKey
}

// GetFormKeyOk returns a tuple with the FormKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetFormKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FormKey) {
		return nil, false
	}
	return o.FormKey, true
}

// HasFormKey returns a boolean if a field has been set.
func (o *Form) HasFormKey() bool {
	if o != nil && !IsNil(o.FormKey) {
		return true
	}

	return false
}

// SetFormKey gets a reference to the given string and assigns it to the FormKey field.
func (o *Form) SetFormKey(v string) {
	o.FormKey = &v
}

// GetFormName returns the FormName field value if set, zero value otherwise.
func (o *Form) GetFormName() string {
	if o == nil || IsNil(o.FormName) {
		var ret string
		return ret
	}
	return *o.FormName
}

// GetFormNameOk returns a tuple with the FormName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetFormNameOk() (*string, bool) {
	if o == nil || IsNil(o.FormName) {
		return nil, false
	}
	return o.FormName, true
}

// HasFormName returns a boolean if a field has been set.
func (o *Form) HasFormName() bool {
	if o != nil && !IsNil(o.FormName) {
		return true
	}

	return false
}

// SetFormName gets a reference to the given string and assigns it to the FormName field.
func (o *Form) SetFormName(v string) {
	o.FormName = &v
}

// GetFormType returns the FormType field value if set, zero value otherwise.
func (o *Form) GetFormType() string {
	if o == nil || IsNil(o.FormType) {
		var ret string
		return ret
	}
	return *o.FormType
}

// GetFormTypeOk returns a tuple with the FormType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetFormTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FormType) {
		return nil, false
	}
	return o.FormType, true
}

// HasFormType returns a boolean if a field has been set.
func (o *Form) HasFormType() bool {
	if o != nil && !IsNil(o.FormType) {
		return true
	}

	return false
}

// SetFormType gets a reference to the given string and assigns it to the FormType field.
func (o *Form) SetFormType(v string) {
	o.FormType = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *Form) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *Form) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *Form) SetRevision(v int32) {
	o.Revision = &v
}

// GetEmbeddedLog returns the EmbeddedLog field value if set, zero value otherwise.
func (o *Form) GetEmbeddedLog() bool {
	if o == nil || IsNil(o.EmbeddedLog) {
		var ret bool
		return ret
	}
	return *o.EmbeddedLog
}

// GetEmbeddedLogOk returns a tuple with the EmbeddedLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetEmbeddedLogOk() (*bool, bool) {
	if o == nil || IsNil(o.EmbeddedLog) {
		return nil, false
	}
	return o.EmbeddedLog, true
}

// HasEmbeddedLog returns a boolean if a field has been set.
func (o *Form) HasEmbeddedLog() bool {
	if o != nil && !IsNil(o.EmbeddedLog) {
		return true
	}

	return false
}

// SetEmbeddedLog gets a reference to the given bool and assigns it to the EmbeddedLog field.
func (o *Form) SetEmbeddedLog(v bool) {
	o.EmbeddedLog = &v
}

// GetEnforceOwnership returns the EnforceOwnership field value if set, zero value otherwise.
func (o *Form) GetEnforceOwnership() bool {
	if o == nil || IsNil(o.EnforceOwnership) {
		var ret bool
		return ret
	}
	return *o.EnforceOwnership
}

// GetEnforceOwnershipOk returns a tuple with the EnforceOwnership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetEnforceOwnershipOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceOwnership) {
		return nil, false
	}
	return o.EnforceOwnership, true
}

// HasEnforceOwnership returns a boolean if a field has been set.
func (o *Form) HasEnforceOwnership() bool {
	if o != nil && !IsNil(o.EnforceOwnership) {
		return true
	}

	return false
}

// SetEnforceOwnership gets a reference to the given bool and assigns it to the EnforceOwnership field.
func (o *Form) SetEnforceOwnership(v bool) {
	o.EnforceOwnership = &v
}

// GetUserAgreement returns the UserAgreement field value if set, zero value otherwise.
func (o *Form) GetUserAgreement() bool {
	if o == nil || IsNil(o.UserAgreement) {
		var ret bool
		return ret
	}
	return *o.UserAgreement
}

// GetUserAgreementOk returns a tuple with the UserAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetUserAgreementOk() (*bool, bool) {
	if o == nil || IsNil(o.UserAgreement) {
		return nil, false
	}
	return o.UserAgreement, true
}

// HasUserAgreement returns a boolean if a field has been set.
func (o *Form) HasUserAgreement() bool {
	if o != nil && !IsNil(o.UserAgreement) {
		return true
	}

	return false
}

// SetUserAgreement gets a reference to the given bool and assigns it to the UserAgreement field.
func (o *Form) SetUserAgreement(v bool) {
	o.UserAgreement = &v
}

// GetSubjectRecordReport returns the SubjectRecordReport field value if set, zero value otherwise.
func (o *Form) GetSubjectRecordReport() bool {
	if o == nil || IsNil(o.SubjectRecordReport) {
		var ret bool
		return ret
	}
	return *o.SubjectRecordReport
}

// GetSubjectRecordReportOk returns a tuple with the SubjectRecordReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetSubjectRecordReportOk() (*bool, bool) {
	if o == nil || IsNil(o.SubjectRecordReport) {
		return nil, false
	}
	return o.SubjectRecordReport, true
}

// HasSubjectRecordReport returns a boolean if a field has been set.
func (o *Form) HasSubjectRecordReport() bool {
	if o != nil && !IsNil(o.SubjectRecordReport) {
		return true
	}

	return false
}

// SetSubjectRecordReport gets a reference to the given bool and assigns it to the SubjectRecordReport field.
func (o *Form) SetSubjectRecordReport(v bool) {
	o.SubjectRecordReport = &v
}

// GetUnscheduledVisit returns the UnscheduledVisit field value if set, zero value otherwise.
func (o *Form) GetUnscheduledVisit() bool {
	if o == nil || IsNil(o.UnscheduledVisit) {
		var ret bool
		return ret
	}
	return *o.UnscheduledVisit
}

// GetUnscheduledVisitOk returns a tuple with the UnscheduledVisit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetUnscheduledVisitOk() (*bool, bool) {
	if o == nil || IsNil(o.UnscheduledVisit) {
		return nil, false
	}
	return o.UnscheduledVisit, true
}

// HasUnscheduledVisit returns a boolean if a field has been set.
func (o *Form) HasUnscheduledVisit() bool {
	if o != nil && !IsNil(o.UnscheduledVisit) {
		return true
	}

	return false
}

// SetUnscheduledVisit gets a reference to the given bool and assigns it to the UnscheduledVisit field.
func (o *Form) SetUnscheduledVisit(v bool) {
	o.UnscheduledVisit = &v
}

// GetOtherForms returns the OtherForms field value if set, zero value otherwise.
func (o *Form) GetOtherForms() bool {
	if o == nil || IsNil(o.OtherForms) {
		var ret bool
		return ret
	}
	return *o.OtherForms
}

// GetOtherFormsOk returns a tuple with the OtherForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetOtherFormsOk() (*bool, bool) {
	if o == nil || IsNil(o.OtherForms) {
		return nil, false
	}
	return o.OtherForms, true
}

// HasOtherForms returns a boolean if a field has been set.
func (o *Form) HasOtherForms() bool {
	if o != nil && !IsNil(o.OtherForms) {
		return true
	}

	return false
}

// SetOtherForms gets a reference to the given bool and assigns it to the OtherForms field.
func (o *Form) SetOtherForms(v bool) {
	o.OtherForms = &v
}

// GetEproForm returns the EproForm field value if set, zero value otherwise.
func (o *Form) GetEproForm() bool {
	if o == nil || IsNil(o.EproForm) {
		var ret bool
		return ret
	}
	return *o.EproForm
}

// GetEproFormOk returns a tuple with the EproForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetEproFormOk() (*bool, bool) {
	if o == nil || IsNil(o.EproForm) {
		return nil, false
	}
	return o.EproForm, true
}

// HasEproForm returns a boolean if a field has been set.
func (o *Form) HasEproForm() bool {
	if o != nil && !IsNil(o.EproForm) {
		return true
	}

	return false
}

// SetEproForm gets a reference to the given bool and assigns it to the EproForm field.
func (o *Form) SetEproForm(v bool) {
	o.EproForm = &v
}

// GetAllowCopy returns the AllowCopy field value if set, zero value otherwise.
func (o *Form) GetAllowCopy() bool {
	if o == nil || IsNil(o.AllowCopy) {
		var ret bool
		return ret
	}
	return *o.AllowCopy
}

// GetAllowCopyOk returns a tuple with the AllowCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetAllowCopyOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCopy) {
		return nil, false
	}
	return o.AllowCopy, true
}

// HasAllowCopy returns a boolean if a field has been set.
func (o *Form) HasAllowCopy() bool {
	if o != nil && !IsNil(o.AllowCopy) {
		return true
	}

	return false
}

// SetAllowCopy gets a reference to the given bool and assigns it to the AllowCopy field.
func (o *Form) SetAllowCopy(v bool) {
	o.AllowCopy = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Form) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Form) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Form) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Form) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Form) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Form) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetDateModified returns the DateModified field value if set, zero value otherwise.
func (o *Form) GetDateModified() string {
	if o == nil || IsNil(o.DateModified) {
		var ret string
		return ret
	}
	return *o.DateModified
}

// GetDateModifiedOk returns a tuple with the DateModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetDateModifiedOk() (*string, bool) {
	if o == nil || IsNil(o.DateModified) {
		return nil, false
	}
	return o.DateModified, true
}

// HasDateModified returns a boolean if a field has been set.
func (o *Form) HasDateModified() bool {
	if o != nil && !IsNil(o.DateModified) {
		return true
	}

	return false
}

// SetDateModified gets a reference to the given string and assigns it to the DateModified field.
func (o *Form) SetDateModified(v string) {
	o.DateModified = &v
}

func (o Form) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Form) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StudyKey) {
		toSerialize["studyKey"] = o.StudyKey
	}
	if !IsNil(o.FormId) {
		toSerialize["formId"] = o.FormId
	}
	if !IsNil(o.FormKey) {
		toSerialize["formKey"] = o.FormKey
	}
	if !IsNil(o.FormName) {
		toSerialize["formName"] = o.FormName
	}
	if !IsNil(o.FormType) {
		toSerialize["formType"] = o.FormType
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.EmbeddedLog) {
		toSerialize["embeddedLog"] = o.EmbeddedLog
	}
	if !IsNil(o.EnforceOwnership) {
		toSerialize["enforceOwnership"] = o.EnforceOwnership
	}
	if !IsNil(o.UserAgreement) {
		toSerialize["userAgreement"] = o.UserAgreement
	}
	if !IsNil(o.SubjectRecordReport) {
		toSerialize["subjectRecordReport"] = o.SubjectRecordReport
	}
	if !IsNil(o.UnscheduledVisit) {
		toSerialize["unscheduledVisit"] = o.UnscheduledVisit
	}
	if !IsNil(o.OtherForms) {
		toSerialize["otherForms"] = o.OtherForms
	}
	if !IsNil(o.EproForm) {
		toSerialize["eproForm"] = o.EproForm
	}
	if !IsNil(o.AllowCopy) {
		toSerialize["allowCopy"] = o.AllowCopy
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateModified) {
		toSerialize["dateModified"] = o.DateModified
	}
	return toSerialize, nil
}

type NullableForm struct {
	value *Form
	isSet bool
}

func (v NullableForm) Get() *Form {
	return v.value
}

func (v *NullableForm) Set(val *Form) {
	v.value = val
	v.isSet = true
}

func (v NullableForm) IsSet() bool {
	return v.isSet
}

func (v *NullableForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForm(val *Form) *NullableForm {
	return &NullableForm{value: val, isSet: true}
}

func (v NullableForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


